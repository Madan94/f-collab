{"ast":null,"code":"var _jsxFileName = \"E:\\\\f-collab\\\\src\\\\Pages\\\\Editor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from \"react\";\nimport { ReactFlow, ReactFlowProvider, Controls, MiniMap, Background, addEdge, useNodesState, useEdgesState } from \"@xyflow/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  type: \"default\",\n  position: {\n    x: 250,\n    y: 100\n  },\n  data: {\n    label: \"Start Node\"\n  }\n}];\nexport const Editor = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const reactFlowWrapper = useRef(null);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n\n  // ✅ Add a Rectangle Node\n  const addRectangle = () => {\n    setNodes(nds => [...nds, {\n      id: `${nds.length + 1}`,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: \"Rectangle\"\n      }\n    }]);\n  };\n\n  // ✅ Add a Circle Node\n  const addCircle = () => {\n    setNodes(nds => [...nds, {\n      id: `${nds.length + 1}`,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: \"Circle\"\n      }\n    }]);\n  };\n\n  // ✅ Export as PNG\n  const downloadImage = () => {\n    const canvas = document.querySelector(\"canvas\");\n    const dataUrl = canvas.toDataURL(\"image/png\");\n    const link = document.createElement(\"a\");\n    link.href = dataUrl;\n    link.download = \"diagram.png\";\n    link.click();\n  };\n\n  // ✅ Save Diagram JSON\n  const saveDiagram = () => {\n    const diagramData = {\n      nodes,\n      edges\n    };\n    localStorage.setItem(\"diagramData\", JSON.stringify(diagramData));\n    alert(\"Diagram saved!\");\n  };\n\n  // ✅ Load Diagram JSON\n  const loadDiagram = () => {\n    const savedData = localStorage.getItem(\"diagramData\");\n    if (savedData) {\n      const {\n        nodes,\n        edges\n      } = JSON.parse(savedData);\n      setNodes(nodes);\n      setEdges(edges);\n    } else {\n      alert(\"No saved diagram found!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100vh\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"10px\",\n          background: \"#f5f5f5\",\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRectangle,\n          children: \"Add Rectangle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addCircle,\n          children: \"Add Circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveDiagram,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadDiagram,\n          children: \"Load\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadImage,\n          children: \"Export as PNG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          fitView: true,\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Background, {\n            color: \"#ddd\",\n            gap: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Editor, \"hlRgN9hdmIJE9ScyeKqK3vC378o=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","useCallback","useRef","ReactFlow","ReactFlowProvider","Controls","MiniMap","Background","addEdge","useNodesState","useEdgesState","jsxDEV","_jsxDEV","initialNodes","id","type","position","x","y","data","label","Editor","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowWrapper","onConnect","params","eds","addRectangle","nds","length","Math","random","addCircle","downloadImage","canvas","document","querySelector","dataUrl","toDataURL","link","createElement","href","download","click","saveDiagram","diagramData","localStorage","setItem","JSON","stringify","alert","loadDiagram","savedData","getItem","parse","children","style","height","width","display","flexDirection","padding","background","gap","onClick","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","fitView","color","_c","$RefreshReg$"],"sources":["E:/f-collab/src/Pages/Editor.jsx"],"sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport {ReactFlow,\r\n  ReactFlowProvider,\r\n  Controls,\r\n  MiniMap,\r\n  Background,\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n} from \"@xyflow/react\";\r\n\r\nconst initialNodes = [\r\n  { id: \"1\", type: \"default\", position: { x: 250, y: 100 }, data: { label: \"Start Node\" } },\r\n];\r\n\r\nexport const Editor = () => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    []\r\n  );\r\n\r\n  // ✅ Add a Rectangle Node\r\n  const addRectangle = () => {\r\n    setNodes((nds) => [\r\n      ...nds,\r\n      {\r\n        id: `${nds.length + 1}`,\r\n        position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n        data: { label: \"Rectangle\" },\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // ✅ Add a Circle Node\r\n  const addCircle = () => {\r\n    setNodes((nds) => [\r\n      ...nds,\r\n      {\r\n        id: `${nds.length + 1}`,\r\n        position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n        data: { label: \"Circle\" },\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // ✅ Export as PNG\r\n  const downloadImage = () => {\r\n    const canvas = document.querySelector(\"canvas\");\r\n    const dataUrl = canvas.toDataURL(\"image/png\");\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = dataUrl;\r\n    link.download = \"diagram.png\";\r\n    link.click();\r\n  };\r\n\r\n  // ✅ Save Diagram JSON\r\n  const saveDiagram = () => {\r\n    const diagramData = { nodes, edges };\r\n    localStorage.setItem(\"diagramData\", JSON.stringify(diagramData));\r\n    alert(\"Diagram saved!\");\r\n  };\r\n\r\n  // ✅ Load Diagram JSON\r\n  const loadDiagram = () => {\r\n    const savedData = localStorage.getItem(\"diagramData\");\r\n    if (savedData) {\r\n      const { nodes, edges } = JSON.parse(savedData);\r\n      setNodes(nodes);\r\n      setEdges(edges);\r\n    } else {\r\n      alert(\"No saved diagram found!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div style={{ height: \"100vh\", width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        \r\n        {/* Toolbar */}\r\n        <div style={{ padding: \"10px\", background: \"#f5f5f5\", display: \"flex\", gap: \"10px\" }}>\r\n          <button onClick={addRectangle}>Add Rectangle</button>\r\n          <button onClick={addCircle}>Add Circle</button>\r\n          <button onClick={saveDiagram}>Save</button>\r\n          <button onClick={loadDiagram}>Load</button>\r\n          <button onClick={downloadImage}>Export as PNG</button>\r\n        </div>\r\n\r\n        {/* React Flow Diagram Editor */}\r\n        <div style={{ flexGrow: 1 }}>\r\n          <ReactFlow\r\n            nodes={nodes}\r\n            edges={edges}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            fitView\r\n          >\r\n            <MiniMap />\r\n            <Controls />\r\n            <Background color=\"#ddd\" gap={20} />\r\n          </ReactFlow>\r\n        </div>\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}