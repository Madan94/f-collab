{"ast":null,"code":"import { drag } from 'd3-drag';\nimport { select, pointer } from 'd3-selection';\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\nconst errorMessages = {\n  error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n  error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n  error003: nodeType => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n  error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n  error005: () => 'Only child nodes can use a parent extent.',\n  error006: () => \"Can't create edge. An edge needs a source and a target.\",\n  error007: id => `The old edge with id=${id} does not exist.`,\n  error009: type => `Marker type \"${type}\" doesn't exist.`,\n  error008: (handleType, {\n    id,\n    sourceHandle,\n    targetHandle\n  }) => `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`,\n  error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n  error011: edgeType => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n  error012: id => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n  error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,\n  error014: () => 'useNodeConnections: No node ID found. Call useNodeConnections inside a custom Node or provide a node ID.'\n};\nconst infiniteExtent = [[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY], [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]];\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\n\n/**\r\n * The `ConnectionMode` is used to set the mode of connection between nodes.\r\n * The `Strict` mode is the default one and only allows source to target edges.\r\n * `Loose` mode allows source to source and target to target edges as well.\r\n *\r\n * @public\r\n */\nvar ConnectionMode;\n(function (ConnectionMode) {\n  ConnectionMode[\"Strict\"] = \"strict\";\n  ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\n/**\r\n * This enum is used to set the different modes of panning the viewport when the\r\n * user scrolls. The `Free` mode allows the user to pan in any direction by scrolling\r\n * with a device like a trackpad. The `Vertical` and `Horizontal` modes restrict\r\n * scroll panning to only the vertical or horizontal axis, respectively.\r\n *\r\n * @public\r\n */\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n  PanOnScrollMode[\"Free\"] = \"free\";\n  PanOnScrollMode[\"Vertical\"] = \"vertical\";\n  PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n  SelectionMode[\"Partial\"] = \"partial\";\n  SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nconst initialConnection = {\n  inProgress: false,\n  isValid: null,\n  from: null,\n  fromHandle: null,\n  fromPosition: null,\n  fromNode: null,\n  to: null,\n  toHandle: null,\n  toPosition: null,\n  toNode: null\n};\n\n/**\r\n * If you set the `connectionLineType` prop on your [`<ReactFlow />`](/api-reference/react-flow#connection-connectionLineType)\r\n *component, it will dictate the style of connection line rendered when creating\r\n *new edges.\r\n *\r\n * @public\r\n *\r\n * @remarks If you choose to render a custom connection line component, this value will be\r\n *passed to your component as part of its [`ConnectionLineComponentProps`](/api-reference/types/connection-line-component-props).\r\n */\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n  ConnectionLineType[\"Bezier\"] = \"default\";\n  ConnectionLineType[\"Straight\"] = \"straight\";\n  ConnectionLineType[\"Step\"] = \"step\";\n  ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n  ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\n/**\r\n * Edges may optionally have a marker on either end. The MarkerType type enumerates\r\n * the options available to you when configuring a given marker.\r\n *\r\n * @public\r\n */\nvar MarkerType;\n(function (MarkerType) {\n  MarkerType[\"Arrow\"] = \"arrow\";\n  MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\n\n/**\r\n * While [`PanelPosition`](/api-reference/types/panel-position) can be used to place a\r\n * component in the corners of a container, the `Position` enum is less precise and used\r\n * primarily in relation to edges and handles.\r\n *\r\n * @public\r\n */\nvar Position;\n(function (Position) {\n  Position[\"Left\"] = \"left\";\n  Position[\"Top\"] = \"top\";\n  Position[\"Right\"] = \"right\";\n  Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nconst oppositePosition = {\n  [Position.Left]: Position.Right,\n  [Position.Right]: Position.Left,\n  [Position.Top]: Position.Bottom,\n  [Position.Bottom]: Position.Top\n};\n\n/**\r\n * @internal\r\n */\nfunction areConnectionMapsEqual(a, b) {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b || a.size !== b.size) {\n    return false;\n  }\n  if (!a.size && !b.size) {\n    return true;\n  }\n  for (const key of a.keys()) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * We call the callback for all connections in a that are not in b\r\n *\r\n * @internal\r\n */\nfunction handleConnectionChange(a, b, cb) {\n  if (!cb) {\n    return;\n  }\n  const diff = [];\n  a.forEach((connection, key) => {\n    if (!b?.has(key)) {\n      diff.push(connection);\n    }\n  });\n  if (diff.length) {\n    cb(diff);\n  }\n}\nfunction getConnectionStatus(isValid) {\n  return isValid === null ? null : isValid ? 'valid' : 'invalid';\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * Test whether an object is useable as an Edge\r\n * @public\r\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\r\n * @param element - The element to test\r\n * @returns A boolean indicating whether the element is an Edge\r\n */\nconst isEdgeBase = element => 'id' in element && 'source' in element && 'target' in element;\n/**\r\n * Test whether an object is useable as a Node\r\n * @public\r\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\r\n * @param element - The element to test\r\n * @returns A boolean indicating whether the element is an Node\r\n */\nconst isNodeBase = element => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\nconst isInternalNodeBase = element => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\n/**\r\n * This util is used to tell you what nodes, if any, are connected to the given node\r\n * as the _target_ of an edge.\r\n * @public\r\n * @param node - The node to get the connected nodes from\r\n * @param nodes - The array of all nodes\r\n * @param edges - The array of all edges\r\n * @returns An array of nodes that are connected over eges where the source is the given node\r\n *\r\n * @example\r\n * ```ts\r\n *import { getOutgoers } from '@xyflow/react';\r\n *\r\n *const nodes = [];\r\n *const edges = [];\r\n *\r\n *const outgoers = getOutgoers(\r\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\r\n *  nodes,\r\n *  edges,\r\n *);\r\n *```\r\n */\nconst getOutgoers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const outgoerIds = new Set();\n  edges.forEach(edge => {\n    if (edge.source === node.id) {\n      outgoerIds.add(edge.target);\n    }\n  });\n  return nodes.filter(n => outgoerIds.has(n.id));\n};\n/**\r\n * This util is used to tell you what nodes, if any, are connected to the given node\r\n * as the _source_ of an edge.\r\n * @public\r\n * @param node - The node to get the connected nodes from\r\n * @param nodes - The array of all nodes\r\n * @param edges - The array of all edges\r\n * @returns An array of nodes that are connected over eges where the target is the given node\r\n *\r\n * @example\r\n * ```ts\r\n *import { getIncomers } from '@xyflow/react';\r\n *\r\n *const nodes = [];\r\n *const edges = [];\r\n *\r\n *const incomers = getIncomers(\r\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\r\n *  nodes,\r\n *  edges,\r\n *);\r\n *```\r\n */\nconst getIncomers = (node, nodes, edges) => {\n  if (!node.id) {\n    return [];\n  }\n  const incomersIds = new Set();\n  edges.forEach(edge => {\n    if (edge.target === node.id) {\n      incomersIds.add(edge.source);\n    }\n  });\n  return nodes.filter(n => incomersIds.has(n.id));\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n  const {\n    width,\n    height\n  } = getNodeDimensions(node);\n  const origin = node.origin ?? nodeOrigin;\n  const offsetX = width * origin[0];\n  const offsetY = height * origin[1];\n  return {\n    x: node.position.x - offsetX,\n    y: node.position.y - offsetY\n  };\n};\n/**\r\n * Returns the bounding box that contains all the given nodes in an array. This can\r\n * be useful when combined with [`getViewportForBounds`](/api-reference/utils/get-viewport-for-bounds)\r\n * to calculate the correct transform to fit the given nodes in a viewport.\r\n * @public\r\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\r\n * @param nodes - Nodes to calculate the bounds for\r\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\r\n * @returns Bounding box enclosing all nodes\r\n *\r\n * @remarks This function was previously called `getRectOfNodes`\r\n *\r\n * @example\r\n * ```js\r\n *import { getNodesBounds } from '@xyflow/react';\r\n *\r\n *const nodes = [\r\n *  {\r\n *    id: 'a',\r\n *    position: { x: 0, y: 0 },\r\n *    data: { label: 'a' },\r\n *    width: 50,\r\n *    height: 25,\r\n *  },\r\n *  {\r\n *    id: 'b',\r\n *    position: { x: 100, y: 100 },\r\n *    data: { label: 'b' },\r\n *    width: 50,\r\n *    height: 25,\r\n *  },\r\n *];\r\n *\r\n *const bounds = getNodesBounds(nodes);\r\n *```\r\n */\nconst getNodesBounds = (nodes, params = {\n  nodeOrigin: [0, 0],\n  nodeLookup: undefined\n}) => {\n  if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\n    console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\n  }\n  if (nodes.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const box = nodes.reduce((currBox, nodeOrId) => {\n    const isId = typeof nodeOrId === 'string';\n    let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\n    if (params.nodeLookup) {\n      currentNode = isId ? params.nodeLookup.get(nodeOrId) : !isInternalNodeBase(nodeOrId) ? params.nodeLookup.get(nodeOrId.id) : nodeOrId;\n    }\n    const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : {\n      x: 0,\n      y: 0,\n      x2: 0,\n      y2: 0\n    };\n    return getBoundsOfBoxes(currBox, nodeBox);\n  }, {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  });\n  return boxToRect(box);\n};\n/**\r\n * Determines a bounding box that contains all given nodes in an array\r\n * @internal\r\n */\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\n  if (nodeLookup.size === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  let box = {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  };\n  nodeLookup.forEach(node => {\n    if (params.filter === undefined || params.filter(node)) {\n      const nodeBox = nodeToBox(node);\n      box = getBoundsOfBoxes(box, nodeBox);\n    }\n  });\n  return boxToRect(box);\n};\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false,\n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false) => {\n  const paneRect = {\n    ...pointToRendererPoint(rect, [tx, ty, tScale]),\n    width: rect.width / tScale,\n    height: rect.height / tScale\n  };\n  const visibleNodes = [];\n  for (const node of nodes.values()) {\n    const {\n      measured,\n      selectable = true,\n      hidden = false\n    } = node;\n    if (excludeNonSelectableNodes && !selectable || hidden) {\n      continue;\n    }\n    const width = measured.width ?? node.width ?? node.initialWidth ?? null;\n    const height = measured.height ?? node.height ?? node.initialHeight ?? null;\n    const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\n    const area = (width ?? 0) * (height ?? 0);\n    const partiallyVisible = partially && overlappingArea > 0;\n    const forceInitialRender = !node.internals.handleBounds;\n    const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\n    if (isVisible || node.dragging) {\n      visibleNodes.push(node);\n    }\n  }\n  return visibleNodes;\n};\n/**\r\n * This utility filters an array of edges, keeping only those where either the source or target\r\n * node is present in the given array of nodes.\r\n * @public\r\n * @param nodes - Nodes you want to get the connected edges for\r\n * @param edges - All edges\r\n * @returns Array of edges that connect any of the given nodes with each other\r\n *\r\n * @example\r\n * ```js\r\n *import { getConnectedEdges } from '@xyflow/react';\r\n *\r\n *const nodes = [\r\n *  { id: 'a', position: { x: 0, y: 0 } },\r\n *  { id: 'b', position: { x: 100, y: 0 } },\r\n *];\r\n *\r\n *const edges = [\r\n *  { id: 'a->c', source: 'a', target: 'c' },\r\n *  { id: 'c->d', source: 'c', target: 'd' },\r\n *];\r\n *\r\n *const connectedEdges = getConnectedEdges(nodes, edges);\r\n * // => [{ id: 'a->c', source: 'a', target: 'c' }]\r\n *```\r\n */\nconst getConnectedEdges = (nodes, edges) => {\n  const nodeIds = new Set();\n  nodes.forEach(node => {\n    nodeIds.add(node.id);\n  });\n  return edges.filter(edge => nodeIds.has(edge.source) || nodeIds.has(edge.target));\n};\nfunction getFitViewNodes(nodeLookup, options) {\n  const fitViewNodes = new Map();\n  const optionNodeIds = options?.nodes ? new Set(options.nodes.map(node => node.id)) : null;\n  nodeLookup.forEach(n => {\n    const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\n    if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\n      fitViewNodes.set(n.id, n);\n    }\n  });\n  return fitViewNodes;\n}\nasync function fitView({\n  nodes,\n  width,\n  height,\n  panZoom,\n  minZoom,\n  maxZoom\n}, options) {\n  if (nodes.size === 0) {\n    return Promise.resolve(false);\n  }\n  const bounds = getInternalNodesBounds(nodes);\n  const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\n  await panZoom.setViewport(viewport, {\n    duration: options?.duration\n  });\n  return Promise.resolve(true);\n}\n/**\r\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\r\n *\r\n * @internal\r\n * @returns position, positionAbsolute\r\n */\nfunction calculateNodePosition({\n  nodeId,\n  nextPosition,\n  nodeLookup,\n  nodeOrigin = [0, 0],\n  nodeExtent,\n  onError\n}) {\n  const node = nodeLookup.get(nodeId);\n  const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode ? parentNode.internals.positionAbsolute : {\n    x: 0,\n    y: 0\n  };\n  const origin = node.origin ?? nodeOrigin;\n  let extent = nodeExtent;\n  if (node.extent === 'parent' && !node.expandParent) {\n    if (!parentNode) {\n      onError?.('005', errorMessages['error005']());\n    } else {\n      const parentWidth = parentNode.measured.width;\n      const parentHeight = parentNode.measured.height;\n      if (parentWidth && parentHeight) {\n        extent = [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]];\n      }\n    }\n  } else if (parentNode && isCoordinateExtent(node.extent)) {\n    extent = [[node.extent[0][0] + parentX, node.extent[0][1] + parentY], [node.extent[1][0] + parentX, node.extent[1][1] + parentY]];\n  }\n  const positionAbsolute = isCoordinateExtent(extent) ? clampPosition(nextPosition, extent, node.measured) : nextPosition;\n  return {\n    position: {\n      x: positionAbsolute.x - parentX + node.measured.width * origin[0],\n      y: positionAbsolute.y - parentY + node.measured.height * origin[1]\n    },\n    positionAbsolute\n  };\n}\n/**\r\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\r\n * @internal\r\n * @param param.nodesToRemove - The nodes to remove\r\n * @param param.edgesToRemove - The edges to remove\r\n * @param param.nodes - All nodes\r\n * @param param.edges - All edges\r\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\r\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\r\n */\nasync function getElementsToRemove({\n  nodesToRemove = [],\n  edgesToRemove = [],\n  nodes,\n  edges,\n  onBeforeDelete\n}) {\n  const nodeIds = new Set(nodesToRemove.map(node => node.id));\n  const matchingNodes = [];\n  for (const node of nodes) {\n    if (node.deletable === false) {\n      continue;\n    }\n    const isIncluded = nodeIds.has(node.id);\n    const parentHit = !isIncluded && node.parentId && matchingNodes.find(n => n.id === node.parentId);\n    if (isIncluded || parentHit) {\n      matchingNodes.push(node);\n    }\n  }\n  const edgeIds = new Set(edgesToRemove.map(edge => edge.id));\n  const deletableEdges = edges.filter(edge => edge.deletable !== false);\n  const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\n  const matchingEdges = connectedEdges;\n  for (const edge of deletableEdges) {\n    const isIncluded = edgeIds.has(edge.id);\n    if (isIncluded && !matchingEdges.find(e => e.id === edge.id)) {\n      matchingEdges.push(edge);\n    }\n  }\n  if (!onBeforeDelete) {\n    return {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    };\n  }\n  const onBeforeDeleteResult = await onBeforeDelete({\n    nodes: matchingNodes,\n    edges: matchingEdges\n  });\n  if (typeof onBeforeDeleteResult === 'boolean') {\n    return onBeforeDeleteResult ? {\n      edges: matchingEdges,\n      nodes: matchingNodes\n    } : {\n      edges: [],\n      nodes: []\n    };\n  }\n  return onBeforeDeleteResult;\n}\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = {\n  x: 0,\n  y: 0\n}, extent, dimensions) => ({\n  x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\n  y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0))\n});\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\n  const {\n    width: parentWidth,\n    height: parentHeight\n  } = getNodeDimensions(parent);\n  const {\n    x: parentX,\n    y: parentY\n  } = parent.internals.positionAbsolute;\n  return clampPosition(childPosition, [[parentX, parentY], [parentX + parentWidth, parentY + parentHeight]], childDimensions);\n}\n/**\r\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\r\n * @internal\r\n * @param value - One dimensional poition of the mouse (x or y)\r\n * @param min - Minimal position on canvas before panning starts\r\n * @param max - Maximal position on canvas before panning starts\r\n * @returns - A number between 0 and 1 that represents the velocity of panning\r\n */\nconst calcAutoPanVelocity = (value, min, max) => {\n  if (value < min) {\n    return clamp(Math.abs(value - min), 1, min) / min;\n  } else if (value > max) {\n    return -clamp(Math.abs(value - max), 1, min) / min;\n  }\n  return 0;\n};\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\n  const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\n  const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\n  return [xMovement, yMovement];\n};\nconst getBoundsOfBoxes = (box1, box2) => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2)\n});\nconst rectToBox = ({\n  x,\n  y,\n  width,\n  height\n}) => ({\n  x,\n  y,\n  x2: x + width,\n  y2: y + height\n});\nconst boxToRect = ({\n  x,\n  y,\n  x2,\n  y2\n}) => ({\n  x,\n  y,\n  width: x2 - x,\n  height: y2 - y\n});\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n};\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\n  const {\n    x,\n    y\n  } = isInternalNodeBase(node) ? node.internals.positionAbsolute : getNodePositionWithOrigin(node, nodeOrigin);\n  return {\n    x,\n    y,\n    x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\n    y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0)\n  };\n};\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n  const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n  const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n  return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = obj => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = n => !isNaN(n) && isFinite(n);\n// used for a11y key board controls for nodes and edges\nconst devWarn = (id, message) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n  }\n};\nconst snapPosition = (position, snapGrid = [1, 1]) => {\n  return {\n    x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\n    y: snapGrid[1] * Math.round(position.y / snapGrid[1])\n  };\n};\nconst pointToRendererPoint = ({\n  x,\n  y\n}, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\n  const position = {\n    x: (x - tx) / tScale,\n    y: (y - ty) / tScale\n  };\n  return snapToGrid ? snapPosition(position, snapGrid) : position;\n};\nconst rendererPointToPoint = ({\n  x,\n  y\n}, [tx, ty, tScale]) => {\n  return {\n    x: x * tScale + tx,\n    y: y * tScale + ty\n  };\n};\n/**\r\n * Returns a viewport that encloses the given bounds with optional padding.\r\n * @public\r\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\r\n * @param bounds - Bounds to fit inside viewport\r\n * @param width - Width of the viewport\r\n * @param height  - Height of the viewport\r\n * @param minZoom - Minimum zoom level of the resulting viewport\r\n * @param maxZoom - Maximum zoom level of the resulting viewport\r\n * @param padding - Optional padding around the bounds\r\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\r\n * @example\r\n * const { x, y, zoom } = getViewportForBounds(\r\n *{ x: 0, y: 0, width: 100, height: 100},\r\n *1200, 800, 0.5, 2);\r\n */\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\n  const xZoom = width / (bounds.width * (1 + padding));\n  const yZoom = height / (bounds.height * (1 + padding));\n  const zoom = Math.min(xZoom, yZoom);\n  const clampedZoom = clamp(zoom, minZoom, maxZoom);\n  const boundsCenterX = bounds.x + bounds.width / 2;\n  const boundsCenterY = bounds.y + bounds.height / 2;\n  const x = width / 2 - boundsCenterX * clampedZoom;\n  const y = height / 2 - boundsCenterY * clampedZoom;\n  return {\n    x,\n    y,\n    zoom: clampedZoom\n  };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nfunction isCoordinateExtent(extent) {\n  return extent !== undefined && extent !== 'parent';\n}\nfunction getNodeDimensions(node) {\n  return {\n    width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\n    height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0\n  };\n}\nfunction nodeHasDimensions(node) {\n  return (node.measured?.width ?? node.width ?? node.initialWidth) !== undefined && (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined;\n}\n/**\r\n * Convert child position to aboslute position\r\n *\r\n * @internal\r\n * @param position\r\n * @param parentId\r\n * @param nodeLookup\r\n * @param nodeOrigin\r\n * @returns an internal node with an absolute position\r\n */\nfunction evaluateAbsolutePosition(position, dimensions = {\n  width: 0,\n  height: 0\n}, parentId, nodeLookup, nodeOrigin) {\n  const positionAbsolute = {\n    ...position\n  };\n  const parent = nodeLookup.get(parentId);\n  if (parent) {\n    const origin = parent.origin || nodeOrigin;\n    positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\n    positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\n  }\n  return positionAbsolute;\n}\nfunction areSetsEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getPointerPosition(event, {\n  snapGrid = [0, 0],\n  snapToGrid = false,\n  transform,\n  containerBounds\n}) {\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const pointerPos = pointToRendererPoint({\n    x: x - (containerBounds?.left ?? 0),\n    y: y - (containerBounds?.top ?? 0)\n  }, transform);\n  const {\n    x: xSnapped,\n    y: ySnapped\n  } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\n  // we need the snapped position in order to be able to skip unnecessary drag events\n  return {\n    xSnapped,\n    ySnapped,\n    ...pointerPos\n  };\n}\nconst getDimensions = node => ({\n  width: node.offsetWidth,\n  height: node.offsetHeight\n});\nconst getHostForElement = element => element?.getRootNode?.() || window?.document;\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\nfunction isInputDOMNode(event) {\n  // using composed path for handling shadow dom\n  const target = event.composedPath?.()?.[0] || event.target;\n  if (target?.nodeType !== 1 /* Node.ELEMENT_NODE */) return false;\n  const isInput = inputTags.includes(target.nodeName) || target.hasAttribute('contenteditable');\n  // when an input field is focused we don't want to trigger deletion or movement of nodes\n  return isInput || !!target.closest('.nokey');\n}\nconst isMouseEvent = event => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n  const isMouse = isMouseEvent(event);\n  const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\n  const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\n  return {\n    x: evtX - (bounds?.left ?? 0),\n    y: evtY - (bounds?.top ?? 0)\n  };\n};\n/*\r\n * The handle bounds are calculated relative to the node element.\r\n * We store them in the internals object of the node in order to avoid\r\n * unnecessary recalculations.\r\n */\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\n  const handles = nodeElement.querySelectorAll(`.${type}`);\n  if (!handles || !handles.length) {\n    return null;\n  }\n  return Array.from(handles).map(handle => {\n    const handleBounds = handle.getBoundingClientRect();\n    return {\n      id: handle.getAttribute('data-handleid'),\n      type,\n      nodeId,\n      position: handle.getAttribute('data-handlepos'),\n      x: (handleBounds.left - nodeBounds.left) / zoom,\n      y: (handleBounds.top - nodeBounds.top) / zoom,\n      ...getDimensions(handle)\n    };\n  });\n};\nfunction getBezierEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourceControlX,\n  sourceControlY,\n  targetControlX,\n  targetControlY\n}) {\n  /*\r\n   * cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\r\n   * https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\r\n   */\n  const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  const offsetX = Math.abs(centerX - sourceX);\n  const offsetY = Math.abs(centerY - sourceY);\n  return [centerX, centerY, offsetX, offsetY];\n}\nfunction calculateControlOffset(distance, curvature) {\n  if (distance >= 0) {\n    return 0.5 * distance;\n  }\n  return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({\n  pos,\n  x1,\n  y1,\n  x2,\n  y2,\n  c\n}) {\n  switch (pos) {\n    case Position.Left:\n      return [x1 - calculateControlOffset(x1 - x2, c), y1];\n    case Position.Right:\n      return [x1 + calculateControlOffset(x2 - x1, c), y1];\n    case Position.Top:\n      return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n    case Position.Bottom:\n      return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n  }\n}\n/**\r\n * The `getBezierPath` util returns everything you need to render a bezier edge\r\n *between two nodes.\r\n * @public\r\n * @param params.sourceX - The x position of the source handle\r\n * @param params.sourceY - The y position of the source handle\r\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\r\n * @param params.targetX - The x position of the target handle\r\n * @param params.targetY - The y position of the target handle\r\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\r\n * @param params.curvature - The curvature of the bezier edge\r\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\r\n * @example\r\n * ```js\r\n *  const source = { x: 0, y: 20 };\r\n *  const target = { x: 150, y: 100 };\r\n *\r\n *  const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\r\n *    sourceX: source.x,\r\n *    sourceY: source.y,\r\n *    sourcePosition: Position.Right,\r\n *    targetX: target.x,\r\n *    targetY: target.y,\r\n *    targetPosition: Position.Left,\r\n *});\r\n *```\r\n *\r\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to\r\n *work with multiple edge paths at once.\r\n */\nfunction getBezierPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  curvature = 0.25\n}) {\n  const [sourceControlX, sourceControlY] = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  });\n  const [targetControlX, targetControlY] = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  });\n  const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  });\n  return [`M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\n\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const xOffset = Math.abs(targetX - sourceX) / 2;\n  const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  const yOffset = Math.abs(targetY - sourceY) / 2;\n  const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  return [centerX, centerY, xOffset, yOffset];\n}\nfunction getElevatedEdgeZIndex({\n  sourceNode,\n  targetNode,\n  selected = false,\n  zIndex = 0,\n  elevateOnSelect = false\n}) {\n  if (!elevateOnSelect) {\n    return zIndex;\n  }\n  const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\n  const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\n  return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n}\nfunction isEdgeVisible({\n  sourceNode,\n  targetNode,\n  width,\n  height,\n  transform\n}) {\n  const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\n  if (edgeBox.x === edgeBox.x2) {\n    edgeBox.x2 += 1;\n  }\n  if (edgeBox.y === edgeBox.y2) {\n    edgeBox.y2 += 1;\n  }\n  const viewRect = {\n    x: -transform[0] / transform[2],\n    y: -transform[1] / transform[2],\n    width: width / transform[2],\n    height: height / transform[2]\n  };\n  return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\n}\nconst getEdgeId = ({\n  source,\n  sourceHandle,\n  target,\n  targetHandle\n}) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst connectionExists = (edge, edges) => {\n  return edges.some(el => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));\n};\n/**\r\n * This util is a convenience function to add a new Edge to an array of edges. It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\r\n * @public\r\n * @param edgeParams - Either an Edge or a Connection you want to add\r\n * @param edges -  The array of all current edges\r\n * @returns A new array of edges with the new edge added\r\n *\r\n * @remarks If an edge with the same `target` and `source` already exists (and the same\r\n *`targetHandle` and `sourceHandle` if those are set), then this util won't add\r\n *a new edge even if the `id` property is different.\r\n *\r\n */\nconst addEdge = (edgeParams, edges) => {\n  if (!edgeParams.source || !edgeParams.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  let edge;\n  if (isEdgeBase(edgeParams)) {\n    edge = {\n      ...edgeParams\n    };\n  } else {\n    edge = {\n      ...edgeParams,\n      id: getEdgeId(edgeParams)\n    };\n  }\n  if (connectionExists(edge, edges)) {\n    return edges;\n  }\n  if (edge.sourceHandle === null) {\n    delete edge.sourceHandle;\n  }\n  if (edge.targetHandle === null) {\n    delete edge.targetHandle;\n  }\n  return edges.concat(edge);\n};\n/**\r\n * A handy utility to update an existing [`Edge`](/api-reference/types/edge) with new properties.\r\n *This searches your edge array for an edge with a matching `id` and updates its\r\n *properties with the connection you provide.\r\n * @public\r\n * @param oldEdge - The edge you want to update\r\n * @param newConnection - The new connection you want to update the edge with\r\n * @param edges - The array of all current edges\r\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\r\n * @returns the updated edges array\r\n *\r\n * @example\r\n * ```js\r\n *const onReconnect = useCallback(\r\n *  (oldEdge: Edge, newConnection: Connection) => setEdges((els) => reconnectEdge(oldEdge, newConnection, els)),[]);\r\n *```\r\n */\nconst reconnectEdge = (oldEdge, newConnection, edges, options = {\n  shouldReplaceId: true\n}) => {\n  const {\n    id: oldEdgeId,\n    ...rest\n  } = oldEdge;\n  if (!newConnection.source || !newConnection.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  const foundEdge = edges.find(e => e.id === oldEdge.id);\n  if (!foundEdge) {\n    devWarn('007', errorMessages['error007'](oldEdgeId));\n    return edges;\n  }\n  // Remove old edge and create the new edge with parameters of old edge.\n  const edge = {\n    ...rest,\n    id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n    source: newConnection.source,\n    target: newConnection.target,\n    sourceHandle: newConnection.sourceHandle,\n    targetHandle: newConnection.targetHandle\n  };\n  return edges.filter(e => e.id !== oldEdgeId).concat(edge);\n};\n\n/**\r\n * Calculates the straight line path between two points.\r\n * @public\r\n * @param params.sourceX - The x position of the source handle\r\n * @param params.sourceY - The y position of the source handle\r\n * @param params.targetX - The x position of the target handle\r\n * @param params.targetY - The y position of the target handle\r\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\r\n * @example\r\n * ```js\r\n *  const source = { x: 0, y: 20 };\r\n *  const target = { x: 150, y: 100 };\r\n *\r\n *  const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\r\n *    sourceX: source.x,\r\n *    sourceY: source.y,\r\n *    sourcePosition: Position.Right,\r\n *    targetX: target.x,\r\n *    targetY: target.y,\r\n *    targetPosition: Position.Left,\r\n *  });\r\n * ```\r\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\r\n */\nfunction getStraightPath({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst handleDirections = {\n  [Position.Left]: {\n    x: -1,\n    y: 0\n  },\n  [Position.Right]: {\n    x: 1,\n    y: 0\n  },\n  [Position.Top]: {\n    x: 0,\n    y: -1\n  },\n  [Position.Bottom]: {\n    x: 0,\n    y: 1\n  }\n};\nconst getDirection = ({\n  source,\n  sourcePosition = Position.Bottom,\n  target\n}) => {\n  if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n    return source.x < target.x ? {\n      x: 1,\n      y: 0\n    } : {\n      x: -1,\n      y: 0\n    };\n  }\n  return source.y < target.y ? {\n    x: 0,\n    y: 1\n  } : {\n    x: 0,\n    y: -1\n  };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n/*\r\n * ith this function we try to mimic a orthogonal edge routing behaviour\r\n * It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\r\n */\nfunction getPoints({\n  source,\n  sourcePosition = Position.Bottom,\n  target,\n  targetPosition = Position.Top,\n  center,\n  offset\n}) {\n  const sourceDir = handleDirections[sourcePosition];\n  const targetDir = handleDirections[targetPosition];\n  const sourceGapped = {\n    x: source.x + sourceDir.x * offset,\n    y: source.y + sourceDir.y * offset\n  };\n  const targetGapped = {\n    x: target.x + targetDir.x * offset,\n    y: target.y + targetDir.y * offset\n  };\n  const dir = getDirection({\n    source: sourceGapped,\n    sourcePosition,\n    target: targetGapped\n  });\n  const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n  const currDir = dir[dirAccessor];\n  let points = [];\n  let centerX, centerY;\n  const sourceGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const targetGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y\n  });\n  // opposite handle positions, default case\n  if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n    centerX = center.x ?? defaultCenterX;\n    centerY = center.y ?? defaultCenterY;\n    /*\r\n     *    --->\r\n     *    |\r\n     * >---\r\n     */\n    const verticalSplit = [{\n      x: centerX,\n      y: sourceGapped.y\n    }, {\n      x: centerX,\n      y: targetGapped.y\n    }];\n    /*\r\n     *    |\r\n     *  ---\r\n     *  |\r\n     */\n    const horizontalSplit = [{\n      x: sourceGapped.x,\n      y: centerY\n    }, {\n      x: targetGapped.x,\n      y: centerY\n    }];\n    if (sourceDir[dirAccessor] === currDir) {\n      points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n    } else {\n      points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n    }\n  } else {\n    // sourceTarget means we take x from source and y from target, targetSource is the opposite\n    const sourceTarget = [{\n      x: sourceGapped.x,\n      y: targetGapped.y\n    }];\n    const targetSource = [{\n      x: targetGapped.x,\n      y: sourceGapped.y\n    }];\n    // this handles edges with same handle positions\n    if (dirAccessor === 'x') {\n      points = sourceDir.x === currDir ? targetSource : sourceTarget;\n    } else {\n      points = sourceDir.y === currDir ? sourceTarget : targetSource;\n    }\n    if (sourcePosition === targetPosition) {\n      const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n      // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n      if (diff <= offset) {\n        const gapOffset = Math.min(offset - 1, offset - diff);\n        if (sourceDir[dirAccessor] === currDir) {\n          sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n        } else {\n          targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n        }\n      }\n    }\n    // these are conditions for handling mixed handle positions like Right -> Bottom for example\n    if (sourcePosition !== targetPosition) {\n      const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n      const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n      const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n      const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n      const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);\n      if (flipSourceTarget) {\n        points = dirAccessor === 'x' ? sourceTarget : targetSource;\n      }\n    }\n    const sourceGapPoint = {\n      x: sourceGapped.x + sourceGapOffset.x,\n      y: sourceGapped.y + sourceGapOffset.y\n    };\n    const targetGapPoint = {\n      x: targetGapped.x + targetGapOffset.x,\n      y: targetGapped.y + targetGapOffset.y\n    };\n    const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n    const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n    // we want to place the label on the longest segment of the edge\n    if (maxXDistance >= maxYDistance) {\n      centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n      centerY = points[0].y;\n    } else {\n      centerX = points[0].x;\n      centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n    }\n  }\n  const pathPoints = [source, {\n    x: sourceGapped.x + sourceGapOffset.x,\n    y: sourceGapped.y + sourceGapOffset.y\n  }, ...points, {\n    x: targetGapped.x + targetGapOffset.x,\n    y: targetGapped.y + targetGapOffset.y\n  }, target];\n  return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n  const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n  const {\n    x,\n    y\n  } = b;\n  // no bend\n  if (a.x === x && x === c.x || a.y === y && y === c.y) {\n    return `L${x} ${y}`;\n  }\n  // first segment is horizontal\n  if (a.y === y) {\n    const xDir = a.x < c.x ? -1 : 1;\n    const yDir = a.y < c.y ? 1 : -1;\n    return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n  }\n  const xDir = a.x < c.x ? 1 : -1;\n  const yDir = a.y < c.y ? -1 : 1;\n  return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\n/**\r\n * The `getSmoothStepPath` util returns everything you need to render a stepped path\r\n *between two nodes. The `borderRadius` property can be used to choose how rounded\r\n *the corners of those steps are.\r\n * @public\r\n * @param params.sourceX - The x position of the source handle\r\n * @param params.sourceY - The y position of the source handle\r\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\r\n * @param params.targetX - The x position of the target handle\r\n * @param params.targetY - The y position of the target handle\r\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\r\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\r\n * @example\r\n * ```js\r\n *  const source = { x: 0, y: 20 };\r\n *  const target = { x: 150, y: 100 };\r\n *\r\n *  const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\r\n *    sourceX: source.x,\r\n *    sourceY: source.y,\r\n *    sourcePosition: Position.Right,\r\n *    targetX: target.x,\r\n *    targetY: target.y,\r\n *    targetPosition: Position.Left,\r\n *  });\r\n * ```\r\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\r\n */\nfunction getSmoothStepPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  borderRadius = 5,\n  centerX,\n  centerY,\n  offset = 20\n}) {\n  const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n    source: {\n      x: sourceX,\n      y: sourceY\n    },\n    sourcePosition,\n    target: {\n      x: targetX,\n      y: targetY\n    },\n    targetPosition,\n    center: {\n      x: centerX,\n      y: centerY\n    },\n    offset\n  });\n  const path = points.reduce((res, p, i) => {\n    let segment = '';\n    if (i > 0 && i < points.length - 1) {\n      segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n    } else {\n      segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n    }\n    res += segment;\n    return res;\n  }, '');\n  return [path, labelX, labelY, offsetX, offsetY];\n}\nfunction isNodeInitialized(node) {\n  return node && !!(node.internals.handleBounds || node.handles?.length) && !!(node.measured.width || node.width || node.initialWidth);\n}\nfunction getEdgePosition(params) {\n  const {\n    sourceNode,\n    targetNode\n  } = params;\n  if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\n    return null;\n  }\n  const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\n  const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\n  const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\n  const targetHandle = getHandle$1(\n  // when connection type is loose we can define all handles as sources and connect source -> source\n  params.connectionMode === ConnectionMode.Strict ? targetHandleBounds?.target ?? [] : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\n  if (!sourceHandle || !targetHandle) {\n    params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\n      id: params.id,\n      sourceHandle: params.sourceHandle,\n      targetHandle: params.targetHandle\n    }));\n    return null;\n  }\n  const sourcePosition = sourceHandle?.position || Position.Bottom;\n  const targetPosition = targetHandle?.position || Position.Top;\n  const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\n  const target = getHandlePosition(targetNode, targetHandle, targetPosition);\n  return {\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y,\n    sourcePosition,\n    targetPosition\n  };\n}\nfunction toHandleBounds(handles) {\n  if (!handles) {\n    return null;\n  }\n  const source = [];\n  const target = [];\n  for (const handle of handles) {\n    handle.width = handle.width ?? 1;\n    handle.height = handle.height ?? 1;\n    if (handle.type === 'source') {\n      source.push(handle);\n    } else if (handle.type === 'target') {\n      target.push(handle);\n    }\n  }\n  return {\n    source,\n    target\n  };\n}\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\n  const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\n  const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\n  const {\n    width,\n    height\n  } = handle ?? getNodeDimensions(node);\n  if (center) {\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n  const position = handle?.position ?? fallbackPosition;\n  switch (position) {\n    case Position.Top:\n      return {\n        x: x + width / 2,\n        y\n      };\n    case Position.Right:\n      return {\n        x: x + width,\n        y: y + height / 2\n      };\n    case Position.Bottom:\n      return {\n        x: x + width / 2,\n        y: y + height\n      };\n    case Position.Left:\n      return {\n        x,\n        y: y + height / 2\n      };\n  }\n}\nfunction getHandle$1(bounds, handleId) {\n  if (!bounds) {\n    return null;\n  }\n  // if no handleId is given, we use the first handle, otherwise we check for the id\n  return (!handleId ? bounds[0] : bounds.find(d => d.id === handleId)) || null;\n}\nfunction getMarkerId(marker, id) {\n  if (!marker) {\n    return '';\n  }\n  if (typeof marker === 'string') {\n    return marker;\n  }\n  const idPrefix = id ? `${id}__` : '';\n  return `${idPrefix}${Object.keys(marker).sort().map(key => `${key}=${marker[key]}`).join('&')}`;\n}\nfunction createMarkerIds(edges, {\n  id,\n  defaultColor,\n  defaultMarkerStart,\n  defaultMarkerEnd\n}) {\n  const ids = new Set();\n  return edges.reduce((markers, edge) => {\n    [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach(marker => {\n      if (marker && typeof marker === 'object') {\n        const markerId = getMarkerId(marker, id);\n        if (!ids.has(markerId)) {\n          markers.push({\n            id: markerId,\n            color: marker.color || defaultColor,\n            ...marker\n          });\n          ids.add(markerId);\n        }\n      }\n    });\n    return markers;\n  }, []).sort((a, b) => a.id.localeCompare(b.id));\n}\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\n  let alignmentOffset = 0.5;\n  if (align === 'start') {\n    alignmentOffset = 0;\n  } else if (align === 'end') {\n    alignmentOffset = 1;\n  }\n  /*\r\n   * position === Position.Top\r\n   * we set the x any y position of the toolbar based on the nodes position\r\n   */\n  let pos = [(nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x, nodeRect.y * viewport.zoom + viewport.y - offset];\n  // and than shift it based on the alignment. The shift values are in %.\n  let shift = [-100 * alignmentOffset, -100];\n  switch (position) {\n    case Position.Right:\n      pos = [(nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [0, -100 * alignmentOffset];\n      break;\n    case Position.Bottom:\n      pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\n      shift[1] = 0;\n      break;\n    case Position.Left:\n      pos = [nodeRect.x * viewport.zoom + viewport.x - offset, (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y];\n      shift = [-100, -100 * alignmentOffset];\n      break;\n  }\n  return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\n}\nconst defaultOptions = {\n  nodeOrigin: [0, 0],\n  nodeExtent: infiniteExtent,\n  elevateNodesOnSelect: true,\n  defaults: {}\n};\nconst adoptUserNodesDefaultOptions = {\n  ...defaultOptions,\n  checkEquality: true\n};\nfunction mergeObjects(base, incoming) {\n  const result = {\n    ...base\n  };\n  for (const key in incoming) {\n    if (incoming[key] !== undefined) {\n      // typecast is safe here, because we check for undefined\n      result[key] = incoming[key];\n    }\n  }\n  return result;\n}\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(defaultOptions, options);\n  for (const node of nodeLookup.values()) {\n    if (node.parentId) {\n      updateChildNode(node, nodeLookup, parentLookup, _options);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\n      const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\n      node.internals.positionAbsolute = clampedPosition;\n    }\n  }\n}\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\n  const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\n  const tmpLookup = new Map(nodeLookup);\n  const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\n  nodeLookup.clear();\n  parentLookup.clear();\n  for (const userNode of nodes) {\n    let internalNode = tmpLookup.get(userNode.id);\n    if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\n      nodeLookup.set(userNode.id, internalNode);\n    } else {\n      const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\n      const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\n      const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\n      internalNode = {\n        ..._options.defaults,\n        ...userNode,\n        measured: {\n          width: userNode.measured?.width,\n          height: userNode.measured?.height\n        },\n        internals: {\n          positionAbsolute: clampedPosition,\n          // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\n          handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\n          z: calculateZ(userNode, selectedNodeZ),\n          userNode\n        }\n      };\n      nodeLookup.set(userNode.id, internalNode);\n    }\n    if (userNode.parentId) {\n      updateChildNode(internalNode, nodeLookup, parentLookup, options);\n    }\n  }\n}\nfunction updateParentLookup(node, parentLookup) {\n  if (!node.parentId) {\n    return;\n  }\n  const childNodes = parentLookup.get(node.parentId);\n  if (childNodes) {\n    childNodes.set(node.id, node);\n  } else {\n    parentLookup.set(node.parentId, new Map([[node.id, node]]));\n  }\n}\n/**\r\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\r\n */\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\n  const {\n    elevateNodesOnSelect,\n    nodeOrigin,\n    nodeExtent\n  } = mergeObjects(defaultOptions, options);\n  const parentId = node.parentId;\n  const parentNode = nodeLookup.get(parentId);\n  if (!parentNode) {\n    console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\n    return;\n  }\n  updateParentLookup(node, parentLookup);\n  const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n  const {\n    x,\n    y,\n    z\n  } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\n  const {\n    positionAbsolute\n  } = node.internals;\n  const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\n  if (positionChanged || z !== node.internals.z) {\n    // we create a new object to mark the node as updated\n    nodeLookup.set(node.id, {\n      ...node,\n      internals: {\n        ...node.internals,\n        positionAbsolute: positionChanged ? {\n          x,\n          y\n        } : positionAbsolute,\n        z\n      }\n    });\n  }\n}\nfunction calculateZ(node, selectedNodeZ) {\n  return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n}\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\n  const {\n    x: parentX,\n    y: parentY\n  } = parentNode.internals.positionAbsolute;\n  const childDimensions = getNodeDimensions(childNode);\n  const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\n  const clampedPosition = isCoordinateExtent(childNode.extent) ? clampPosition(positionWithOrigin, childNode.extent, childDimensions) : positionWithOrigin;\n  let absolutePosition = clampPosition({\n    x: parentX + clampedPosition.x,\n    y: parentY + clampedPosition.y\n  }, nodeExtent, childDimensions);\n  if (childNode.extent === 'parent') {\n    absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\n  }\n  const childZ = calculateZ(childNode, selectedNodeZ);\n  const parentZ = parentNode.internals.z ?? 0;\n  return {\n    x: absolutePosition.x,\n    y: absolutePosition.y,\n    z: parentZ > childZ ? parentZ : childZ\n  };\n}\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\n  const changes = [];\n  const parentExpansions = new Map();\n  // determine the expanded rectangle the child nodes would take for each parent\n  for (const child of children) {\n    const parent = nodeLookup.get(child.parentId);\n    if (!parent) {\n      continue;\n    }\n    const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\n    const expandedRect = getBoundsOfRects(parentRect, child.rect);\n    parentExpansions.set(child.parentId, {\n      expandedRect,\n      parent\n    });\n  }\n  if (parentExpansions.size > 0) {\n    parentExpansions.forEach(({\n      expandedRect,\n      parent\n    }, parentId) => {\n      // determine the position & dimensions of the parent\n      const positionAbsolute = parent.internals.positionAbsolute;\n      const dimensions = getNodeDimensions(parent);\n      const origin = parent.origin ?? nodeOrigin;\n      // determine how much the parent expands in width and position\n      const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\n      const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\n      const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\n      const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\n      const widthChange = (newWidth - dimensions.width) * origin[0];\n      const heightChange = (newHeight - dimensions.height) * origin[1];\n      // We need to correct the position of the parent node if the origin is not [0,0]\n      if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\n        changes.push({\n          id: parentId,\n          type: 'position',\n          position: {\n            x: parent.position.x - xChange + widthChange,\n            y: parent.position.y - yChange + heightChange\n          }\n        });\n        /*\r\n         * We move all child nodes in the oppsite direction\r\n         * so the x,y changes of the parent do not move the children\r\n         */\n        parentLookup.get(parentId)?.forEach(childNode => {\n          if (!children.some(child => child.id === childNode.id)) {\n            changes.push({\n              id: childNode.id,\n              type: 'position',\n              position: {\n                x: childNode.position.x + xChange,\n                y: childNode.position.y + yChange\n              }\n            });\n          }\n        });\n      }\n      // We need to correct the dimensions of the parent node if the origin is not [0,0]\n      if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\n        changes.push({\n          id: parentId,\n          type: 'dimensions',\n          setAttributes: true,\n          dimensions: {\n            width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\n            height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0)\n          }\n        });\n      }\n    });\n  }\n  return changes;\n}\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\n  const viewportNode = domNode?.querySelector('.xyflow__viewport');\n  let updatedInternals = false;\n  if (!viewportNode) {\n    return {\n      changes: [],\n      updatedInternals\n    };\n  }\n  const changes = [];\n  const style = window.getComputedStyle(viewportNode);\n  const {\n    m22: zoom\n  } = new window.DOMMatrixReadOnly(style.transform);\n  // in this array we collect nodes, that might trigger changes (like expanding parent)\n  const parentExpandChildren = [];\n  for (const update of updates.values()) {\n    const node = nodeLookup.get(update.id);\n    if (!node) {\n      continue;\n    }\n    if (node.hidden) {\n      nodeLookup.set(node.id, {\n        ...node,\n        internals: {\n          ...node.internals,\n          handleBounds: undefined\n        }\n      });\n      updatedInternals = true;\n      continue;\n    }\n    const dimensions = getDimensions(update.nodeElement);\n    const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\n    const doUpdate = !!(dimensions.width && dimensions.height && (dimensionChanged || !node.internals.handleBounds || update.force));\n    if (doUpdate) {\n      const nodeBounds = update.nodeElement.getBoundingClientRect();\n      const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\n      let {\n        positionAbsolute\n      } = node.internals;\n      if (node.parentId && node.extent === 'parent') {\n        positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\n      } else if (extent) {\n        positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\n      }\n      const newNode = {\n        ...node,\n        measured: dimensions,\n        internals: {\n          ...node.internals,\n          positionAbsolute,\n          handleBounds: {\n            source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\n            target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id)\n          }\n        }\n      };\n      nodeLookup.set(node.id, newNode);\n      if (node.parentId) {\n        updateChildNode(newNode, nodeLookup, parentLookup, {\n          nodeOrigin\n        });\n      }\n      updatedInternals = true;\n      if (dimensionChanged) {\n        changes.push({\n          id: node.id,\n          type: 'dimensions',\n          dimensions\n        });\n        if (node.expandParent && node.parentId) {\n          parentExpandChildren.push({\n            id: node.id,\n            parentId: node.parentId,\n            rect: nodeToRect(newNode, nodeOrigin)\n          });\n        }\n      }\n    }\n  }\n  if (parentExpandChildren.length > 0) {\n    const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\n    changes.push(...parentExpandChanges);\n  }\n  return {\n    changes,\n    updatedInternals\n  };\n}\nasync function panBy({\n  delta,\n  panZoom,\n  transform,\n  translateExtent,\n  width,\n  height\n}) {\n  if (!panZoom || !delta.x && !delta.y) {\n    return Promise.resolve(false);\n  }\n  const nextViewport = await panZoom.setViewportConstrained({\n    x: transform[0] + delta.x,\n    y: transform[1] + delta.y,\n    zoom: transform[2]\n  }, [[0, 0], [width, height]], translateExtent);\n  const transformChanged = !!nextViewport && (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\n  return Promise.resolve(transformChanged);\n}\n/**\r\n * this function adds the connection to the connectionLookup\r\n * at the following keys: nodeId-type-handleId, nodeId-type and nodeId\r\n * @param type type of the connection\r\n * @param connection connection that should be added to the lookup\r\n * @param connectionKey at which key the connection should be added\r\n * @param connectionLookup reference to the connection lookup\r\n * @param nodeId nodeId of the connection\r\n * @param handleId handleId of the conneciton\r\n */\nfunction addConnectionToLookup(type, connection, connectionKey, connectionLookup, nodeId, handleId) {\n  /*\r\n   * We add the connection to the connectionLookup at the following keys\r\n   * 1. nodeId, 2. nodeId-type, 3. nodeId-type-handleId\r\n   * If the key already exists, we add the connection to the existing map\r\n   */\n  let key = nodeId;\n  const nodeMap = connectionLookup.get(key) || new Map();\n  connectionLookup.set(key, nodeMap.set(connectionKey, connection));\n  key = `${nodeId}-${type}`;\n  const typeMap = connectionLookup.get(key) || new Map();\n  connectionLookup.set(key, typeMap.set(connectionKey, connection));\n  if (handleId) {\n    key = `${nodeId}-${type}-${handleId}`;\n    const handleMap = connectionLookup.get(key) || new Map();\n    connectionLookup.set(key, handleMap.set(connectionKey, connection));\n  }\n}\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\n  connectionLookup.clear();\n  edgeLookup.clear();\n  for (const edge of edges) {\n    const {\n      source: sourceNode,\n      target: targetNode,\n      sourceHandle = null,\n      targetHandle = null\n    } = edge;\n    const connection = {\n      edgeId: edge.id,\n      source: sourceNode,\n      target: targetNode,\n      sourceHandle,\n      targetHandle\n    };\n    const sourceKey = `${sourceNode}-${sourceHandle}--${targetNode}-${targetHandle}`;\n    const targetKey = `${targetNode}-${targetHandle}--${sourceNode}-${sourceHandle}`;\n    addConnectionToLookup('source', connection, targetKey, connectionLookup, sourceNode, sourceHandle);\n    addConnectionToLookup('target', connection, sourceKey, connectionLookup, targetNode, targetHandle);\n    edgeLookup.set(edge.id, edge);\n  }\n}\nfunction shallowNodeData(a, b) {\n  if (a === null || b === null) {\n    return false;\n  }\n  const _a = Array.isArray(a) ? a : [a];\n  const _b = Array.isArray(b) ? b : [b];\n  if (_a.length !== _b.length) {\n    return false;\n  }\n  for (let i = 0; i < _a.length; i++) {\n    if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isParentSelected(node, nodeLookup) {\n  if (!node.parentId) {\n    return false;\n  }\n  const parentNode = nodeLookup.get(node.parentId);\n  if (!parentNode) {\n    return false;\n  }\n  if (parentNode.selected) {\n    return true;\n  }\n  return isParentSelected(parentNode, nodeLookup);\n}\nfunction hasSelector(target, selector, domNode) {\n  let current = target;\n  do {\n    if (current?.matches?.(selector)) return true;\n    if (current === domNode) return false;\n    current = current?.parentElement;\n  } while (current);\n  return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\n  const dragItems = new Map();\n  for (const [id, node] of nodeLookup) {\n    if ((node.selected || node.id === nodeId) && (!node.parentId || !isParentSelected(node, nodeLookup)) && (node.draggable || nodesDraggable && typeof node.draggable === 'undefined')) {\n      const internalNode = nodeLookup.get(id);\n      if (internalNode) {\n        dragItems.set(id, {\n          id,\n          position: internalNode.position || {\n            x: 0,\n            y: 0\n          },\n          distance: {\n            x: mousePos.x - internalNode.internals.positionAbsolute.x,\n            y: mousePos.y - internalNode.internals.positionAbsolute.y\n          },\n          extent: internalNode.extent,\n          parentId: internalNode.parentId,\n          origin: internalNode.origin,\n          expandParent: internalNode.expandParent,\n          internals: {\n            positionAbsolute: internalNode.internals.positionAbsolute || {\n              x: 0,\n              y: 0\n            }\n          },\n          measured: {\n            width: internalNode.measured.width ?? 0,\n            height: internalNode.measured.height ?? 0\n          }\n        });\n      }\n    }\n  }\n  return dragItems;\n}\n/*\r\n * returns two params:\r\n * 1. the dragged node (or the first of the list, if we are dragging a node selection)\r\n * 2. array of selected nodes (for multi selections)\r\n */\nfunction getEventHandlerParams({\n  nodeId,\n  dragItems,\n  nodeLookup,\n  dragging = true\n}) {\n  const nodesFromDragItems = [];\n  for (const [id, dragItem] of dragItems) {\n    const node = nodeLookup.get(id)?.internals.userNode;\n    if (node) {\n      nodesFromDragItems.push({\n        ...node,\n        position: dragItem.position,\n        dragging\n      });\n    }\n  }\n  if (!nodeId) {\n    return [nodesFromDragItems[0], nodesFromDragItems];\n  }\n  const node = nodeLookup.get(nodeId)?.internals.userNode;\n  return [!node ? nodesFromDragItems[0] : {\n    ...node,\n    position: dragItems.get(nodeId)?.position || node.position,\n    dragging\n  }, nodesFromDragItems];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction XYDrag({\n  onNodeMouseDown,\n  getStoreItems,\n  onDragStart,\n  onDrag,\n  onDragStop\n}) {\n  let lastPos = {\n    x: null,\n    y: null\n  };\n  let autoPanId = 0;\n  let dragItems = new Map();\n  let autoPanStarted = false;\n  let mousePosition = {\n    x: 0,\n    y: 0\n  };\n  let containerBounds = null;\n  let dragStarted = false;\n  let d3Selection = null;\n  let abortDrag = false; // prevents unintentional dragging on multitouch\n  // public functions\n  function update({\n    noDragClassName,\n    handleSelector,\n    domNode,\n    isSelectable,\n    nodeId,\n    nodeClickDistance = 0\n  }) {\n    d3Selection = select(domNode);\n    function updateNodes({\n      x,\n      y\n    }, dragEvent) {\n      const {\n        nodeLookup,\n        nodeExtent,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin,\n        onNodeDrag,\n        onSelectionDrag,\n        onError,\n        updateNodePositions\n      } = getStoreItems();\n      lastPos = {\n        x,\n        y\n      };\n      let hasChange = false;\n      let nodesBox = {\n        x: 0,\n        y: 0,\n        x2: 0,\n        y2: 0\n      };\n      if (dragItems.size > 1 && nodeExtent) {\n        const rect = getInternalNodesBounds(dragItems);\n        nodesBox = rectToBox(rect);\n      }\n      for (const [id, dragItem] of dragItems) {\n        if (!nodeLookup.has(id)) {\n          /*\r\n           * if the node is not in the nodeLookup anymore, it was probably deleted while dragging\r\n           * and we don't need to update it anymore\r\n           */\n          continue;\n        }\n        let nextPosition = {\n          x: x - dragItem.distance.x,\n          y: y - dragItem.distance.y\n        };\n        if (snapToGrid) {\n          nextPosition = snapPosition(nextPosition, snapGrid);\n        }\n        /*\r\n         * if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\r\n         * based on its position so that the node stays at it's position relative to the selection.\r\n         */\n        let adjustedNodeExtent = [[nodeExtent[0][0], nodeExtent[0][1]], [nodeExtent[1][0], nodeExtent[1][1]]];\n        if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\n          const {\n            positionAbsolute\n          } = dragItem.internals;\n          const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n          const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\n          const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n          const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\n          adjustedNodeExtent = [[x1, y1], [x2, y2]];\n        }\n        const {\n          position,\n          positionAbsolute\n        } = calculateNodePosition({\n          nodeId: id,\n          nextPosition,\n          nodeLookup,\n          nodeExtent: adjustedNodeExtent,\n          nodeOrigin,\n          onError\n        });\n        // we want to make sure that we only fire a change event when there is a change\n        hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\n        dragItem.position = position;\n        dragItem.internals.positionAbsolute = positionAbsolute;\n      }\n      if (!hasChange) {\n        return;\n      }\n      updateNodePositions(dragItems, true);\n      if (dragEvent && (onDrag || onNodeDrag || !nodeId && onSelectionDrag)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\n        onNodeDrag?.(dragEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDrag?.(dragEvent, currentNodes);\n        }\n      }\n    }\n    async function autoPan() {\n      if (!containerBounds) {\n        return;\n      }\n      const {\n        transform,\n        panBy,\n        autoPanSpeed,\n        autoPanOnNodeDrag\n      } = getStoreItems();\n      if (!autoPanOnNodeDrag) {\n        autoPanStarted = false;\n        cancelAnimationFrame(autoPanId);\n        return;\n      }\n      const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\n      if (xMovement !== 0 || yMovement !== 0) {\n        lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\n        lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\n        if (await panBy({\n          x: xMovement,\n          y: yMovement\n        })) {\n          updateNodes(lastPos, null);\n        }\n      }\n      autoPanId = requestAnimationFrame(autoPan);\n    }\n    function startDrag(event) {\n      const {\n        nodeLookup,\n        multiSelectionActive,\n        nodesDraggable,\n        transform,\n        snapGrid,\n        snapToGrid,\n        selectNodesOnDrag,\n        onNodeDragStart,\n        onSelectionDragStart,\n        unselectNodesAndEdges\n      } = getStoreItems();\n      dragStarted = true;\n      if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n        if (!nodeLookup.get(nodeId)?.selected) {\n          // we need to reset selected nodes when selectNodesOnDrag=false\n          unselectNodesAndEdges();\n        }\n      }\n      if (isSelectable && selectNodesOnDrag && nodeId) {\n        onNodeMouseDown?.(nodeId);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      lastPos = pointerPos;\n      dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\n      if (dragItems.size > 0 && (onDragStart || onNodeDragStart || !nodeId && onSelectionDragStart)) {\n        const [currentNode, currentNodes] = getEventHandlerParams({\n          nodeId,\n          dragItems,\n          nodeLookup\n        });\n        onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n        onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\n        if (!nodeId) {\n          onSelectionDragStart?.(event.sourceEvent, currentNodes);\n        }\n      }\n    }\n    const d3DragInstance = drag().clickDistance(nodeClickDistance).on('start', event => {\n      const {\n        domNode,\n        nodeDragThreshold,\n        transform,\n        snapGrid,\n        snapToGrid\n      } = getStoreItems();\n      containerBounds = domNode?.getBoundingClientRect() || null;\n      abortDrag = false;\n      if (nodeDragThreshold === 0) {\n        startDrag(event);\n      }\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      lastPos = pointerPos;\n      mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n    }).on('drag', event => {\n      const {\n        autoPanOnNodeDrag,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeDragThreshold,\n        nodeLookup\n      } = getStoreItems();\n      const pointerPos = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      if (event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1 ||\n      // if user deletes a node while dragging, we need to abort the drag to prevent errors\n      nodeId && !nodeLookup.has(nodeId)) {\n        abortDrag = true;\n      }\n      if (abortDrag) {\n        return;\n      }\n      if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\n        autoPanStarted = true;\n        autoPan();\n      }\n      if (!dragStarted) {\n        const x = pointerPos.xSnapped - (lastPos.x ?? 0);\n        const y = pointerPos.ySnapped - (lastPos.y ?? 0);\n        const distance = Math.sqrt(x * x + y * y);\n        if (distance > nodeDragThreshold) {\n          startDrag(event);\n        }\n      }\n      // skip events without movement\n      if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\n        // dragEvent = event.sourceEvent as MouseEvent;\n        mousePosition = getEventPosition(event.sourceEvent, containerBounds);\n        updateNodes(pointerPos, event.sourceEvent);\n      }\n    }).on('end', event => {\n      if (!dragStarted || abortDrag) {\n        return;\n      }\n      autoPanStarted = false;\n      dragStarted = false;\n      cancelAnimationFrame(autoPanId);\n      if (dragItems.size > 0) {\n        const {\n          nodeLookup,\n          updateNodePositions,\n          onNodeDragStop,\n          onSelectionDragStop\n        } = getStoreItems();\n        updateNodePositions(dragItems, false);\n        if (onDragStop || onNodeDragStop || !nodeId && onSelectionDragStop) {\n          const [currentNode, currentNodes] = getEventHandlerParams({\n            nodeId,\n            dragItems,\n            nodeLookup,\n            dragging: false\n          });\n          onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\n          onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\n          if (!nodeId) {\n            onSelectionDragStop?.(event.sourceEvent, currentNodes);\n          }\n        }\n      }\n    }).filter(event => {\n      const target = event.target;\n      const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) && (!handleSelector || hasSelector(target, handleSelector, domNode));\n      return isDraggable;\n    });\n    d3Selection.call(d3DragInstance);\n  }\n  function destroy() {\n    d3Selection?.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\n  const nodes = [];\n  const rect = {\n    x: position.x - distance,\n    y: position.y - distance,\n    width: distance * 2,\n    height: distance * 2\n  };\n  for (const node of nodeLookup.values()) {\n    if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n/*\r\n * this distance is used for the area around the user pointer\r\n * while doing a connection for finding the closest nodes\r\n */\nconst ADDITIONAL_DISTANCE = 250;\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\n  let closestHandles = [];\n  let minDistance = Infinity;\n  const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\n  for (const node of closeNodes) {\n    const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n    for (const handle of allHandles) {\n      // if the handle is the same as the fromHandle we skip it\n      if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\n        continue;\n      }\n      // determine absolute position of the handle\n      const {\n        x,\n        y\n      } = getHandlePosition(node, handle, handle.position, true);\n      const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\n      if (distance > connectionRadius) {\n        continue;\n      }\n      if (distance < minDistance) {\n        closestHandles = [{\n          ...handle,\n          x,\n          y\n        }];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        // when multiple handles are on the same distance we collect all of them\n        closestHandles.push({\n          ...handle,\n          x,\n          y\n        });\n      }\n    }\n  }\n  if (!closestHandles.length) {\n    return null;\n  }\n  // when multiple handles overlay each other we prefer the opposite handle\n  if (closestHandles.length > 1) {\n    const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\n    return closestHandles.find(handle => handle.type === oppositeHandleType) ?? closestHandles[0];\n  }\n  return closestHandles[0];\n}\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {\n  const node = nodeLookup.get(nodeId);\n  if (!node) {\n    return null;\n  }\n  const handles = connectionMode === 'strict' ? node.internals.handleBounds?.[handleType] : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\n  const handle = (handleId ? handles?.find(h => h.id === handleId) : handles?.[0]) ?? null;\n  return handle && withAbsolutePosition ? {\n    ...handle,\n    ...getHandlePosition(node, handle, handle.position, true)\n  } : handle;\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n  if (edgeUpdaterType) {\n    return edgeUpdaterType;\n  } else if (handleDomNode?.classList.contains('target')) {\n    return 'target';\n  } else if (handleDomNode?.classList.contains('source')) {\n    return 'source';\n  }\n  return null;\n}\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\n  let isValid = null;\n  if (isHandleValid) {\n    isValid = true;\n  } else if (isInsideConnectionRadius && !isHandleValid) {\n    isValid = false;\n  }\n  return isValid;\n}\nconst alwaysValid = () => true;\nfunction onPointerDown(event, {\n  connectionMode,\n  connectionRadius,\n  handleId,\n  nodeId,\n  edgeUpdaterType,\n  isTarget,\n  domNode,\n  nodeLookup,\n  lib,\n  autoPanOnConnect,\n  flowId,\n  panBy,\n  cancelConnection,\n  onConnectStart,\n  onConnect,\n  onConnectEnd,\n  isValidConnection = alwaysValid,\n  onReconnectEnd,\n  updateConnection,\n  getTransform,\n  getFromHandle,\n  autoPanSpeed\n}) {\n  // when xyflow is used inside a shadow root we can't use document\n  const doc = getHostForElement(event.target);\n  let autoPanId = 0;\n  let closestHandle;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const clickedHandle = doc?.elementFromPoint(x, y);\n  const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n  const containerBounds = domNode?.getBoundingClientRect();\n  if (!containerBounds || !handleType) {\n    return;\n  }\n  const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\n  if (!fromHandleInternal) {\n    return;\n  }\n  let position = getEventPosition(event, containerBounds);\n  let autoPanStarted = false;\n  let connection = null;\n  let isValid = false;\n  let handleDomNode = null;\n  // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n  function autoPan() {\n    if (!autoPanOnConnect || !containerBounds) {\n      return;\n    }\n    const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\n    panBy({\n      x,\n      y\n    });\n    autoPanId = requestAnimationFrame(autoPan);\n  }\n  // Stays the same for all consecutive pointermove events\n  const fromHandle = {\n    ...fromHandleInternal,\n    nodeId,\n    type: handleType,\n    position: fromHandleInternal.position\n  };\n  const fromNodeInternal = nodeLookup.get(nodeId);\n  const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\n  const newConnection = {\n    inProgress: true,\n    isValid: null,\n    from,\n    fromHandle,\n    fromPosition: fromHandle.position,\n    fromNode: fromNodeInternal,\n    to: position,\n    toHandle: null,\n    toPosition: oppositePosition[fromHandle.position],\n    toNode: null\n  };\n  updateConnection(newConnection);\n  let previousConnection = newConnection;\n  onConnectStart?.(event, {\n    nodeId,\n    handleId,\n    handleType\n  });\n  function onPointerMove(event) {\n    if (!getFromHandle() || !fromHandle) {\n      onPointerUp(event);\n      return;\n    }\n    const transform = getTransform();\n    position = getEventPosition(event, containerBounds);\n    closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\n    if (!autoPanStarted) {\n      autoPan();\n      autoPanStarted = true;\n    }\n    const result = isValidHandle(event, {\n      handle: closestHandle,\n      connectionMode,\n      fromNodeId: nodeId,\n      fromHandleId: handleId,\n      fromType: isTarget ? 'target' : 'source',\n      isValidConnection,\n      doc,\n      lib,\n      flowId,\n      nodeLookup\n    });\n    handleDomNode = result.handleDomNode;\n    connection = result.connection;\n    isValid = isConnectionValid(!!closestHandle, result.isValid);\n    const newConnection = {\n      // from stays the same\n      ...previousConnection,\n      isValid,\n      to: closestHandle && isValid ? rendererPointToPoint({\n        x: closestHandle.x,\n        y: closestHandle.y\n      }, transform) : position,\n      toHandle: result.toHandle,\n      toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\n      toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null\n    };\n    /*\r\n     * we don't want to trigger an update when the connection\r\n     * is snapped to the same handle as before\r\n     */\n    if (isValid && closestHandle && previousConnection.toHandle && newConnection.toHandle && previousConnection.toHandle.type === newConnection.toHandle.type && previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId && previousConnection.toHandle.id === newConnection.toHandle.id && previousConnection.to.x === newConnection.to.x && previousConnection.to.y === newConnection.to.y) {\n      return;\n    }\n    updateConnection(newConnection);\n    previousConnection = newConnection;\n  }\n  function onPointerUp(event) {\n    if ((closestHandle || handleDomNode) && connection && isValid) {\n      onConnect?.(connection);\n    }\n    /*\r\n     * it's important to get a fresh reference from the store here\r\n     * in order to get the latest state of onConnectEnd\r\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      inProgress,\n      ...connectionState\n    } = previousConnection;\n    const finalConnectionState = {\n      ...connectionState,\n      toPosition: previousConnection.toHandle ? previousConnection.toPosition : null\n    };\n    onConnectEnd?.(event, finalConnectionState);\n    if (edgeUpdaterType) {\n      onReconnectEnd?.(event, finalConnectionState);\n    }\n    cancelConnection();\n    cancelAnimationFrame(autoPanId);\n    autoPanStarted = false;\n    isValid = false;\n    connection = null;\n    handleDomNode = null;\n    doc.removeEventListener('mousemove', onPointerMove);\n    doc.removeEventListener('mouseup', onPointerUp);\n    doc.removeEventListener('touchmove', onPointerMove);\n    doc.removeEventListener('touchend', onPointerUp);\n  }\n  doc.addEventListener('mousemove', onPointerMove);\n  doc.addEventListener('mouseup', onPointerUp);\n  doc.addEventListener('touchmove', onPointerMove);\n  doc.addEventListener('touchend', onPointerUp);\n}\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(event, {\n  handle,\n  connectionMode,\n  fromNodeId,\n  fromHandleId,\n  fromType,\n  doc,\n  lib,\n  flowId,\n  isValidConnection = alwaysValid,\n  nodeLookup\n}) {\n  const isTarget = fromType === 'target';\n  const handleDomNode = handle ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`) : null;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const handleBelow = doc.elementFromPoint(x, y);\n  /*\r\n   * we always want to prioritize the handle below the mouse cursor over the closest distance handle,\r\n   * because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\r\n   */\n  const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\n  const result = {\n    handleDomNode: handleToCheck,\n    isValid: false,\n    connection: null,\n    toHandle: null\n  };\n  if (handleToCheck) {\n    const handleType = getHandleType(undefined, handleToCheck);\n    const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n    const handleId = handleToCheck.getAttribute('data-handleid');\n    const connectable = handleToCheck.classList.contains('connectable');\n    const connectableEnd = handleToCheck.classList.contains('connectableend');\n    if (!handleNodeId || !handleType) {\n      return result;\n    }\n    const connection = {\n      source: isTarget ? handleNodeId : fromNodeId,\n      sourceHandle: isTarget ? handleId : fromHandleId,\n      target: isTarget ? fromNodeId : handleNodeId,\n      targetHandle: isTarget ? fromHandleId : handleId\n    };\n    result.connection = connection;\n    const isConnectable = connectable && connectableEnd;\n    // in strict mode we don't allow target to target or source to source connections\n    const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === 'source' || !isTarget && handleType === 'target' : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n    result.isValid = isValid && isValidConnection(connection);\n    result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\n  }\n  return result;\n}\nconst XYHandle = {\n  onPointerDown,\n  isValid: isValidHandle\n};\nfunction XYMinimap({\n  domNode,\n  panZoom,\n  getTransform,\n  getViewScale\n}) {\n  const selection = select(domNode);\n  function update({\n    translateExtent,\n    width,\n    height,\n    zoomStep = 10,\n    pannable = true,\n    zoomable = true,\n    inversePan = false\n  }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const zoomHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'wheel' || !panZoom) {\n        return;\n      }\n      const pinchDelta = -event.sourceEvent.deltaY * (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) * zoomStep;\n      const nextZoom = transform[2] * Math.pow(2, pinchDelta);\n      panZoom.scaleTo(nextZoom);\n    };\n    let panStart = [0, 0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panStartHandler = event => {\n      if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\n        panStart = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const panHandler = event => {\n      const transform = getTransform();\n      if (event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove' || !panZoom) {\n        return;\n      }\n      const panCurrent = [event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX, event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY];\n      const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\n      panStart = panCurrent;\n      const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\n      const position = {\n        x: transform[0] - panDelta[0] * moveScale,\n        y: transform[1] - panDelta[1] * moveScale\n      };\n      const extent = [[0, 0], [width, height]];\n      panZoom.setViewportConstrained({\n        x: position.x,\n        y: position.y,\n        zoom: transform[2]\n      }, extent, translateExtent);\n    };\n    const zoomAndPanHandler = zoom().on('start', panStartHandler)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom', pannable ? panHandler : null)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    .on('zoom.wheel', zoomable ? zoomHandler : null);\n    selection.call(zoomAndPanHandler, {});\n  }\n  function destroy() {\n    selection.on('zoom', null);\n  }\n  return {\n    update,\n    destroy,\n    pointer\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\nconst transformToViewport = transform => ({\n  x: transform.x,\n  y: transform.y,\n  zoom: transform.k\n});\nconst viewportToTransform = ({\n  x,\n  y,\n  zoom\n}) => zoomIdentity.translate(x, y).scale(zoom);\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst getD3Transition = (selection, duration = 0, onEnd = () => {}) => {\n  const hasDuration = typeof duration === 'number' && duration > 0;\n  if (!hasDuration) {\n    onEnd();\n  }\n  return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\n};\nconst wheelDelta = event => {\n  const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nfunction createPanOnScrollHandler({\n  zoomPanValues,\n  noWheelClassName,\n  d3Selection,\n  d3Zoom,\n  panOnScrollMode,\n  panOnScrollSpeed,\n  zoomOnPinch,\n  onPanZoomStart,\n  onPanZoom,\n  onPanZoomEnd\n}) {\n  return event => {\n    if (isWrappedWithClass(event, noWheelClassName)) {\n      return false;\n    }\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    const currentZoom = d3Selection.property('__zoom').k || 1;\n    // macos sets ctrlKey=true for pinch gesture on a trackpad\n    if (event.ctrlKey && zoomOnPinch) {\n      const point = pointer(event);\n      const pinchDelta = wheelDelta(event);\n      const zoom = currentZoom * Math.pow(2, pinchDelta);\n      // @ts-ignore\n      d3Zoom.scaleTo(d3Selection, zoom, point, event);\n      return;\n    }\n    /*\r\n     * increase scroll speed in firefox\r\n     * firefox: deltaMode === 1; chrome: deltaMode === 0\r\n     */\n    const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n    let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n    let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n    // this enables vertical scrolling with shift + scroll on windows\n    if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n      deltaX = event.deltaY * deltaNormalize;\n      deltaY = 0;\n    }\n    d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed,\n    // @ts-ignore\n    {\n      internal: true\n    });\n    const nextViewport = transformToViewport(d3Selection.property('__zoom'));\n    clearTimeout(zoomPanValues.panScrollTimeout);\n    /*\r\n     * for pan on scroll we need to handle the event calls on our own\r\n     * we can't use the start, zoom and end events from d3-zoom\r\n     * because start and move gets called on every scroll event and not once at the beginning\r\n     */\n    if (!zoomPanValues.isPanScrolling) {\n      zoomPanValues.isPanScrolling = true;\n      onPanZoomStart?.(event, nextViewport);\n    }\n    if (zoomPanValues.isPanScrolling) {\n      onPanZoom?.(event, nextViewport);\n      zoomPanValues.panScrollTimeout = setTimeout(() => {\n        onPanZoomEnd?.(event, nextViewport);\n        zoomPanValues.isPanScrolling = false;\n      }, 150);\n    }\n  };\n}\nfunction createZoomOnScrollHandler({\n  noWheelClassName,\n  preventScrolling,\n  d3ZoomHandler\n}) {\n  return function (event, d) {\n    // we still want to enable pinch zooming even if preventScrolling is set to false\n    const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n    if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\n      return null;\n    }\n    event.preventDefault();\n    d3ZoomHandler.call(this, event, d);\n  };\n}\nfunction createPanZoomStartHandler({\n  zoomPanValues,\n  onDraggingChange,\n  onPanZoomStart\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    const viewport = transformToViewport(event.transform);\n    // we need to remember it here, because it's always 0 in the \"zoom\" event\n    zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\n    zoomPanValues.isZoomingOrPanning = true;\n    zoomPanValues.prevViewport = viewport;\n    if (event.sourceEvent?.type === 'mousedown') {\n      onDraggingChange(true);\n    }\n    if (onPanZoomStart) {\n      onPanZoomStart?.(event.sourceEvent, viewport);\n    }\n  };\n}\nfunction createPanZoomHandler({\n  zoomPanValues,\n  panOnDrag,\n  onPaneContextMenu,\n  onTransformChange,\n  onPanZoom\n}) {\n  return event => {\n    zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\n    if (!event.sourceEvent?.sync) {\n      onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\n    }\n    if (onPanZoom && !event.sourceEvent?.internal) {\n      onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\n    }\n  };\n}\nfunction createPanZoomEndHandler({\n  zoomPanValues,\n  panOnDrag,\n  panOnScroll,\n  onDraggingChange,\n  onPanZoomEnd,\n  onPaneContextMenu\n}) {\n  return event => {\n    if (event.sourceEvent?.internal) {\n      return;\n    }\n    zoomPanValues.isZoomingOrPanning = false;\n    if (onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) && !zoomPanValues.usedRightMouseButton && event.sourceEvent) {\n      onPaneContextMenu(event.sourceEvent);\n    }\n    zoomPanValues.usedRightMouseButton = false;\n    onDraggingChange(false);\n    if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\n      const viewport = transformToViewport(event.transform);\n      zoomPanValues.prevViewport = viewport;\n      clearTimeout(zoomPanValues.timerId);\n      zoomPanValues.timerId = setTimeout(() => {\n        onPanZoomEnd?.(event.sourceEvent, viewport);\n      },\n      // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\n      panOnScroll ? 150 : 0);\n    }\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createFilter({\n  zoomActivationKeyPressed,\n  zoomOnScroll,\n  zoomOnPinch,\n  panOnDrag,\n  panOnScroll,\n  zoomOnDoubleClick,\n  userSelectionActive,\n  noWheelClassName,\n  noPanClassName,\n  lib\n}) {\n  return event => {\n    const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n    const pinchZoom = zoomOnPinch && event.ctrlKey;\n    if (event.button === 1 && event.type === 'mousedown' && (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\n      return true;\n    }\n    // if all interactions are disabled, we prevent all zoom events\n    if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n      return false;\n    }\n    // during a selection we prevent all other interactions\n    if (userSelectionActive) {\n      return false;\n    }\n    // if the target element is inside an element with the nowheel class, we prevent zooming\n    if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n      return false;\n    }\n    // if the target element is inside an element with the nopan class, we prevent panning\n    if (isWrappedWithClass(event, noPanClassName) && (event.type !== 'wheel' || panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed)) {\n      return false;\n    }\n    if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n      return false;\n    }\n    if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\n      event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\n      return false;\n    }\n    // when there is no scroll handling enabled, we prevent all wheel events\n    if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n      return false;\n    }\n    // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n    if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n      return false;\n    }\n    // if the pane is only movable using allowed clicks\n    if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n      return false;\n    }\n    // We only allow right clicks if pan on drag is set to right click\n    const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;\n    // default filter for d3-zoom\n    return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n  };\n}\nfunction XYPanZoom({\n  domNode,\n  minZoom,\n  maxZoom,\n  paneClickDistance,\n  translateExtent,\n  viewport,\n  onPanZoom,\n  onPanZoomStart,\n  onPanZoomEnd,\n  onDraggingChange\n}) {\n  const zoomPanValues = {\n    isZoomingOrPanning: false,\n    usedRightMouseButton: false,\n    prevViewport: {\n      x: 0,\n      y: 0,\n      zoom: 0\n    },\n    mouseButton: 0,\n    timerId: undefined,\n    panScrollTimeout: undefined,\n    isPanScrolling: false\n  };\n  const bbox = domNode.getBoundingClientRect();\n  const d3ZoomInstance = zoom().clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance).scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n  const d3Selection = select(domNode).call(d3ZoomInstance);\n  setViewportConstrained({\n    x: viewport.x,\n    y: viewport.y,\n    zoom: clamp(viewport.zoom, minZoom, maxZoom)\n  }, [[0, 0], [bbox.width, bbox.height]], translateExtent);\n  const d3ZoomHandler = d3Selection.on('wheel.zoom');\n  const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\n  d3ZoomInstance.wheelDelta(wheelDelta);\n  function setTransform(transform, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  // public functions\n  function update({\n    noWheelClassName,\n    noPanClassName,\n    onPaneContextMenu,\n    userSelectionActive,\n    panOnScroll,\n    panOnDrag,\n    panOnScrollMode,\n    panOnScrollSpeed,\n    preventScrolling,\n    zoomOnPinch,\n    zoomOnScroll,\n    zoomOnDoubleClick,\n    zoomActivationKeyPressed,\n    lib,\n    onTransformChange\n  }) {\n    if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\n      destroy();\n    }\n    const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\n    const wheelHandler = isPanOnScroll ? createPanOnScrollHandler({\n      zoomPanValues,\n      noWheelClassName,\n      d3Selection,\n      d3Zoom: d3ZoomInstance,\n      panOnScrollMode,\n      panOnScrollSpeed,\n      zoomOnPinch,\n      onPanZoomStart,\n      onPanZoom,\n      onPanZoomEnd\n    }) : createZoomOnScrollHandler({\n      noWheelClassName,\n      preventScrolling,\n      d3ZoomHandler\n    });\n    d3Selection.on('wheel.zoom', wheelHandler, {\n      passive: false\n    });\n    if (!userSelectionActive) {\n      // pan zoom start\n      const startHandler = createPanZoomStartHandler({\n        zoomPanValues,\n        onDraggingChange,\n        onPanZoomStart\n      });\n      d3ZoomInstance.on('start', startHandler);\n      // pan zoom\n      const panZoomHandler = createPanZoomHandler({\n        zoomPanValues,\n        panOnDrag,\n        onPaneContextMenu: !!onPaneContextMenu,\n        onPanZoom,\n        onTransformChange\n      });\n      d3ZoomInstance.on('zoom', panZoomHandler);\n      // pan zoom end\n      const panZoomEndHandler = createPanZoomEndHandler({\n        zoomPanValues,\n        panOnDrag,\n        panOnScroll,\n        onPaneContextMenu,\n        onPanZoomEnd,\n        onDraggingChange\n      });\n      d3ZoomInstance.on('end', panZoomEndHandler);\n    }\n    const filter = createFilter({\n      zoomActivationKeyPressed,\n      panOnDrag,\n      zoomOnScroll,\n      panOnScroll,\n      zoomOnDoubleClick,\n      zoomOnPinch,\n      userSelectionActive,\n      noPanClassName,\n      noWheelClassName,\n      lib\n    });\n    d3ZoomInstance.filter(filter);\n    /*\r\n     * We cannot add zoomOnDoubleClick to the filter above because\r\n     * double tapping on touch screens circumvents the filter and\r\n     * dblclick.zoom is fired on the selection directly\r\n     */\n    if (zoomOnDoubleClick) {\n      d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\n    } else {\n      d3Selection.on('dblclick.zoom', null);\n    }\n  }\n  function destroy() {\n    d3ZoomInstance.on('zoom', null);\n  }\n  async function setViewportConstrained(viewport, extent, translateExtent) {\n    const nextTransform = viewportToTransform(viewport);\n    const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\n    if (contrainedTransform) {\n      await setTransform(contrainedTransform);\n    }\n    return new Promise(resolve => resolve(contrainedTransform));\n  }\n  async function setViewport(viewport, options) {\n    const nextTransform = viewportToTransform(viewport);\n    await setTransform(nextTransform, options);\n    return new Promise(resolve => resolve(nextTransform));\n  }\n  function syncViewport(viewport) {\n    if (d3Selection) {\n      const nextTransform = viewportToTransform(viewport);\n      const currentTransform = d3Selection.property('__zoom');\n      if (currentTransform.k !== viewport.zoom || currentTransform.x !== viewport.x || currentTransform.y !== viewport.y) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        d3ZoomInstance?.transform(d3Selection, nextTransform, null, {\n          sync: true\n        });\n      }\n    }\n  }\n  function getViewport() {\n    const transform = d3Selection ? zoomTransform(d3Selection.node()) : {\n      x: 0,\n      y: 0,\n      k: 1\n    };\n    return {\n      x: transform.x,\n      y: transform.y,\n      zoom: transform.k\n    };\n  }\n  function scaleTo(zoom, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function scaleBy(factor, options) {\n    if (d3Selection) {\n      return new Promise(resolve => {\n        d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  function setScaleExtent(scaleExtent) {\n    d3ZoomInstance?.scaleExtent(scaleExtent);\n  }\n  function setTranslateExtent(translateExtent) {\n    d3ZoomInstance?.translateExtent(translateExtent);\n  }\n  function setClickDistance(distance) {\n    const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\n    d3ZoomInstance?.clickDistance(validDistance);\n  }\n  return {\n    update,\n    destroy,\n    setViewport,\n    setViewportConstrained,\n    getViewport,\n    scaleTo,\n    scaleBy,\n    setScaleExtent,\n    setTranslateExtent,\n    syncViewport,\n    setClickDistance\n  };\n}\n\n/**\r\n * Used to determine the variant of the resize control\r\n *\r\n * @public\r\n */\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n  ResizeControlVariant[\"Line\"] = \"line\";\n  ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\n\n/**\r\n * Get all connecting edges for a given set of nodes\r\n * @param width - new width of the node\r\n * @param prevWidth - previous width of the node\r\n * @param height - new height of the node\r\n * @param prevHeight - previous height of the node\r\n * @param affectsX - whether to invert the resize direction for the x axis\r\n * @param affectsY - whether to invert the resize direction for the y axis\r\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\r\n */\nfunction getResizeDirection({\n  width,\n  prevWidth,\n  height,\n  prevHeight,\n  affectsX,\n  affectsY\n}) {\n  const deltaWidth = width - prevWidth;\n  const deltaHeight = height - prevHeight;\n  const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n  if (deltaWidth && affectsX) {\n    direction[0] = direction[0] * -1;\n  }\n  if (deltaHeight && affectsY) {\n    direction[1] = direction[1] * -1;\n  }\n  return direction;\n}\n/**\r\n * Parses the control position that is being dragged to dimensions that are being resized\r\n * @param controlPosition - position of the control that is being dragged\r\n * @returns isHorizontal, isVertical, affectsX, affectsY,\r\n */\nfunction getControlDirection(controlPosition) {\n  const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\n  const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\n  const affectsX = controlPosition.includes('left');\n  const affectsY = controlPosition.includes('top');\n  return {\n    isHorizontal,\n    isVertical,\n    affectsX,\n    affectsY\n  };\n}\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\n  return Math.max(0, lowerBound - lowerExtent);\n}\nfunction getUpperExtentClamp(upperExtent, upperBound) {\n  return Math.max(0, upperExtent - upperBound);\n}\nfunction getSizeClamp(size, minSize, maxSize) {\n  return Math.max(0, minSize - size, size - maxSize);\n}\nfunction xor(a, b) {\n  return a ? !b : b;\n}\n/**\r\n * Calculates new width & height and x & y of node after resize based on pointer position\r\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\r\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\r\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\r\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\r\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\r\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\r\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\r\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\r\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\r\n * then calculating the restrictions as usual\r\n * @param startValues - starting values of resize\r\n * @param controlDirection - dimensions affected by the resize\r\n * @param pointerPosition - the current pointer position corrected for snapping\r\n * @param boundaries - minimum and maximum dimensions of the node\r\n * @param keepAspectRatio - prevent changes of asprect ratio\r\n * @returns x, y, width and height of the node after resize\r\n */\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\n  let {\n    affectsX,\n    affectsY\n  } = controlDirection;\n  const {\n    isHorizontal,\n    isVertical\n  } = controlDirection;\n  const isDiagonal = isHorizontal && isVertical;\n  const {\n    xSnapped,\n    ySnapped\n  } = pointerPosition;\n  const {\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight\n  } = boundaries;\n  const {\n    x: startX,\n    y: startY,\n    width: startWidth,\n    height: startHeight,\n    aspectRatio\n  } = startValues;\n  let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\n  let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\n  const newWidth = startWidth + (affectsX ? -distX : distX);\n  const newHeight = startHeight + (affectsY ? -distY : distY);\n  const originOffsetX = -nodeOrigin[0] * startWidth;\n  const originOffsetY = -nodeOrigin[1] * startHeight;\n  // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\n  let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\n  let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\n  // Check if extent is restricting the resize\n  if (extent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\n    } else if (!affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\n    }\n    if (affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\n    } else if (!affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the child extent is restricting the resize\n  if (childExtent) {\n    let xExtentClamp = 0;\n    let yExtentClamp = 0;\n    if (affectsX && distX > 0) {\n      xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\n    } else if (!affectsX && distX < 0) {\n      xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\n    }\n    if (affectsY && distY > 0) {\n      yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\n    } else if (!affectsY && distY < 0) {\n      yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\n    }\n    clampX = Math.max(clampX, xExtentClamp);\n    clampY = Math.max(clampY, yExtentClamp);\n  }\n  // Check if the aspect ratio resizing of the other side is restricting the resize\n  if (keepAspectRatio) {\n    if (isHorizontal) {\n      // Check if the max dimensions might be restricting the resize\n      const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\n      clampX = Math.max(clampX, aspectHeightClamp);\n      // Check if the extent is restricting the resize\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n      // Check if the child extent is restricting the resize\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsX && !affectsY && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\n        }\n        clampX = Math.max(clampX, aspectExtentClamp);\n      }\n    }\n    // Do the same thing for vertical resizing\n    if (isVertical) {\n      const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\n      clampY = Math.max(clampY, aspectWidthClamp);\n      if (extent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n      if (childExtent) {\n        let aspectExtentClamp = 0;\n        if (!affectsX && !affectsY || affectsY && !affectsX && isDiagonal) {\n          aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\n        } else {\n          aspectExtentClamp = getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\n        }\n        clampY = Math.max(clampY, aspectExtentClamp);\n      }\n    }\n  }\n  distY = distY + (distY < 0 ? clampY : -clampY);\n  distX = distX + (distX < 0 ? clampX : -clampX);\n  if (keepAspectRatio) {\n    if (isDiagonal) {\n      if (newWidth > newHeight * aspectRatio) {\n        distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\n      } else {\n        distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\n      }\n    } else {\n      if (isHorizontal) {\n        distY = distX / aspectRatio;\n        affectsY = affectsX;\n      } else {\n        distX = distY * aspectRatio;\n        affectsX = affectsY;\n      }\n    }\n  }\n  const x = affectsX ? startX + distX : startX;\n  const y = affectsY ? startY + distY : startY;\n  return {\n    width: startWidth + (affectsX ? -distX : distX),\n    height: startHeight + (affectsY ? -distY : distY),\n    x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\n    y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y\n  };\n}\nconst initPrevValues = {\n  width: 0,\n  height: 0,\n  x: 0,\n  y: 0\n};\nconst initStartValues = {\n  ...initPrevValues,\n  pointerX: 0,\n  pointerY: 0,\n  aspectRatio: 1\n};\nfunction nodeToParentExtent(node) {\n  return [[0, 0], [node.measured.width, node.measured.height]];\n}\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\n  const x = parent.position.x + child.position.x;\n  const y = parent.position.y + child.position.y;\n  const width = child.measured.width ?? 0;\n  const height = child.measured.height ?? 0;\n  const originOffsetX = nodeOrigin[0] * width;\n  const originOffsetY = nodeOrigin[1] * height;\n  return [[x - originOffsetX, y - originOffsetY], [x + width - originOffsetX, y + height - originOffsetY]];\n}\nfunction XYResizer({\n  domNode,\n  nodeId,\n  getStoreItems,\n  onChange,\n  onEnd\n}) {\n  const selection = select(domNode);\n  function update({\n    controlPosition,\n    boundaries,\n    keepAspectRatio,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    shouldResize\n  }) {\n    let prevValues = {\n      ...initPrevValues\n    };\n    let startValues = {\n      ...initStartValues\n    };\n    const controlDirection = getControlDirection(controlPosition);\n    let node = undefined;\n    let containerBounds = null;\n    let childNodes = [];\n    let parentNode = undefined; // Needed to fix expandParent\n    let parentExtent = undefined;\n    let childExtent = undefined;\n    const dragHandler = drag().on('start', event => {\n      const {\n        nodeLookup,\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin,\n        paneDomNode\n      } = getStoreItems();\n      node = nodeLookup.get(nodeId);\n      if (!node) {\n        return;\n      }\n      containerBounds = paneDomNode?.getBoundingClientRect() ?? null;\n      const {\n        xSnapped,\n        ySnapped\n      } = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      prevValues = {\n        width: node.measured.width ?? 0,\n        height: node.measured.height ?? 0,\n        x: node.position.x ?? 0,\n        y: node.position.y ?? 0\n      };\n      startValues = {\n        ...prevValues,\n        pointerX: xSnapped,\n        pointerY: ySnapped,\n        aspectRatio: prevValues.width / prevValues.height\n      };\n      parentNode = undefined;\n      if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\n        parentNode = nodeLookup.get(node.parentId);\n        parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\n      }\n      /*\r\n       * Collect all child nodes to correct their relative positions when top/left changes\r\n       * Determine largest minimal extent the parent node is allowed to resize to\r\n       */\n      childNodes = [];\n      childExtent = undefined;\n      for (const [childId, child] of nodeLookup) {\n        if (child.parentId === nodeId) {\n          childNodes.push({\n            id: childId,\n            position: {\n              ...child.position\n            },\n            extent: child.extent\n          });\n          if (child.extent === 'parent' || child.expandParent) {\n            const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\n            if (childExtent) {\n              childExtent = [[Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])], [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])]];\n            } else {\n              childExtent = extent;\n            }\n          }\n        }\n      }\n      onResizeStart?.(event, {\n        ...prevValues\n      });\n    }).on('drag', event => {\n      const {\n        transform,\n        snapGrid,\n        snapToGrid,\n        nodeOrigin: storeNodeOrigin\n      } = getStoreItems();\n      const pointerPosition = getPointerPosition(event.sourceEvent, {\n        transform,\n        snapGrid,\n        snapToGrid,\n        containerBounds\n      });\n      const childChanges = [];\n      if (!node) {\n        return;\n      }\n      const {\n        x: prevX,\n        y: prevY,\n        width: prevWidth,\n        height: prevHeight\n      } = prevValues;\n      const change = {};\n      const nodeOrigin = node.origin ?? storeNodeOrigin;\n      const {\n        width,\n        height,\n        x,\n        y\n      } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\n      const isWidthChange = width !== prevWidth;\n      const isHeightChange = height !== prevHeight;\n      const isXPosChange = x !== prevX && isWidthChange;\n      const isYPosChange = y !== prevY && isHeightChange;\n      if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\n        return;\n      }\n      if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\n        change.x = isXPosChange ? x : prevValues.x;\n        change.y = isYPosChange ? y : prevValues.y;\n        prevValues.x = change.x;\n        prevValues.y = change.y;\n        /*\r\n         * when top/left changes, correct the relative positions of child nodes\r\n         * so that they stay in the same position\r\n         */\n        if (childNodes.length > 0) {\n          const xChange = x - prevX;\n          const yChange = y - prevY;\n          for (const childNode of childNodes) {\n            childNode.position = {\n              x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\n              y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight)\n            };\n            childChanges.push(childNode);\n          }\n        }\n      }\n      if (isWidthChange || isHeightChange) {\n        change.width = isWidthChange ? width : prevValues.width;\n        change.height = isHeightChange ? height : prevValues.height;\n        prevValues.width = change.width;\n        prevValues.height = change.height;\n      }\n      // Fix expandParent when resizing from top/left\n      if (parentNode && node.expandParent) {\n        const xLimit = nodeOrigin[0] * (change.width ?? 0);\n        if (change.x && change.x < xLimit) {\n          prevValues.x = xLimit;\n          startValues.x = startValues.x - (change.x - xLimit);\n        }\n        const yLimit = nodeOrigin[1] * (change.height ?? 0);\n        if (change.y && change.y < yLimit) {\n          prevValues.y = yLimit;\n          startValues.y = startValues.y - (change.y - yLimit);\n        }\n      }\n      const direction = getResizeDirection({\n        width: prevValues.width,\n        prevWidth,\n        height: prevValues.height,\n        prevHeight,\n        affectsX: controlDirection.affectsX,\n        affectsY: controlDirection.affectsY\n      });\n      const nextValues = {\n        ...prevValues,\n        direction\n      };\n      const callResize = shouldResize?.(event, nextValues);\n      if (callResize === false) {\n        return;\n      }\n      onResize?.(event, nextValues);\n      onChange(change, childChanges);\n    }).on('end', event => {\n      onResizeEnd?.(event, {\n        ...prevValues\n      });\n      onEnd?.();\n    });\n    selection.call(dragHandler);\n  }\n  function destroy() {\n    selection.on('.drag', null);\n  }\n  return {\n    update,\n    destroy\n  };\n}\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, areSetsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };","map":{"version":3,"names":["drag","select","pointer","zoom","zoomIdentity","zoomTransform","errorMessages","error001","error002","error003","nodeType","error004","error005","error006","error007","id","error009","type","error008","handleType","sourceHandle","targetHandle","error010","error011","edgeType","error012","error013","lib","error014","infiniteExtent","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","elementSelectionKeys","ConnectionMode","PanOnScrollMode","SelectionMode","initialConnection","inProgress","isValid","from","fromHandle","fromPosition","fromNode","to","toHandle","toPosition","toNode","ConnectionLineType","MarkerType","Position","oppositePosition","Left","Right","Top","Bottom","areConnectionMapsEqual","a","b","size","key","keys","has","handleConnectionChange","cb","diff","forEach","connection","push","length","getConnectionStatus","isEdgeBase","element","isNodeBase","isInternalNodeBase","getOutgoers","node","nodes","edges","outgoerIds","Set","edge","source","add","target","filter","n","getIncomers","incomersIds","getNodePositionWithOrigin","nodeOrigin","width","height","getNodeDimensions","origin","offsetX","offsetY","x","position","y","getNodesBounds","params","nodeLookup","undefined","process","env","NODE_ENV","console","warn","box","reduce","currBox","nodeOrId","isId","currentNode","get","nodeBox","nodeToBox","x2","y2","getBoundsOfBoxes","Infinity","boxToRect","getInternalNodesBounds","getNodesInside","rect","tx","ty","tScale","partially","excludeNonSelectableNodes","paneRect","pointToRendererPoint","visibleNodes","values","measured","selectable","hidden","initialWidth","initialHeight","overlappingArea","getOverlappingArea","nodeToRect","area","partiallyVisible","forceInitialRender","internals","handleBounds","isVisible","dragging","getConnectedEdges","nodeIds","getFitViewNodes","options","fitViewNodes","Map","optionNodeIds","map","includeHiddenNodes","set","fitView","panZoom","minZoom","maxZoom","Promise","resolve","bounds","viewport","getViewportForBounds","padding","setViewport","duration","calculateNodePosition","nodeId","nextPosition","nodeExtent","onError","parentNode","parentId","parentX","parentY","positionAbsolute","extent","expandParent","parentWidth","parentHeight","isCoordinateExtent","clampPosition","getElementsToRemove","nodesToRemove","edgesToRemove","onBeforeDelete","matchingNodes","deletable","isIncluded","parentHit","find","edgeIds","deletableEdges","connectedEdges","matchingEdges","e","onBeforeDeleteResult","clamp","val","min","max","Math","dimensions","clampPositionToParent","childPosition","childDimensions","parent","calcAutoPanVelocity","value","abs","calcAutoPan","pos","speed","distance","xMovement","yMovement","box1","box2","rectToBox","getBoundsOfRects","rect1","rect2","rectA","rectB","xOverlap","yOverlap","ceil","isRectObject","obj","isNumeric","isNaN","isFinite","devWarn","message","snapPosition","snapGrid","round","snapToGrid","rendererPointToPoint","xZoom","yZoom","clampedZoom","boundsCenterX","boundsCenterY","isMacOs","navigator","userAgent","indexOf","nodeHasDimensions","evaluateAbsolutePosition","areSetsEqual","item","getPointerPosition","event","transform","containerBounds","getEventPosition","pointerPos","left","top","xSnapped","ySnapped","getDimensions","offsetWidth","offsetHeight","getHostForElement","getRootNode","window","document","inputTags","isInputDOMNode","composedPath","isInput","includes","nodeName","hasAttribute","closest","isMouseEvent","isMouse","evtX","clientX","touches","evtY","clientY","getHandleBounds","nodeElement","nodeBounds","handles","querySelectorAll","Array","handle","getBoundingClientRect","getAttribute","getBezierEdgeCenter","sourceX","sourceY","targetX","targetY","sourceControlX","sourceControlY","targetControlX","targetControlY","centerX","centerY","calculateControlOffset","curvature","sqrt","getControlWithCurvature","x1","y1","c","getBezierPath","sourcePosition","targetPosition","labelX","labelY","getEdgeCenter","xOffset","yOffset","getElevatedEdgeZIndex","sourceNode","targetNode","selected","zIndex","elevateOnSelect","edgeOrConnectedNodeSelected","selectedZIndex","z","isEdgeVisible","edgeBox","viewRect","getEdgeId","connectionExists","some","el","addEdge","edgeParams","concat","reconnectEdge","oldEdge","newConnection","shouldReplaceId","oldEdgeId","rest","foundEdge","getStraightPath","handleDirections","getDirection","pow","getPoints","center","offset","sourceDir","targetDir","sourceGapped","targetGapped","dir","dirAccessor","currDir","points","sourceGapOffset","targetGapOffset","defaultCenterX","defaultCenterY","defaultOffsetX","defaultOffsetY","verticalSplit","horizontalSplit","sourceTarget","targetSource","gapOffset","dirAccessorOpposite","isSameDir","sourceGtTargetOppo","sourceLtTargetOppo","flipSourceTarget","sourceGapPoint","targetGapPoint","maxXDistance","maxYDistance","pathPoints","getBend","bendSize","xDir","yDir","getSmoothStepPath","borderRadius","path","res","p","i","segment","isNodeInitialized","getEdgePosition","sourceHandleBounds","toHandleBounds","targetHandleBounds","getHandle$1","connectionMode","Strict","getHandlePosition","fallbackPosition","handleId","d","getMarkerId","marker","idPrefix","Object","sort","join","createMarkerIds","defaultColor","defaultMarkerStart","defaultMarkerEnd","ids","markers","markerStart","markerEnd","markerId","color","localeCompare","getNodeToolbarTransform","nodeRect","align","alignmentOffset","shift","defaultOptions","elevateNodesOnSelect","defaults","adoptUserNodesDefaultOptions","checkEquality","mergeObjects","base","incoming","result","updateAbsolutePositions","parentLookup","_options","updateChildNode","positionWithOrigin","clampedPosition","adoptUserNodes","tmpLookup","selectedNodeZ","clear","userNode","internalNode","calculateZ","updateParentLookup","childNodes","calculateChildXYZ","positionChanged","childNode","absolutePosition","childZ","parentZ","handleExpandParent","children","changes","parentExpansions","child","parentRect","expandedRect","xChange","yChange","newWidth","newHeight","widthChange","heightChange","setAttributes","updateNodeInternals","updates","domNode","viewportNode","querySelector","updatedInternals","style","getComputedStyle","m22","DOMMatrixReadOnly","parentExpandChildren","update","dimensionChanged","doUpdate","force","newNode","parentExpandChanges","panBy","delta","translateExtent","nextViewport","setViewportConstrained","transformChanged","k","addConnectionToLookup","connectionKey","connectionLookup","nodeMap","typeMap","handleMap","updateConnectionLookup","edgeLookup","edgeId","sourceKey","targetKey","shallowNodeData","_a","isArray","_b","is","data","isParentSelected","hasSelector","selector","current","matches","parentElement","getDragItems","nodesDraggable","mousePos","dragItems","draggable","getEventHandlerParams","nodesFromDragItems","dragItem","XYDrag","onNodeMouseDown","getStoreItems","onDragStart","onDrag","onDragStop","lastPos","autoPanId","autoPanStarted","mousePosition","dragStarted","d3Selection","abortDrag","noDragClassName","handleSelector","isSelectable","nodeClickDistance","updateNodes","dragEvent","onNodeDrag","onSelectionDrag","updateNodePositions","hasChange","nodesBox","adjustedNodeExtent","currentNodes","autoPan","autoPanSpeed","autoPanOnNodeDrag","cancelAnimationFrame","requestAnimationFrame","startDrag","multiSelectionActive","selectNodesOnDrag","onNodeDragStart","onSelectionDragStart","unselectNodesAndEdges","sourceEvent","d3DragInstance","clickDistance","on","nodeDragThreshold","onNodeDragStop","onSelectionDragStop","isDraggable","button","call","destroy","getNodesWithinDistance","ADDITIONAL_DISTANCE","getClosestHandle","connectionRadius","closestHandles","minDistance","closeNodes","allHandles","oppositeHandleType","getHandle","withAbsolutePosition","h","getHandleType","edgeUpdaterType","handleDomNode","classList","contains","isConnectionValid","isInsideConnectionRadius","isHandleValid","alwaysValid","onPointerDown","isTarget","autoPanOnConnect","flowId","cancelConnection","onConnectStart","onConnect","onConnectEnd","isValidConnection","onReconnectEnd","updateConnection","getTransform","getFromHandle","doc","closestHandle","clickedHandle","elementFromPoint","fromHandleInternal","fromNodeInternal","previousConnection","onPointerMove","onPointerUp","isValidHandle","fromNodeId","fromHandleId","fromType","connectionState","finalConnectionState","removeEventListener","addEventListener","handleBelow","handleToCheck","handleNodeId","connectable","connectableEnd","isConnectable","XYHandle","XYMinimap","getViewScale","selection","zoomStep","pannable","zoomable","inversePan","zoomHandler","pinchDelta","deltaY","deltaMode","nextZoom","scaleTo","panStart","panStartHandler","panHandler","panCurrent","panDelta","moveScale","log","zoomAndPanHandler","viewChanged","prevViewport","eventViewport","transformToViewport","viewportToTransform","translate","scale","isWrappedWithClass","className","isRightClickPan","panOnDrag","usedButton","getD3Transition","onEnd","hasDuration","transition","wheelDelta","factor","ctrlKey","createPanOnScrollHandler","zoomPanValues","noWheelClassName","d3Zoom","panOnScrollMode","panOnScrollSpeed","zoomOnPinch","onPanZoomStart","onPanZoom","onPanZoomEnd","preventDefault","stopImmediatePropagation","currentZoom","property","point","deltaNormalize","deltaX","Vertical","Horizontal","shiftKey","translateBy","internal","clearTimeout","panScrollTimeout","isPanScrolling","setTimeout","createZoomOnScrollHandler","preventScrolling","d3ZoomHandler","preventZoom","createPanZoomStartHandler","onDraggingChange","mouseButton","isZoomingOrPanning","createPanZoomHandler","onPaneContextMenu","onTransformChange","usedRightMouseButton","sync","createPanZoomEndHandler","panOnScroll","timerId","createFilter","zoomActivationKeyPressed","zoomOnScroll","zoomOnDoubleClick","userSelectionActive","noPanClassName","zoomScroll","pinchZoom","buttonAllowed","XYPanZoom","paneClickDistance","bbox","d3ZoomInstance","scaleExtent","d3DblClickZoomHandler","setTransform","isPanOnScroll","wheelHandler","passive","startHandler","panZoomHandler","panZoomEndHandler","nextTransform","contrainedTransform","constrain","syncViewport","currentTransform","getViewport","scaleBy","setScaleExtent","setTranslateExtent","setClickDistance","validDistance","ResizeControlVariant","XY_RESIZER_HANDLE_POSITIONS","XY_RESIZER_LINE_POSITIONS","getResizeDirection","prevWidth","prevHeight","affectsX","affectsY","deltaWidth","deltaHeight","direction","getControlDirection","controlPosition","isHorizontal","isVertical","getLowerExtentClamp","lowerExtent","lowerBound","getUpperExtentClamp","upperExtent","upperBound","getSizeClamp","minSize","maxSize","xor","getDimensionsAfterResize","startValues","controlDirection","pointerPosition","boundaries","keepAspectRatio","childExtent","isDiagonal","minWidth","maxWidth","minHeight","maxHeight","startX","startY","startWidth","startHeight","aspectRatio","distX","floor","pointerX","distY","pointerY","originOffsetX","originOffsetY","clampX","clampY","xExtentClamp","yExtentClamp","aspectHeightClamp","aspectExtentClamp","aspectWidthClamp","initPrevValues","initStartValues","nodeToParentExtent","nodeToChildExtent","XYResizer","onChange","onResizeStart","onResize","onResizeEnd","shouldResize","prevValues","parentExtent","dragHandler","paneDomNode","childId","storeNodeOrigin","childChanges","prevX","prevY","change","isWidthChange","isHeightChange","isXPosChange","isYPosChange","xLimit","yLimit","nextValues","callResize"],"sources":["C:/f-collab/node_modules/@xyflow/system/dist/esm/index.js"],"sourcesContent":["import { drag } from 'd3-drag';\r\nimport { select, pointer } from 'd3-selection';\r\nimport { zoom, zoomIdentity, zoomTransform } from 'd3-zoom';\r\n\r\nconst errorMessages = {\r\n    error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\r\n    error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\r\n    error003: (nodeType) => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\r\n    error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\r\n    error005: () => 'Only child nodes can use a parent extent.',\r\n    error006: () => \"Can't create edge. An edge needs a source and a target.\",\r\n    error007: (id) => `The old edge with id=${id} does not exist.`,\r\n    error009: (type) => `Marker type \"${type}\" doesn't exist.`,\r\n    error008: (handleType, { id, sourceHandle, targetHandle }) => `Couldn't create edge for ${handleType} handle id: \"${handleType === 'source' ? sourceHandle : targetHandle}\", edge id: ${id}.`,\r\n    error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\r\n    error011: (edgeType) => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\r\n    error012: (id) => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\r\n    error013: (lib = 'react') => `It seems that you haven't loaded the styles. Please import '@xyflow/${lib}/dist/style.css' or base.css to make sure everything is working properly.`,\r\n    error014: () => 'useNodeConnections: No node ID found. Call useNodeConnections inside a custom Node or provide a node ID.',\r\n};\r\nconst infiniteExtent = [\r\n    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\r\n    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\r\n];\r\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\r\n\r\n/**\r\n * The `ConnectionMode` is used to set the mode of connection between nodes.\r\n * The `Strict` mode is the default one and only allows source to target edges.\r\n * `Loose` mode allows source to source and target to target edges as well.\r\n *\r\n * @public\r\n */\r\nvar ConnectionMode;\r\n(function (ConnectionMode) {\r\n    ConnectionMode[\"Strict\"] = \"strict\";\r\n    ConnectionMode[\"Loose\"] = \"loose\";\r\n})(ConnectionMode || (ConnectionMode = {}));\r\n/**\r\n * This enum is used to set the different modes of panning the viewport when the\r\n * user scrolls. The `Free` mode allows the user to pan in any direction by scrolling\r\n * with a device like a trackpad. The `Vertical` and `Horizontal` modes restrict\r\n * scroll panning to only the vertical or horizontal axis, respectively.\r\n *\r\n * @public\r\n */\r\nvar PanOnScrollMode;\r\n(function (PanOnScrollMode) {\r\n    PanOnScrollMode[\"Free\"] = \"free\";\r\n    PanOnScrollMode[\"Vertical\"] = \"vertical\";\r\n    PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\r\n})(PanOnScrollMode || (PanOnScrollMode = {}));\r\nvar SelectionMode;\r\n(function (SelectionMode) {\r\n    SelectionMode[\"Partial\"] = \"partial\";\r\n    SelectionMode[\"Full\"] = \"full\";\r\n})(SelectionMode || (SelectionMode = {}));\r\nconst initialConnection = {\r\n    inProgress: false,\r\n    isValid: null,\r\n    from: null,\r\n    fromHandle: null,\r\n    fromPosition: null,\r\n    fromNode: null,\r\n    to: null,\r\n    toHandle: null,\r\n    toPosition: null,\r\n    toNode: null,\r\n};\r\n\r\n/**\r\n * If you set the `connectionLineType` prop on your [`<ReactFlow />`](/api-reference/react-flow#connection-connectionLineType)\r\n *component, it will dictate the style of connection line rendered when creating\r\n *new edges.\r\n *\r\n * @public\r\n *\r\n * @remarks If you choose to render a custom connection line component, this value will be\r\n *passed to your component as part of its [`ConnectionLineComponentProps`](/api-reference/types/connection-line-component-props).\r\n */\r\nvar ConnectionLineType;\r\n(function (ConnectionLineType) {\r\n    ConnectionLineType[\"Bezier\"] = \"default\";\r\n    ConnectionLineType[\"Straight\"] = \"straight\";\r\n    ConnectionLineType[\"Step\"] = \"step\";\r\n    ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\r\n    ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\r\n})(ConnectionLineType || (ConnectionLineType = {}));\r\n/**\r\n * Edges may optionally have a marker on either end. The MarkerType type enumerates\r\n * the options available to you when configuring a given marker.\r\n *\r\n * @public\r\n */\r\nvar MarkerType;\r\n(function (MarkerType) {\r\n    MarkerType[\"Arrow\"] = \"arrow\";\r\n    MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\r\n})(MarkerType || (MarkerType = {}));\r\n\r\n/**\r\n * While [`PanelPosition`](/api-reference/types/panel-position) can be used to place a\r\n * component in the corners of a container, the `Position` enum is less precise and used\r\n * primarily in relation to edges and handles.\r\n *\r\n * @public\r\n */\r\nvar Position;\r\n(function (Position) {\r\n    Position[\"Left\"] = \"left\";\r\n    Position[\"Top\"] = \"top\";\r\n    Position[\"Right\"] = \"right\";\r\n    Position[\"Bottom\"] = \"bottom\";\r\n})(Position || (Position = {}));\r\nconst oppositePosition = {\r\n    [Position.Left]: Position.Right,\r\n    [Position.Right]: Position.Left,\r\n    [Position.Top]: Position.Bottom,\r\n    [Position.Bottom]: Position.Top,\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction areConnectionMapsEqual(a, b) {\r\n    if (!a && !b) {\r\n        return true;\r\n    }\r\n    if (!a || !b || a.size !== b.size) {\r\n        return false;\r\n    }\r\n    if (!a.size && !b.size) {\r\n        return true;\r\n    }\r\n    for (const key of a.keys()) {\r\n        if (!b.has(key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * We call the callback for all connections in a that are not in b\r\n *\r\n * @internal\r\n */\r\nfunction handleConnectionChange(a, b, cb) {\r\n    if (!cb) {\r\n        return;\r\n    }\r\n    const diff = [];\r\n    a.forEach((connection, key) => {\r\n        if (!b?.has(key)) {\r\n            diff.push(connection);\r\n        }\r\n    });\r\n    if (diff.length) {\r\n        cb(diff);\r\n    }\r\n}\r\nfunction getConnectionStatus(isValid) {\r\n    return isValid === null ? null : isValid ? 'valid' : 'invalid';\r\n}\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * Test whether an object is useable as an Edge\r\n * @public\r\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Edge if it returns true\r\n * @param element - The element to test\r\n * @returns A boolean indicating whether the element is an Edge\r\n */\r\nconst isEdgeBase = (element) => 'id' in element && 'source' in element && 'target' in element;\r\n/**\r\n * Test whether an object is useable as a Node\r\n * @public\r\n * @remarks In TypeScript this is a type guard that will narrow the type of whatever you pass in to Node if it returns true\r\n * @param element - The element to test\r\n * @returns A boolean indicating whether the element is an Node\r\n */\r\nconst isNodeBase = (element) => 'id' in element && 'position' in element && !('source' in element) && !('target' in element);\r\nconst isInternalNodeBase = (element) => 'id' in element && 'internals' in element && !('source' in element) && !('target' in element);\r\n/**\r\n * This util is used to tell you what nodes, if any, are connected to the given node\r\n * as the _target_ of an edge.\r\n * @public\r\n * @param node - The node to get the connected nodes from\r\n * @param nodes - The array of all nodes\r\n * @param edges - The array of all edges\r\n * @returns An array of nodes that are connected over eges where the source is the given node\r\n *\r\n * @example\r\n * ```ts\r\n *import { getOutgoers } from '@xyflow/react';\r\n *\r\n *const nodes = [];\r\n *const edges = [];\r\n *\r\n *const outgoers = getOutgoers(\r\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\r\n *  nodes,\r\n *  edges,\r\n *);\r\n *```\r\n */\r\nconst getOutgoers = (node, nodes, edges) => {\r\n    if (!node.id) {\r\n        return [];\r\n    }\r\n    const outgoerIds = new Set();\r\n    edges.forEach((edge) => {\r\n        if (edge.source === node.id) {\r\n            outgoerIds.add(edge.target);\r\n        }\r\n    });\r\n    return nodes.filter((n) => outgoerIds.has(n.id));\r\n};\r\n/**\r\n * This util is used to tell you what nodes, if any, are connected to the given node\r\n * as the _source_ of an edge.\r\n * @public\r\n * @param node - The node to get the connected nodes from\r\n * @param nodes - The array of all nodes\r\n * @param edges - The array of all edges\r\n * @returns An array of nodes that are connected over eges where the target is the given node\r\n *\r\n * @example\r\n * ```ts\r\n *import { getIncomers } from '@xyflow/react';\r\n *\r\n *const nodes = [];\r\n *const edges = [];\r\n *\r\n *const incomers = getIncomers(\r\n *  { id: '1', position: { x: 0, y: 0 }, data: { label: 'node' } },\r\n *  nodes,\r\n *  edges,\r\n *);\r\n *```\r\n */\r\nconst getIncomers = (node, nodes, edges) => {\r\n    if (!node.id) {\r\n        return [];\r\n    }\r\n    const incomersIds = new Set();\r\n    edges.forEach((edge) => {\r\n        if (edge.target === node.id) {\r\n            incomersIds.add(edge.source);\r\n        }\r\n    });\r\n    return nodes.filter((n) => incomersIds.has(n.id));\r\n};\r\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\r\n    const { width, height } = getNodeDimensions(node);\r\n    const origin = node.origin ?? nodeOrigin;\r\n    const offsetX = width * origin[0];\r\n    const offsetY = height * origin[1];\r\n    return {\r\n        x: node.position.x - offsetX,\r\n        y: node.position.y - offsetY,\r\n    };\r\n};\r\n/**\r\n * Returns the bounding box that contains all the given nodes in an array. This can\r\n * be useful when combined with [`getViewportForBounds`](/api-reference/utils/get-viewport-for-bounds)\r\n * to calculate the correct transform to fit the given nodes in a viewport.\r\n * @public\r\n * @remarks Useful when combined with {@link getViewportForBounds} to calculate the correct transform to fit the given nodes in a viewport.\r\n * @param nodes - Nodes to calculate the bounds for\r\n * @param params.nodeOrigin - Origin of the nodes: [0, 0] - top left, [0.5, 0.5] - center\r\n * @returns Bounding box enclosing all nodes\r\n *\r\n * @remarks This function was previously called `getRectOfNodes`\r\n *\r\n * @example\r\n * ```js\r\n *import { getNodesBounds } from '@xyflow/react';\r\n *\r\n *const nodes = [\r\n *  {\r\n *    id: 'a',\r\n *    position: { x: 0, y: 0 },\r\n *    data: { label: 'a' },\r\n *    width: 50,\r\n *    height: 25,\r\n *  },\r\n *  {\r\n *    id: 'b',\r\n *    position: { x: 100, y: 100 },\r\n *    data: { label: 'b' },\r\n *    width: 50,\r\n *    height: 25,\r\n *  },\r\n *];\r\n *\r\n *const bounds = getNodesBounds(nodes);\r\n *```\r\n */\r\nconst getNodesBounds = (nodes, params = { nodeOrigin: [0, 0], nodeLookup: undefined }) => {\r\n    if (process.env.NODE_ENV === 'development' && !params.nodeLookup) {\r\n        console.warn('Please use `getNodesBounds` from `useReactFlow`/`useSvelteFlow` hook to ensure correct values for sub flows. If not possible, you have to provide a nodeLookup to support sub flows.');\r\n    }\r\n    if (nodes.length === 0) {\r\n        return { x: 0, y: 0, width: 0, height: 0 };\r\n    }\r\n    const box = nodes.reduce((currBox, nodeOrId) => {\r\n        const isId = typeof nodeOrId === 'string';\r\n        let currentNode = !params.nodeLookup && !isId ? nodeOrId : undefined;\r\n        if (params.nodeLookup) {\r\n            currentNode = isId\r\n                ? params.nodeLookup.get(nodeOrId)\r\n                : !isInternalNodeBase(nodeOrId)\r\n                    ? params.nodeLookup.get(nodeOrId.id)\r\n                    : nodeOrId;\r\n        }\r\n        const nodeBox = currentNode ? nodeToBox(currentNode, params.nodeOrigin) : { x: 0, y: 0, x2: 0, y2: 0 };\r\n        return getBoundsOfBoxes(currBox, nodeBox);\r\n    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });\r\n    return boxToRect(box);\r\n};\r\n/**\r\n * Determines a bounding box that contains all given nodes in an array\r\n * @internal\r\n */\r\nconst getInternalNodesBounds = (nodeLookup, params = {}) => {\r\n    if (nodeLookup.size === 0) {\r\n        return { x: 0, y: 0, width: 0, height: 0 };\r\n    }\r\n    let box = { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity };\r\n    nodeLookup.forEach((node) => {\r\n        if (params.filter === undefined || params.filter(node)) {\r\n            const nodeBox = nodeToBox(node);\r\n            box = getBoundsOfBoxes(box, nodeBox);\r\n        }\r\n    });\r\n    return boxToRect(box);\r\n};\r\nconst getNodesInside = (nodes, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, \r\n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\r\nexcludeNonSelectableNodes = false) => {\r\n    const paneRect = {\r\n        ...pointToRendererPoint(rect, [tx, ty, tScale]),\r\n        width: rect.width / tScale,\r\n        height: rect.height / tScale,\r\n    };\r\n    const visibleNodes = [];\r\n    for (const node of nodes.values()) {\r\n        const { measured, selectable = true, hidden = false } = node;\r\n        if ((excludeNonSelectableNodes && !selectable) || hidden) {\r\n            continue;\r\n        }\r\n        const width = measured.width ?? node.width ?? node.initialWidth ?? null;\r\n        const height = measured.height ?? node.height ?? node.initialHeight ?? null;\r\n        const overlappingArea = getOverlappingArea(paneRect, nodeToRect(node));\r\n        const area = (width ?? 0) * (height ?? 0);\r\n        const partiallyVisible = partially && overlappingArea > 0;\r\n        const forceInitialRender = !node.internals.handleBounds;\r\n        const isVisible = forceInitialRender || partiallyVisible || overlappingArea >= area;\r\n        if (isVisible || node.dragging) {\r\n            visibleNodes.push(node);\r\n        }\r\n    }\r\n    return visibleNodes;\r\n};\r\n/**\r\n * This utility filters an array of edges, keeping only those where either the source or target\r\n * node is present in the given array of nodes.\r\n * @public\r\n * @param nodes - Nodes you want to get the connected edges for\r\n * @param edges - All edges\r\n * @returns Array of edges that connect any of the given nodes with each other\r\n *\r\n * @example\r\n * ```js\r\n *import { getConnectedEdges } from '@xyflow/react';\r\n *\r\n *const nodes = [\r\n *  { id: 'a', position: { x: 0, y: 0 } },\r\n *  { id: 'b', position: { x: 100, y: 0 } },\r\n *];\r\n *\r\n *const edges = [\r\n *  { id: 'a->c', source: 'a', target: 'c' },\r\n *  { id: 'c->d', source: 'c', target: 'd' },\r\n *];\r\n *\r\n *const connectedEdges = getConnectedEdges(nodes, edges);\r\n * // => [{ id: 'a->c', source: 'a', target: 'c' }]\r\n *```\r\n */\r\nconst getConnectedEdges = (nodes, edges) => {\r\n    const nodeIds = new Set();\r\n    nodes.forEach((node) => {\r\n        nodeIds.add(node.id);\r\n    });\r\n    return edges.filter((edge) => nodeIds.has(edge.source) || nodeIds.has(edge.target));\r\n};\r\nfunction getFitViewNodes(nodeLookup, options) {\r\n    const fitViewNodes = new Map();\r\n    const optionNodeIds = options?.nodes ? new Set(options.nodes.map((node) => node.id)) : null;\r\n    nodeLookup.forEach((n) => {\r\n        const isVisible = n.measured.width && n.measured.height && (options?.includeHiddenNodes || !n.hidden);\r\n        if (isVisible && (!optionNodeIds || optionNodeIds.has(n.id))) {\r\n            fitViewNodes.set(n.id, n);\r\n        }\r\n    });\r\n    return fitViewNodes;\r\n}\r\nasync function fitView({ nodes, width, height, panZoom, minZoom, maxZoom }, options) {\r\n    if (nodes.size === 0) {\r\n        return Promise.resolve(false);\r\n    }\r\n    const bounds = getInternalNodesBounds(nodes);\r\n    const viewport = getViewportForBounds(bounds, width, height, options?.minZoom ?? minZoom, options?.maxZoom ?? maxZoom, options?.padding ?? 0.1);\r\n    await panZoom.setViewport(viewport, { duration: options?.duration });\r\n    return Promise.resolve(true);\r\n}\r\n/**\r\n * This function calculates the next position of a node, taking into account the node's extent, parent node, and origin.\r\n *\r\n * @internal\r\n * @returns position, positionAbsolute\r\n */\r\nfunction calculateNodePosition({ nodeId, nextPosition, nodeLookup, nodeOrigin = [0, 0], nodeExtent, onError, }) {\r\n    const node = nodeLookup.get(nodeId);\r\n    const parentNode = node.parentId ? nodeLookup.get(node.parentId) : undefined;\r\n    const { x: parentX, y: parentY } = parentNode ? parentNode.internals.positionAbsolute : { x: 0, y: 0 };\r\n    const origin = node.origin ?? nodeOrigin;\r\n    let extent = nodeExtent;\r\n    if (node.extent === 'parent' && !node.expandParent) {\r\n        if (!parentNode) {\r\n            onError?.('005', errorMessages['error005']());\r\n        }\r\n        else {\r\n            const parentWidth = parentNode.measured.width;\r\n            const parentHeight = parentNode.measured.height;\r\n            if (parentWidth && parentHeight) {\r\n                extent = [\r\n                    [parentX, parentY],\r\n                    [parentX + parentWidth, parentY + parentHeight],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    else if (parentNode && isCoordinateExtent(node.extent)) {\r\n        extent = [\r\n            [node.extent[0][0] + parentX, node.extent[0][1] + parentY],\r\n            [node.extent[1][0] + parentX, node.extent[1][1] + parentY],\r\n        ];\r\n    }\r\n    const positionAbsolute = isCoordinateExtent(extent)\r\n        ? clampPosition(nextPosition, extent, node.measured)\r\n        : nextPosition;\r\n    return {\r\n        position: {\r\n            x: positionAbsolute.x - parentX + node.measured.width * origin[0],\r\n            y: positionAbsolute.y - parentY + node.measured.height * origin[1],\r\n        },\r\n        positionAbsolute,\r\n    };\r\n}\r\n/**\r\n * Pass in nodes & edges to delete, get arrays of nodes and edges that actually can be deleted\r\n * @internal\r\n * @param param.nodesToRemove - The nodes to remove\r\n * @param param.edgesToRemove - The edges to remove\r\n * @param param.nodes - All nodes\r\n * @param param.edges - All edges\r\n * @param param.onBeforeDelete - Callback to check which nodes and edges can be deleted\r\n * @returns nodes: nodes that can be deleted, edges: edges that can be deleted\r\n */\r\nasync function getElementsToRemove({ nodesToRemove = [], edgesToRemove = [], nodes, edges, onBeforeDelete, }) {\r\n    const nodeIds = new Set(nodesToRemove.map((node) => node.id));\r\n    const matchingNodes = [];\r\n    for (const node of nodes) {\r\n        if (node.deletable === false) {\r\n            continue;\r\n        }\r\n        const isIncluded = nodeIds.has(node.id);\r\n        const parentHit = !isIncluded && node.parentId && matchingNodes.find((n) => n.id === node.parentId);\r\n        if (isIncluded || parentHit) {\r\n            matchingNodes.push(node);\r\n        }\r\n    }\r\n    const edgeIds = new Set(edgesToRemove.map((edge) => edge.id));\r\n    const deletableEdges = edges.filter((edge) => edge.deletable !== false);\r\n    const connectedEdges = getConnectedEdges(matchingNodes, deletableEdges);\r\n    const matchingEdges = connectedEdges;\r\n    for (const edge of deletableEdges) {\r\n        const isIncluded = edgeIds.has(edge.id);\r\n        if (isIncluded && !matchingEdges.find((e) => e.id === edge.id)) {\r\n            matchingEdges.push(edge);\r\n        }\r\n    }\r\n    if (!onBeforeDelete) {\r\n        return {\r\n            edges: matchingEdges,\r\n            nodes: matchingNodes,\r\n        };\r\n    }\r\n    const onBeforeDeleteResult = await onBeforeDelete({\r\n        nodes: matchingNodes,\r\n        edges: matchingEdges,\r\n    });\r\n    if (typeof onBeforeDeleteResult === 'boolean') {\r\n        return onBeforeDeleteResult ? { edges: matchingEdges, nodes: matchingNodes } : { edges: [], nodes: [] };\r\n    }\r\n    return onBeforeDeleteResult;\r\n}\r\n\r\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\r\nconst clampPosition = (position = { x: 0, y: 0 }, extent, dimensions) => ({\r\n    x: clamp(position.x, extent[0][0], extent[1][0] - (dimensions?.width ?? 0)),\r\n    y: clamp(position.y, extent[0][1], extent[1][1] - (dimensions?.height ?? 0)),\r\n});\r\nfunction clampPositionToParent(childPosition, childDimensions, parent) {\r\n    const { width: parentWidth, height: parentHeight } = getNodeDimensions(parent);\r\n    const { x: parentX, y: parentY } = parent.internals.positionAbsolute;\r\n    return clampPosition(childPosition, [\r\n        [parentX, parentY],\r\n        [parentX + parentWidth, parentY + parentHeight],\r\n    ], childDimensions);\r\n}\r\n/**\r\n * Calculates the velocity of panning when the mouse is close to the edge of the canvas\r\n * @internal\r\n * @param value - One dimensional poition of the mouse (x or y)\r\n * @param min - Minimal position on canvas before panning starts\r\n * @param max - Maximal position on canvas before panning starts\r\n * @returns - A number between 0 and 1 that represents the velocity of panning\r\n */\r\nconst calcAutoPanVelocity = (value, min, max) => {\r\n    if (value < min) {\r\n        return clamp(Math.abs(value - min), 1, min) / min;\r\n    }\r\n    else if (value > max) {\r\n        return -clamp(Math.abs(value - max), 1, min) / min;\r\n    }\r\n    return 0;\r\n};\r\nconst calcAutoPan = (pos, bounds, speed = 15, distance = 40) => {\r\n    const xMovement = calcAutoPanVelocity(pos.x, distance, bounds.width - distance) * speed;\r\n    const yMovement = calcAutoPanVelocity(pos.y, distance, bounds.height - distance) * speed;\r\n    return [xMovement, yMovement];\r\n};\r\nconst getBoundsOfBoxes = (box1, box2) => ({\r\n    x: Math.min(box1.x, box2.x),\r\n    y: Math.min(box1.y, box2.y),\r\n    x2: Math.max(box1.x2, box2.x2),\r\n    y2: Math.max(box1.y2, box2.y2),\r\n});\r\nconst rectToBox = ({ x, y, width, height }) => ({\r\n    x,\r\n    y,\r\n    x2: x + width,\r\n    y2: y + height,\r\n});\r\nconst boxToRect = ({ x, y, x2, y2 }) => ({\r\n    x,\r\n    y,\r\n    width: x2 - x,\r\n    height: y2 - y,\r\n});\r\nconst nodeToRect = (node, nodeOrigin = [0, 0]) => {\r\n    const { x, y } = isInternalNodeBase(node)\r\n        ? node.internals.positionAbsolute\r\n        : getNodePositionWithOrigin(node, nodeOrigin);\r\n    return {\r\n        x,\r\n        y,\r\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\r\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\r\n    };\r\n};\r\nconst nodeToBox = (node, nodeOrigin = [0, 0]) => {\r\n    const { x, y } = isInternalNodeBase(node)\r\n        ? node.internals.positionAbsolute\r\n        : getNodePositionWithOrigin(node, nodeOrigin);\r\n    return {\r\n        x,\r\n        y,\r\n        x2: x + (node.measured?.width ?? node.width ?? node.initialWidth ?? 0),\r\n        y2: y + (node.measured?.height ?? node.height ?? node.initialHeight ?? 0),\r\n    };\r\n};\r\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\r\nconst getOverlappingArea = (rectA, rectB) => {\r\n    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\r\n    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\r\n    return Math.ceil(xOverlap * yOverlap);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\r\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\nconst isNumeric = (n) => !isNaN(n) && isFinite(n);\r\n// used for a11y key board controls for nodes and edges\r\nconst devWarn = (id, message) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\r\n    }\r\n};\r\nconst snapPosition = (position, snapGrid = [1, 1]) => {\r\n    return {\r\n        x: snapGrid[0] * Math.round(position.x / snapGrid[0]),\r\n        y: snapGrid[1] * Math.round(position.y / snapGrid[1]),\r\n    };\r\n};\r\nconst pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid = false, snapGrid = [1, 1]) => {\r\n    const position = {\r\n        x: (x - tx) / tScale,\r\n        y: (y - ty) / tScale,\r\n    };\r\n    return snapToGrid ? snapPosition(position, snapGrid) : position;\r\n};\r\nconst rendererPointToPoint = ({ x, y }, [tx, ty, tScale]) => {\r\n    return {\r\n        x: x * tScale + tx,\r\n        y: y * tScale + ty,\r\n    };\r\n};\r\n/**\r\n * Returns a viewport that encloses the given bounds with optional padding.\r\n * @public\r\n * @remarks You can determine bounds of nodes with {@link getNodesBounds} and {@link getBoundsOfRects}\r\n * @param bounds - Bounds to fit inside viewport\r\n * @param width - Width of the viewport\r\n * @param height  - Height of the viewport\r\n * @param minZoom - Minimum zoom level of the resulting viewport\r\n * @param maxZoom - Maximum zoom level of the resulting viewport\r\n * @param padding - Optional padding around the bounds\r\n * @returns A transforned {@link Viewport} that encloses the given bounds which you can pass to e.g. {@link setViewport}\r\n * @example\r\n * const { x, y, zoom } = getViewportForBounds(\r\n *{ x: 0, y: 0, width: 100, height: 100},\r\n *1200, 800, 0.5, 2);\r\n */\r\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding) => {\r\n    const xZoom = width / (bounds.width * (1 + padding));\r\n    const yZoom = height / (bounds.height * (1 + padding));\r\n    const zoom = Math.min(xZoom, yZoom);\r\n    const clampedZoom = clamp(zoom, minZoom, maxZoom);\r\n    const boundsCenterX = bounds.x + bounds.width / 2;\r\n    const boundsCenterY = bounds.y + bounds.height / 2;\r\n    const x = width / 2 - boundsCenterX * clampedZoom;\r\n    const y = height / 2 - boundsCenterY * clampedZoom;\r\n    return { x, y, zoom: clampedZoom };\r\n};\r\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\r\nfunction isCoordinateExtent(extent) {\r\n    return extent !== undefined && extent !== 'parent';\r\n}\r\nfunction getNodeDimensions(node) {\r\n    return {\r\n        width: node.measured?.width ?? node.width ?? node.initialWidth ?? 0,\r\n        height: node.measured?.height ?? node.height ?? node.initialHeight ?? 0,\r\n    };\r\n}\r\nfunction nodeHasDimensions(node) {\r\n    return ((node.measured?.width ?? node.width ?? node.initialWidth) !== undefined &&\r\n        (node.measured?.height ?? node.height ?? node.initialHeight) !== undefined);\r\n}\r\n/**\r\n * Convert child position to aboslute position\r\n *\r\n * @internal\r\n * @param position\r\n * @param parentId\r\n * @param nodeLookup\r\n * @param nodeOrigin\r\n * @returns an internal node with an absolute position\r\n */\r\nfunction evaluateAbsolutePosition(position, dimensions = { width: 0, height: 0 }, parentId, nodeLookup, nodeOrigin) {\r\n    const positionAbsolute = { ...position };\r\n    const parent = nodeLookup.get(parentId);\r\n    if (parent) {\r\n        const origin = parent.origin || nodeOrigin;\r\n        positionAbsolute.x += parent.internals.positionAbsolute.x - (dimensions.width ?? 0) * origin[0];\r\n        positionAbsolute.y += parent.internals.positionAbsolute.y - (dimensions.height ?? 0) * origin[1];\r\n    }\r\n    return positionAbsolute;\r\n}\r\nfunction areSetsEqual(a, b) {\r\n    if (a.size !== b.size) {\r\n        return false;\r\n    }\r\n    for (const item of a) {\r\n        if (!b.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction getPointerPosition(event, { snapGrid = [0, 0], snapToGrid = false, transform, containerBounds }) {\r\n    const { x, y } = getEventPosition(event);\r\n    const pointerPos = pointToRendererPoint({ x: x - (containerBounds?.left ?? 0), y: y - (containerBounds?.top ?? 0) }, transform);\r\n    const { x: xSnapped, y: ySnapped } = snapToGrid ? snapPosition(pointerPos, snapGrid) : pointerPos;\r\n    // we need the snapped position in order to be able to skip unnecessary drag events\r\n    return {\r\n        xSnapped,\r\n        ySnapped,\r\n        ...pointerPos,\r\n    };\r\n}\r\nconst getDimensions = (node) => ({\r\n    width: node.offsetWidth,\r\n    height: node.offsetHeight,\r\n});\r\nconst getHostForElement = (element) => element?.getRootNode?.() || window?.document;\r\nconst inputTags = ['INPUT', 'SELECT', 'TEXTAREA'];\r\nfunction isInputDOMNode(event) {\r\n    // using composed path for handling shadow dom\r\n    const target = (event.composedPath?.()?.[0] || event.target);\r\n    if (target?.nodeType !== 1 /* Node.ELEMENT_NODE */)\r\n        return false;\r\n    const isInput = inputTags.includes(target.nodeName) || target.hasAttribute('contenteditable');\r\n    // when an input field is focused we don't want to trigger deletion or movement of nodes\r\n    return isInput || !!target.closest('.nokey');\r\n}\r\nconst isMouseEvent = (event) => 'clientX' in event;\r\nconst getEventPosition = (event, bounds) => {\r\n    const isMouse = isMouseEvent(event);\r\n    const evtX = isMouse ? event.clientX : event.touches?.[0].clientX;\r\n    const evtY = isMouse ? event.clientY : event.touches?.[0].clientY;\r\n    return {\r\n        x: evtX - (bounds?.left ?? 0),\r\n        y: evtY - (bounds?.top ?? 0),\r\n    };\r\n};\r\n/*\r\n * The handle bounds are calculated relative to the node element.\r\n * We store them in the internals object of the node in order to avoid\r\n * unnecessary recalculations.\r\n */\r\nconst getHandleBounds = (type, nodeElement, nodeBounds, zoom, nodeId) => {\r\n    const handles = nodeElement.querySelectorAll(`.${type}`);\r\n    if (!handles || !handles.length) {\r\n        return null;\r\n    }\r\n    return Array.from(handles).map((handle) => {\r\n        const handleBounds = handle.getBoundingClientRect();\r\n        return {\r\n            id: handle.getAttribute('data-handleid'),\r\n            type,\r\n            nodeId,\r\n            position: handle.getAttribute('data-handlepos'),\r\n            x: (handleBounds.left - nodeBounds.left) / zoom,\r\n            y: (handleBounds.top - nodeBounds.top) / zoom,\r\n            ...getDimensions(handle),\r\n        };\r\n    });\r\n};\r\n\r\nfunction getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY, }) {\r\n    /*\r\n     * cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\r\n     * https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\r\n     */\r\n    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\r\n    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\r\n    const offsetX = Math.abs(centerX - sourceX);\r\n    const offsetY = Math.abs(centerY - sourceY);\r\n    return [centerX, centerY, offsetX, offsetY];\r\n}\r\nfunction calculateControlOffset(distance, curvature) {\r\n    if (distance >= 0) {\r\n        return 0.5 * distance;\r\n    }\r\n    return curvature * 25 * Math.sqrt(-distance);\r\n}\r\nfunction getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {\r\n    switch (pos) {\r\n        case Position.Left:\r\n            return [x1 - calculateControlOffset(x1 - x2, c), y1];\r\n        case Position.Right:\r\n            return [x1 + calculateControlOffset(x2 - x1, c), y1];\r\n        case Position.Top:\r\n            return [x1, y1 - calculateControlOffset(y1 - y2, c)];\r\n        case Position.Bottom:\r\n            return [x1, y1 + calculateControlOffset(y2 - y1, c)];\r\n    }\r\n}\r\n/**\r\n * The `getBezierPath` util returns everything you need to render a bezier edge\r\n *between two nodes.\r\n * @public\r\n * @param params.sourceX - The x position of the source handle\r\n * @param params.sourceY - The y position of the source handle\r\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\r\n * @param params.targetX - The x position of the target handle\r\n * @param params.targetY - The y position of the target handle\r\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\r\n * @param params.curvature - The curvature of the bezier edge\r\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\r\n * @example\r\n * ```js\r\n *  const source = { x: 0, y: 20 };\r\n *  const target = { x: 150, y: 100 };\r\n *\r\n *  const [path, labelX, labelY, offsetX, offsetY] = getBezierPath({\r\n *    sourceX: source.x,\r\n *    sourceY: source.y,\r\n *    sourcePosition: Position.Right,\r\n *    targetX: target.x,\r\n *    targetY: target.y,\r\n *    targetPosition: Position.Left,\r\n *});\r\n *```\r\n *\r\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to\r\n *work with multiple edge paths at once.\r\n */\r\nfunction getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25, }) {\r\n    const [sourceControlX, sourceControlY] = getControlWithCurvature({\r\n        pos: sourcePosition,\r\n        x1: sourceX,\r\n        y1: sourceY,\r\n        x2: targetX,\r\n        y2: targetY,\r\n        c: curvature,\r\n    });\r\n    const [targetControlX, targetControlY] = getControlWithCurvature({\r\n        pos: targetPosition,\r\n        x1: targetX,\r\n        y1: targetY,\r\n        x2: sourceX,\r\n        y2: sourceY,\r\n        c: curvature,\r\n    });\r\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\r\n        sourceX,\r\n        sourceY,\r\n        targetX,\r\n        targetY,\r\n        sourceControlX,\r\n        sourceControlY,\r\n        targetControlX,\r\n        targetControlY,\r\n    });\r\n    return [\r\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\r\n        labelX,\r\n        labelY,\r\n        offsetX,\r\n        offsetY,\r\n    ];\r\n}\r\n\r\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\r\nfunction getEdgeCenter({ sourceX, sourceY, targetX, targetY, }) {\r\n    const xOffset = Math.abs(targetX - sourceX) / 2;\r\n    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\r\n    const yOffset = Math.abs(targetY - sourceY) / 2;\r\n    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\r\n    return [centerX, centerY, xOffset, yOffset];\r\n}\r\nfunction getElevatedEdgeZIndex({ sourceNode, targetNode, selected = false, zIndex = 0, elevateOnSelect = false, }) {\r\n    if (!elevateOnSelect) {\r\n        return zIndex;\r\n    }\r\n    const edgeOrConnectedNodeSelected = selected || targetNode.selected || sourceNode.selected;\r\n    const selectedZIndex = Math.max(sourceNode.internals.z || 0, targetNode.internals.z || 0, 1000);\r\n    return zIndex + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\r\n}\r\nfunction isEdgeVisible({ sourceNode, targetNode, width, height, transform }) {\r\n    const edgeBox = getBoundsOfBoxes(nodeToBox(sourceNode), nodeToBox(targetNode));\r\n    if (edgeBox.x === edgeBox.x2) {\r\n        edgeBox.x2 += 1;\r\n    }\r\n    if (edgeBox.y === edgeBox.y2) {\r\n        edgeBox.y2 += 1;\r\n    }\r\n    const viewRect = {\r\n        x: -transform[0] / transform[2],\r\n        y: -transform[1] / transform[2],\r\n        width: width / transform[2],\r\n        height: height / transform[2],\r\n    };\r\n    return getOverlappingArea(viewRect, boxToRect(edgeBox)) > 0;\r\n}\r\nconst getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `xy-edge__${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\r\nconst connectionExists = (edge, edges) => {\r\n    return edges.some((el) => el.source === edge.source &&\r\n        el.target === edge.target &&\r\n        (el.sourceHandle === edge.sourceHandle || (!el.sourceHandle && !edge.sourceHandle)) &&\r\n        (el.targetHandle === edge.targetHandle || (!el.targetHandle && !edge.targetHandle)));\r\n};\r\n/**\r\n * This util is a convenience function to add a new Edge to an array of edges. It also performs some validation to make sure you don't add an invalid edge or duplicate an existing one.\r\n * @public\r\n * @param edgeParams - Either an Edge or a Connection you want to add\r\n * @param edges -  The array of all current edges\r\n * @returns A new array of edges with the new edge added\r\n *\r\n * @remarks If an edge with the same `target` and `source` already exists (and the same\r\n *`targetHandle` and `sourceHandle` if those are set), then this util won't add\r\n *a new edge even if the `id` property is different.\r\n *\r\n */\r\nconst addEdge = (edgeParams, edges) => {\r\n    if (!edgeParams.source || !edgeParams.target) {\r\n        devWarn('006', errorMessages['error006']());\r\n        return edges;\r\n    }\r\n    let edge;\r\n    if (isEdgeBase(edgeParams)) {\r\n        edge = { ...edgeParams };\r\n    }\r\n    else {\r\n        edge = {\r\n            ...edgeParams,\r\n            id: getEdgeId(edgeParams),\r\n        };\r\n    }\r\n    if (connectionExists(edge, edges)) {\r\n        return edges;\r\n    }\r\n    if (edge.sourceHandle === null) {\r\n        delete edge.sourceHandle;\r\n    }\r\n    if (edge.targetHandle === null) {\r\n        delete edge.targetHandle;\r\n    }\r\n    return edges.concat(edge);\r\n};\r\n/**\r\n * A handy utility to update an existing [`Edge`](/api-reference/types/edge) with new properties.\r\n *This searches your edge array for an edge with a matching `id` and updates its\r\n *properties with the connection you provide.\r\n * @public\r\n * @param oldEdge - The edge you want to update\r\n * @param newConnection - The new connection you want to update the edge with\r\n * @param edges - The array of all current edges\r\n * @param options.shouldReplaceId - should the id of the old edge be replaced with the new connection id\r\n * @returns the updated edges array\r\n *\r\n * @example\r\n * ```js\r\n *const onReconnect = useCallback(\r\n *  (oldEdge: Edge, newConnection: Connection) => setEdges((els) => reconnectEdge(oldEdge, newConnection, els)),[]);\r\n *```\r\n */\r\nconst reconnectEdge = (oldEdge, newConnection, edges, options = { shouldReplaceId: true }) => {\r\n    const { id: oldEdgeId, ...rest } = oldEdge;\r\n    if (!newConnection.source || !newConnection.target) {\r\n        devWarn('006', errorMessages['error006']());\r\n        return edges;\r\n    }\r\n    const foundEdge = edges.find((e) => e.id === oldEdge.id);\r\n    if (!foundEdge) {\r\n        devWarn('007', errorMessages['error007'](oldEdgeId));\r\n        return edges;\r\n    }\r\n    // Remove old edge and create the new edge with parameters of old edge.\r\n    const edge = {\r\n        ...rest,\r\n        id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\r\n        source: newConnection.source,\r\n        target: newConnection.target,\r\n        sourceHandle: newConnection.sourceHandle,\r\n        targetHandle: newConnection.targetHandle,\r\n    };\r\n    return edges.filter((e) => e.id !== oldEdgeId).concat(edge);\r\n};\r\n\r\n/**\r\n * Calculates the straight line path between two points.\r\n * @public\r\n * @param params.sourceX - The x position of the source handle\r\n * @param params.sourceY - The y position of the source handle\r\n * @param params.targetX - The x position of the target handle\r\n * @param params.targetY - The y position of the target handle\r\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\r\n * @example\r\n * ```js\r\n *  const source = { x: 0, y: 20 };\r\n *  const target = { x: 150, y: 100 };\r\n *\r\n *  const [path, labelX, labelY, offsetX, offsetY] = getStraightPath({\r\n *    sourceX: source.x,\r\n *    sourceY: source.y,\r\n *    sourcePosition: Position.Right,\r\n *    targetX: target.x,\r\n *    targetY: target.y,\r\n *    targetPosition: Position.Left,\r\n *  });\r\n * ```\r\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\r\n */\r\nfunction getStraightPath({ sourceX, sourceY, targetX, targetY, }) {\r\n    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\r\n        sourceX,\r\n        sourceY,\r\n        targetX,\r\n        targetY,\r\n    });\r\n    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\r\n}\r\n\r\nconst handleDirections = {\r\n    [Position.Left]: { x: -1, y: 0 },\r\n    [Position.Right]: { x: 1, y: 0 },\r\n    [Position.Top]: { x: 0, y: -1 },\r\n    [Position.Bottom]: { x: 0, y: 1 },\r\n};\r\nconst getDirection = ({ source, sourcePosition = Position.Bottom, target, }) => {\r\n    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\r\n        return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };\r\n    }\r\n    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };\r\n};\r\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n/*\r\n * ith this function we try to mimic a orthogonal edge routing behaviour\r\n * It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\r\n */\r\nfunction getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset, }) {\r\n    const sourceDir = handleDirections[sourcePosition];\r\n    const targetDir = handleDirections[targetPosition];\r\n    const sourceGapped = { x: source.x + sourceDir.x * offset, y: source.y + sourceDir.y * offset };\r\n    const targetGapped = { x: target.x + targetDir.x * offset, y: target.y + targetDir.y * offset };\r\n    const dir = getDirection({\r\n        source: sourceGapped,\r\n        sourcePosition,\r\n        target: targetGapped,\r\n    });\r\n    const dirAccessor = dir.x !== 0 ? 'x' : 'y';\r\n    const currDir = dir[dirAccessor];\r\n    let points = [];\r\n    let centerX, centerY;\r\n    const sourceGapOffset = { x: 0, y: 0 };\r\n    const targetGapOffset = { x: 0, y: 0 };\r\n    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\r\n        sourceX: source.x,\r\n        sourceY: source.y,\r\n        targetX: target.x,\r\n        targetY: target.y,\r\n    });\r\n    // opposite handle positions, default case\r\n    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\r\n        centerX = center.x ?? defaultCenterX;\r\n        centerY = center.y ?? defaultCenterY;\r\n        /*\r\n         *    --->\r\n         *    |\r\n         * >---\r\n         */\r\n        const verticalSplit = [\r\n            { x: centerX, y: sourceGapped.y },\r\n            { x: centerX, y: targetGapped.y },\r\n        ];\r\n        /*\r\n         *    |\r\n         *  ---\r\n         *  |\r\n         */\r\n        const horizontalSplit = [\r\n            { x: sourceGapped.x, y: centerY },\r\n            { x: targetGapped.x, y: centerY },\r\n        ];\r\n        if (sourceDir[dirAccessor] === currDir) {\r\n            points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\r\n        }\r\n        else {\r\n            points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\r\n        }\r\n    }\r\n    else {\r\n        // sourceTarget means we take x from source and y from target, targetSource is the opposite\r\n        const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];\r\n        const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];\r\n        // this handles edges with same handle positions\r\n        if (dirAccessor === 'x') {\r\n            points = sourceDir.x === currDir ? targetSource : sourceTarget;\r\n        }\r\n        else {\r\n            points = sourceDir.y === currDir ? sourceTarget : targetSource;\r\n        }\r\n        if (sourcePosition === targetPosition) {\r\n            const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\r\n            // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\r\n            if (diff <= offset) {\r\n                const gapOffset = Math.min(offset - 1, offset - diff);\r\n                if (sourceDir[dirAccessor] === currDir) {\r\n                    sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\r\n                }\r\n                else {\r\n                    targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\r\n                }\r\n            }\r\n        }\r\n        // these are conditions for handling mixed handle positions like Right -> Bottom for example\r\n        if (sourcePosition !== targetPosition) {\r\n            const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\r\n            const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\r\n            const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\r\n            const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\r\n            const flipSourceTarget = (sourceDir[dirAccessor] === 1 && ((!isSameDir && sourceGtTargetOppo) || (isSameDir && sourceLtTargetOppo))) ||\r\n                (sourceDir[dirAccessor] !== 1 && ((!isSameDir && sourceLtTargetOppo) || (isSameDir && sourceGtTargetOppo)));\r\n            if (flipSourceTarget) {\r\n                points = dirAccessor === 'x' ? sourceTarget : targetSource;\r\n            }\r\n        }\r\n        const sourceGapPoint = { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y };\r\n        const targetGapPoint = { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y };\r\n        const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\r\n        const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\r\n        // we want to place the label on the longest segment of the edge\r\n        if (maxXDistance >= maxYDistance) {\r\n            centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\r\n            centerY = points[0].y;\r\n        }\r\n        else {\r\n            centerX = points[0].x;\r\n            centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\r\n        }\r\n    }\r\n    const pathPoints = [\r\n        source,\r\n        { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },\r\n        ...points,\r\n        { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },\r\n        target,\r\n    ];\r\n    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\r\n}\r\nfunction getBend(a, b, c, size) {\r\n    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\r\n    const { x, y } = b;\r\n    // no bend\r\n    if ((a.x === x && x === c.x) || (a.y === y && y === c.y)) {\r\n        return `L${x} ${y}`;\r\n    }\r\n    // first segment is horizontal\r\n    if (a.y === y) {\r\n        const xDir = a.x < c.x ? -1 : 1;\r\n        const yDir = a.y < c.y ? 1 : -1;\r\n        return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\r\n    }\r\n    const xDir = a.x < c.x ? 1 : -1;\r\n    const yDir = a.y < c.y ? -1 : 1;\r\n    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\r\n}\r\n/**\r\n * The `getSmoothStepPath` util returns everything you need to render a stepped path\r\n *between two nodes. The `borderRadius` property can be used to choose how rounded\r\n *the corners of those steps are.\r\n * @public\r\n * @param params.sourceX - The x position of the source handle\r\n * @param params.sourceY - The y position of the source handle\r\n * @param params.sourcePosition - The position of the source handle (default: Position.Bottom)\r\n * @param params.targetX - The x position of the target handle\r\n * @param params.targetY - The y position of the target handle\r\n * @param params.targetPosition - The position of the target handle (default: Position.Top)\r\n * @returns A path string you can use in an SVG, the labelX and labelY position (center of path) and offsetX, offsetY between source handle and label\r\n * @example\r\n * ```js\r\n *  const source = { x: 0, y: 20 };\r\n *  const target = { x: 150, y: 100 };\r\n *\r\n *  const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({\r\n *    sourceX: source.x,\r\n *    sourceY: source.y,\r\n *    sourcePosition: Position.Right,\r\n *    targetX: target.x,\r\n *    targetY: target.y,\r\n *    targetPosition: Position.Left,\r\n *  });\r\n * ```\r\n * @remarks This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.\r\n */\r\nfunction getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset = 20, }) {\r\n    const [points, labelX, labelY, offsetX, offsetY] = getPoints({\r\n        source: { x: sourceX, y: sourceY },\r\n        sourcePosition,\r\n        target: { x: targetX, y: targetY },\r\n        targetPosition,\r\n        center: { x: centerX, y: centerY },\r\n        offset,\r\n    });\r\n    const path = points.reduce((res, p, i) => {\r\n        let segment = '';\r\n        if (i > 0 && i < points.length - 1) {\r\n            segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\r\n        }\r\n        else {\r\n            segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\r\n        }\r\n        res += segment;\r\n        return res;\r\n    }, '');\r\n    return [path, labelX, labelY, offsetX, offsetY];\r\n}\r\n\r\nfunction isNodeInitialized(node) {\r\n    return (node &&\r\n        !!(node.internals.handleBounds || node.handles?.length) &&\r\n        !!(node.measured.width || node.width || node.initialWidth));\r\n}\r\nfunction getEdgePosition(params) {\r\n    const { sourceNode, targetNode } = params;\r\n    if (!isNodeInitialized(sourceNode) || !isNodeInitialized(targetNode)) {\r\n        return null;\r\n    }\r\n    const sourceHandleBounds = sourceNode.internals.handleBounds || toHandleBounds(sourceNode.handles);\r\n    const targetHandleBounds = targetNode.internals.handleBounds || toHandleBounds(targetNode.handles);\r\n    const sourceHandle = getHandle$1(sourceHandleBounds?.source ?? [], params.sourceHandle);\r\n    const targetHandle = getHandle$1(\r\n    // when connection type is loose we can define all handles as sources and connect source -> source\r\n    params.connectionMode === ConnectionMode.Strict\r\n        ? targetHandleBounds?.target ?? []\r\n        : (targetHandleBounds?.target ?? []).concat(targetHandleBounds?.source ?? []), params.targetHandle);\r\n    if (!sourceHandle || !targetHandle) {\r\n        params.onError?.('008', errorMessages['error008'](!sourceHandle ? 'source' : 'target', {\r\n            id: params.id,\r\n            sourceHandle: params.sourceHandle,\r\n            targetHandle: params.targetHandle,\r\n        }));\r\n        return null;\r\n    }\r\n    const sourcePosition = sourceHandle?.position || Position.Bottom;\r\n    const targetPosition = targetHandle?.position || Position.Top;\r\n    const source = getHandlePosition(sourceNode, sourceHandle, sourcePosition);\r\n    const target = getHandlePosition(targetNode, targetHandle, targetPosition);\r\n    return {\r\n        sourceX: source.x,\r\n        sourceY: source.y,\r\n        targetX: target.x,\r\n        targetY: target.y,\r\n        sourcePosition,\r\n        targetPosition,\r\n    };\r\n}\r\nfunction toHandleBounds(handles) {\r\n    if (!handles) {\r\n        return null;\r\n    }\r\n    const source = [];\r\n    const target = [];\r\n    for (const handle of handles) {\r\n        handle.width = handle.width ?? 1;\r\n        handle.height = handle.height ?? 1;\r\n        if (handle.type === 'source') {\r\n            source.push(handle);\r\n        }\r\n        else if (handle.type === 'target') {\r\n            target.push(handle);\r\n        }\r\n    }\r\n    return {\r\n        source,\r\n        target,\r\n    };\r\n}\r\nfunction getHandlePosition(node, handle, fallbackPosition = Position.Left, center = false) {\r\n    const x = (handle?.x ?? 0) + node.internals.positionAbsolute.x;\r\n    const y = (handle?.y ?? 0) + node.internals.positionAbsolute.y;\r\n    const { width, height } = handle ?? getNodeDimensions(node);\r\n    if (center) {\r\n        return { x: x + width / 2, y: y + height / 2 };\r\n    }\r\n    const position = handle?.position ?? fallbackPosition;\r\n    switch (position) {\r\n        case Position.Top:\r\n            return { x: x + width / 2, y };\r\n        case Position.Right:\r\n            return { x: x + width, y: y + height / 2 };\r\n        case Position.Bottom:\r\n            return { x: x + width / 2, y: y + height };\r\n        case Position.Left:\r\n            return { x, y: y + height / 2 };\r\n    }\r\n}\r\nfunction getHandle$1(bounds, handleId) {\r\n    if (!bounds) {\r\n        return null;\r\n    }\r\n    // if no handleId is given, we use the first handle, otherwise we check for the id\r\n    return (!handleId ? bounds[0] : bounds.find((d) => d.id === handleId)) || null;\r\n}\r\n\r\nfunction getMarkerId(marker, id) {\r\n    if (!marker) {\r\n        return '';\r\n    }\r\n    if (typeof marker === 'string') {\r\n        return marker;\r\n    }\r\n    const idPrefix = id ? `${id}__` : '';\r\n    return `${idPrefix}${Object.keys(marker)\r\n        .sort()\r\n        .map((key) => `${key}=${marker[key]}`)\r\n        .join('&')}`;\r\n}\r\nfunction createMarkerIds(edges, { id, defaultColor, defaultMarkerStart, defaultMarkerEnd, }) {\r\n    const ids = new Set();\r\n    return edges\r\n        .reduce((markers, edge) => {\r\n        [edge.markerStart || defaultMarkerStart, edge.markerEnd || defaultMarkerEnd].forEach((marker) => {\r\n            if (marker && typeof marker === 'object') {\r\n                const markerId = getMarkerId(marker, id);\r\n                if (!ids.has(markerId)) {\r\n                    markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });\r\n                    ids.add(markerId);\r\n                }\r\n            }\r\n        });\r\n        return markers;\r\n    }, [])\r\n        .sort((a, b) => a.id.localeCompare(b.id));\r\n}\r\n\r\nfunction getNodeToolbarTransform(nodeRect, viewport, position, offset, align) {\r\n    let alignmentOffset = 0.5;\r\n    if (align === 'start') {\r\n        alignmentOffset = 0;\r\n    }\r\n    else if (align === 'end') {\r\n        alignmentOffset = 1;\r\n    }\r\n    /*\r\n     * position === Position.Top\r\n     * we set the x any y position of the toolbar based on the nodes position\r\n     */\r\n    let pos = [\r\n        (nodeRect.x + nodeRect.width * alignmentOffset) * viewport.zoom + viewport.x,\r\n        nodeRect.y * viewport.zoom + viewport.y - offset,\r\n    ];\r\n    // and than shift it based on the alignment. The shift values are in %.\r\n    let shift = [-100 * alignmentOffset, -100];\r\n    switch (position) {\r\n        case Position.Right:\r\n            pos = [\r\n                (nodeRect.x + nodeRect.width) * viewport.zoom + viewport.x + offset,\r\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\r\n            ];\r\n            shift = [0, -100 * alignmentOffset];\r\n            break;\r\n        case Position.Bottom:\r\n            pos[1] = (nodeRect.y + nodeRect.height) * viewport.zoom + viewport.y + offset;\r\n            shift[1] = 0;\r\n            break;\r\n        case Position.Left:\r\n            pos = [\r\n                nodeRect.x * viewport.zoom + viewport.x - offset,\r\n                (nodeRect.y + nodeRect.height * alignmentOffset) * viewport.zoom + viewport.y,\r\n            ];\r\n            shift = [-100, -100 * alignmentOffset];\r\n            break;\r\n    }\r\n    return `translate(${pos[0]}px, ${pos[1]}px) translate(${shift[0]}%, ${shift[1]}%)`;\r\n}\r\n\r\nconst defaultOptions = {\r\n    nodeOrigin: [0, 0],\r\n    nodeExtent: infiniteExtent,\r\n    elevateNodesOnSelect: true,\r\n    defaults: {},\r\n};\r\nconst adoptUserNodesDefaultOptions = {\r\n    ...defaultOptions,\r\n    checkEquality: true,\r\n};\r\nfunction mergeObjects(base, incoming) {\r\n    const result = { ...base };\r\n    for (const key in incoming) {\r\n        if (incoming[key] !== undefined) {\r\n            // typecast is safe here, because we check for undefined\r\n            result[key] = incoming[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction updateAbsolutePositions(nodeLookup, parentLookup, options) {\r\n    const _options = mergeObjects(defaultOptions, options);\r\n    for (const node of nodeLookup.values()) {\r\n        if (node.parentId) {\r\n            updateChildNode(node, nodeLookup, parentLookup, _options);\r\n        }\r\n        else {\r\n            const positionWithOrigin = getNodePositionWithOrigin(node, _options.nodeOrigin);\r\n            const extent = isCoordinateExtent(node.extent) ? node.extent : _options.nodeExtent;\r\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(node));\r\n            node.internals.positionAbsolute = clampedPosition;\r\n        }\r\n    }\r\n}\r\nfunction adoptUserNodes(nodes, nodeLookup, parentLookup, options) {\r\n    const _options = mergeObjects(adoptUserNodesDefaultOptions, options);\r\n    const tmpLookup = new Map(nodeLookup);\r\n    const selectedNodeZ = _options?.elevateNodesOnSelect ? 1000 : 0;\r\n    nodeLookup.clear();\r\n    parentLookup.clear();\r\n    for (const userNode of nodes) {\r\n        let internalNode = tmpLookup.get(userNode.id);\r\n        if (_options.checkEquality && userNode === internalNode?.internals.userNode) {\r\n            nodeLookup.set(userNode.id, internalNode);\r\n        }\r\n        else {\r\n            const positionWithOrigin = getNodePositionWithOrigin(userNode, _options.nodeOrigin);\r\n            const extent = isCoordinateExtent(userNode.extent) ? userNode.extent : _options.nodeExtent;\r\n            const clampedPosition = clampPosition(positionWithOrigin, extent, getNodeDimensions(userNode));\r\n            internalNode = {\r\n                ..._options.defaults,\r\n                ...userNode,\r\n                measured: {\r\n                    width: userNode.measured?.width,\r\n                    height: userNode.measured?.height,\r\n                },\r\n                internals: {\r\n                    positionAbsolute: clampedPosition,\r\n                    // if user re-initializes the node or removes `measured` for whatever reason, we reset the handleBounds so that the node gets re-measured\r\n                    handleBounds: !userNode.measured ? undefined : internalNode?.internals.handleBounds,\r\n                    z: calculateZ(userNode, selectedNodeZ),\r\n                    userNode,\r\n                },\r\n            };\r\n            nodeLookup.set(userNode.id, internalNode);\r\n        }\r\n        if (userNode.parentId) {\r\n            updateChildNode(internalNode, nodeLookup, parentLookup, options);\r\n        }\r\n    }\r\n}\r\nfunction updateParentLookup(node, parentLookup) {\r\n    if (!node.parentId) {\r\n        return;\r\n    }\r\n    const childNodes = parentLookup.get(node.parentId);\r\n    if (childNodes) {\r\n        childNodes.set(node.id, node);\r\n    }\r\n    else {\r\n        parentLookup.set(node.parentId, new Map([[node.id, node]]));\r\n    }\r\n}\r\n/**\r\n * Updates positionAbsolute and zIndex of a child node and the parentLookup.\r\n */\r\nfunction updateChildNode(node, nodeLookup, parentLookup, options) {\r\n    const { elevateNodesOnSelect, nodeOrigin, nodeExtent } = mergeObjects(defaultOptions, options);\r\n    const parentId = node.parentId;\r\n    const parentNode = nodeLookup.get(parentId);\r\n    if (!parentNode) {\r\n        console.warn(`Parent node ${parentId} not found. Please make sure that parent nodes are in front of their child nodes in the nodes array.`);\r\n        return;\r\n    }\r\n    updateParentLookup(node, parentLookup);\r\n    const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\r\n    const { x, y, z } = calculateChildXYZ(node, parentNode, nodeOrigin, nodeExtent, selectedNodeZ);\r\n    const { positionAbsolute } = node.internals;\r\n    const positionChanged = x !== positionAbsolute.x || y !== positionAbsolute.y;\r\n    if (positionChanged || z !== node.internals.z) {\r\n        // we create a new object to mark the node as updated\r\n        nodeLookup.set(node.id, {\r\n            ...node,\r\n            internals: {\r\n                ...node.internals,\r\n                positionAbsolute: positionChanged ? { x, y } : positionAbsolute,\r\n                z,\r\n            },\r\n        });\r\n    }\r\n}\r\nfunction calculateZ(node, selectedNodeZ) {\r\n    return (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\r\n}\r\nfunction calculateChildXYZ(childNode, parentNode, nodeOrigin, nodeExtent, selectedNodeZ) {\r\n    const { x: parentX, y: parentY } = parentNode.internals.positionAbsolute;\r\n    const childDimensions = getNodeDimensions(childNode);\r\n    const positionWithOrigin = getNodePositionWithOrigin(childNode, nodeOrigin);\r\n    const clampedPosition = isCoordinateExtent(childNode.extent)\r\n        ? clampPosition(positionWithOrigin, childNode.extent, childDimensions)\r\n        : positionWithOrigin;\r\n    let absolutePosition = clampPosition({ x: parentX + clampedPosition.x, y: parentY + clampedPosition.y }, nodeExtent, childDimensions);\r\n    if (childNode.extent === 'parent') {\r\n        absolutePosition = clampPositionToParent(absolutePosition, childDimensions, parentNode);\r\n    }\r\n    const childZ = calculateZ(childNode, selectedNodeZ);\r\n    const parentZ = parentNode.internals.z ?? 0;\r\n    return {\r\n        x: absolutePosition.x,\r\n        y: absolutePosition.y,\r\n        z: parentZ > childZ ? parentZ : childZ,\r\n    };\r\n}\r\nfunction handleExpandParent(children, nodeLookup, parentLookup, nodeOrigin = [0, 0]) {\r\n    const changes = [];\r\n    const parentExpansions = new Map();\r\n    // determine the expanded rectangle the child nodes would take for each parent\r\n    for (const child of children) {\r\n        const parent = nodeLookup.get(child.parentId);\r\n        if (!parent) {\r\n            continue;\r\n        }\r\n        const parentRect = parentExpansions.get(child.parentId)?.expandedRect ?? nodeToRect(parent);\r\n        const expandedRect = getBoundsOfRects(parentRect, child.rect);\r\n        parentExpansions.set(child.parentId, { expandedRect, parent });\r\n    }\r\n    if (parentExpansions.size > 0) {\r\n        parentExpansions.forEach(({ expandedRect, parent }, parentId) => {\r\n            // determine the position & dimensions of the parent\r\n            const positionAbsolute = parent.internals.positionAbsolute;\r\n            const dimensions = getNodeDimensions(parent);\r\n            const origin = parent.origin ?? nodeOrigin;\r\n            // determine how much the parent expands in width and position\r\n            const xChange = expandedRect.x < positionAbsolute.x ? Math.round(Math.abs(positionAbsolute.x - expandedRect.x)) : 0;\r\n            const yChange = expandedRect.y < positionAbsolute.y ? Math.round(Math.abs(positionAbsolute.y - expandedRect.y)) : 0;\r\n            const newWidth = Math.max(dimensions.width, Math.round(expandedRect.width));\r\n            const newHeight = Math.max(dimensions.height, Math.round(expandedRect.height));\r\n            const widthChange = (newWidth - dimensions.width) * origin[0];\r\n            const heightChange = (newHeight - dimensions.height) * origin[1];\r\n            // We need to correct the position of the parent node if the origin is not [0,0]\r\n            if (xChange > 0 || yChange > 0 || widthChange || heightChange) {\r\n                changes.push({\r\n                    id: parentId,\r\n                    type: 'position',\r\n                    position: {\r\n                        x: parent.position.x - xChange + widthChange,\r\n                        y: parent.position.y - yChange + heightChange,\r\n                    },\r\n                });\r\n                /*\r\n                 * We move all child nodes in the oppsite direction\r\n                 * so the x,y changes of the parent do not move the children\r\n                 */\r\n                parentLookup.get(parentId)?.forEach((childNode) => {\r\n                    if (!children.some((child) => child.id === childNode.id)) {\r\n                        changes.push({\r\n                            id: childNode.id,\r\n                            type: 'position',\r\n                            position: {\r\n                                x: childNode.position.x + xChange,\r\n                                y: childNode.position.y + yChange,\r\n                            },\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            // We need to correct the dimensions of the parent node if the origin is not [0,0]\r\n            if (dimensions.width < expandedRect.width || dimensions.height < expandedRect.height || xChange || yChange) {\r\n                changes.push({\r\n                    id: parentId,\r\n                    type: 'dimensions',\r\n                    setAttributes: true,\r\n                    dimensions: {\r\n                        width: newWidth + (xChange ? origin[0] * xChange - widthChange : 0),\r\n                        height: newHeight + (yChange ? origin[1] * yChange - heightChange : 0),\r\n                    },\r\n                });\r\n            }\r\n        });\r\n    }\r\n    return changes;\r\n}\r\nfunction updateNodeInternals(updates, nodeLookup, parentLookup, domNode, nodeOrigin, nodeExtent) {\r\n    const viewportNode = domNode?.querySelector('.xyflow__viewport');\r\n    let updatedInternals = false;\r\n    if (!viewportNode) {\r\n        return { changes: [], updatedInternals };\r\n    }\r\n    const changes = [];\r\n    const style = window.getComputedStyle(viewportNode);\r\n    const { m22: zoom } = new window.DOMMatrixReadOnly(style.transform);\r\n    // in this array we collect nodes, that might trigger changes (like expanding parent)\r\n    const parentExpandChildren = [];\r\n    for (const update of updates.values()) {\r\n        const node = nodeLookup.get(update.id);\r\n        if (!node) {\r\n            continue;\r\n        }\r\n        if (node.hidden) {\r\n            nodeLookup.set(node.id, {\r\n                ...node,\r\n                internals: {\r\n                    ...node.internals,\r\n                    handleBounds: undefined,\r\n                },\r\n            });\r\n            updatedInternals = true;\r\n            continue;\r\n        }\r\n        const dimensions = getDimensions(update.nodeElement);\r\n        const dimensionChanged = node.measured.width !== dimensions.width || node.measured.height !== dimensions.height;\r\n        const doUpdate = !!(dimensions.width &&\r\n            dimensions.height &&\r\n            (dimensionChanged || !node.internals.handleBounds || update.force));\r\n        if (doUpdate) {\r\n            const nodeBounds = update.nodeElement.getBoundingClientRect();\r\n            const extent = isCoordinateExtent(node.extent) ? node.extent : nodeExtent;\r\n            let { positionAbsolute } = node.internals;\r\n            if (node.parentId && node.extent === 'parent') {\r\n                positionAbsolute = clampPositionToParent(positionAbsolute, dimensions, nodeLookup.get(node.parentId));\r\n            }\r\n            else if (extent) {\r\n                positionAbsolute = clampPosition(positionAbsolute, extent, dimensions);\r\n            }\r\n            const newNode = {\r\n                ...node,\r\n                measured: dimensions,\r\n                internals: {\r\n                    ...node.internals,\r\n                    positionAbsolute,\r\n                    handleBounds: {\r\n                        source: getHandleBounds('source', update.nodeElement, nodeBounds, zoom, node.id),\r\n                        target: getHandleBounds('target', update.nodeElement, nodeBounds, zoom, node.id),\r\n                    },\r\n                },\r\n            };\r\n            nodeLookup.set(node.id, newNode);\r\n            if (node.parentId) {\r\n                updateChildNode(newNode, nodeLookup, parentLookup, { nodeOrigin });\r\n            }\r\n            updatedInternals = true;\r\n            if (dimensionChanged) {\r\n                changes.push({\r\n                    id: node.id,\r\n                    type: 'dimensions',\r\n                    dimensions,\r\n                });\r\n                if (node.expandParent && node.parentId) {\r\n                    parentExpandChildren.push({\r\n                        id: node.id,\r\n                        parentId: node.parentId,\r\n                        rect: nodeToRect(newNode, nodeOrigin),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (parentExpandChildren.length > 0) {\r\n        const parentExpandChanges = handleExpandParent(parentExpandChildren, nodeLookup, parentLookup, nodeOrigin);\r\n        changes.push(...parentExpandChanges);\r\n    }\r\n    return { changes, updatedInternals };\r\n}\r\nasync function panBy({ delta, panZoom, transform, translateExtent, width, height, }) {\r\n    if (!panZoom || (!delta.x && !delta.y)) {\r\n        return Promise.resolve(false);\r\n    }\r\n    const nextViewport = await panZoom.setViewportConstrained({\r\n        x: transform[0] + delta.x,\r\n        y: transform[1] + delta.y,\r\n        zoom: transform[2],\r\n    }, [\r\n        [0, 0],\r\n        [width, height],\r\n    ], translateExtent);\r\n    const transformChanged = !!nextViewport &&\r\n        (nextViewport.x !== transform[0] || nextViewport.y !== transform[1] || nextViewport.k !== transform[2]);\r\n    return Promise.resolve(transformChanged);\r\n}\r\n/**\r\n * this function adds the connection to the connectionLookup\r\n * at the following keys: nodeId-type-handleId, nodeId-type and nodeId\r\n * @param type type of the connection\r\n * @param connection connection that should be added to the lookup\r\n * @param connectionKey at which key the connection should be added\r\n * @param connectionLookup reference to the connection lookup\r\n * @param nodeId nodeId of the connection\r\n * @param handleId handleId of the conneciton\r\n */\r\nfunction addConnectionToLookup(type, connection, connectionKey, connectionLookup, nodeId, handleId) {\r\n    /*\r\n     * We add the connection to the connectionLookup at the following keys\r\n     * 1. nodeId, 2. nodeId-type, 3. nodeId-type-handleId\r\n     * If the key already exists, we add the connection to the existing map\r\n     */\r\n    let key = nodeId;\r\n    const nodeMap = connectionLookup.get(key) || new Map();\r\n    connectionLookup.set(key, nodeMap.set(connectionKey, connection));\r\n    key = `${nodeId}-${type}`;\r\n    const typeMap = connectionLookup.get(key) || new Map();\r\n    connectionLookup.set(key, typeMap.set(connectionKey, connection));\r\n    if (handleId) {\r\n        key = `${nodeId}-${type}-${handleId}`;\r\n        const handleMap = connectionLookup.get(key) || new Map();\r\n        connectionLookup.set(key, handleMap.set(connectionKey, connection));\r\n    }\r\n}\r\nfunction updateConnectionLookup(connectionLookup, edgeLookup, edges) {\r\n    connectionLookup.clear();\r\n    edgeLookup.clear();\r\n    for (const edge of edges) {\r\n        const { source: sourceNode, target: targetNode, sourceHandle = null, targetHandle = null } = edge;\r\n        const connection = { edgeId: edge.id, source: sourceNode, target: targetNode, sourceHandle, targetHandle };\r\n        const sourceKey = `${sourceNode}-${sourceHandle}--${targetNode}-${targetHandle}`;\r\n        const targetKey = `${targetNode}-${targetHandle}--${sourceNode}-${sourceHandle}`;\r\n        addConnectionToLookup('source', connection, targetKey, connectionLookup, sourceNode, sourceHandle);\r\n        addConnectionToLookup('target', connection, sourceKey, connectionLookup, targetNode, targetHandle);\r\n        edgeLookup.set(edge.id, edge);\r\n    }\r\n}\r\n\r\nfunction shallowNodeData(a, b) {\r\n    if (a === null || b === null) {\r\n        return false;\r\n    }\r\n    const _a = Array.isArray(a) ? a : [a];\r\n    const _b = Array.isArray(b) ? b : [b];\r\n    if (_a.length !== _b.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < _a.length; i++) {\r\n        if (_a[i].id !== _b[i].id || _a[i].type !== _b[i].type || !Object.is(_a[i].data, _b[i].data)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction isParentSelected(node, nodeLookup) {\r\n    if (!node.parentId) {\r\n        return false;\r\n    }\r\n    const parentNode = nodeLookup.get(node.parentId);\r\n    if (!parentNode) {\r\n        return false;\r\n    }\r\n    if (parentNode.selected) {\r\n        return true;\r\n    }\r\n    return isParentSelected(parentNode, nodeLookup);\r\n}\r\nfunction hasSelector(target, selector, domNode) {\r\n    let current = target;\r\n    do {\r\n        if (current?.matches?.(selector))\r\n            return true;\r\n        if (current === domNode)\r\n            return false;\r\n        current = current?.parentElement;\r\n    } while (current);\r\n    return false;\r\n}\r\n// looks for all selected nodes and created a NodeDragItem for each of them\r\nfunction getDragItems(nodeLookup, nodesDraggable, mousePos, nodeId) {\r\n    const dragItems = new Map();\r\n    for (const [id, node] of nodeLookup) {\r\n        if ((node.selected || node.id === nodeId) &&\r\n            (!node.parentId || !isParentSelected(node, nodeLookup)) &&\r\n            (node.draggable || (nodesDraggable && typeof node.draggable === 'undefined'))) {\r\n            const internalNode = nodeLookup.get(id);\r\n            if (internalNode) {\r\n                dragItems.set(id, {\r\n                    id,\r\n                    position: internalNode.position || { x: 0, y: 0 },\r\n                    distance: {\r\n                        x: mousePos.x - internalNode.internals.positionAbsolute.x,\r\n                        y: mousePos.y - internalNode.internals.positionAbsolute.y,\r\n                    },\r\n                    extent: internalNode.extent,\r\n                    parentId: internalNode.parentId,\r\n                    origin: internalNode.origin,\r\n                    expandParent: internalNode.expandParent,\r\n                    internals: {\r\n                        positionAbsolute: internalNode.internals.positionAbsolute || { x: 0, y: 0 },\r\n                    },\r\n                    measured: {\r\n                        width: internalNode.measured.width ?? 0,\r\n                        height: internalNode.measured.height ?? 0,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return dragItems;\r\n}\r\n/*\r\n * returns two params:\r\n * 1. the dragged node (or the first of the list, if we are dragging a node selection)\r\n * 2. array of selected nodes (for multi selections)\r\n */\r\nfunction getEventHandlerParams({ nodeId, dragItems, nodeLookup, dragging = true, }) {\r\n    const nodesFromDragItems = [];\r\n    for (const [id, dragItem] of dragItems) {\r\n        const node = nodeLookup.get(id)?.internals.userNode;\r\n        if (node) {\r\n            nodesFromDragItems.push({\r\n                ...node,\r\n                position: dragItem.position,\r\n                dragging,\r\n            });\r\n        }\r\n    }\r\n    if (!nodeId) {\r\n        return [nodesFromDragItems[0], nodesFromDragItems];\r\n    }\r\n    const node = nodeLookup.get(nodeId)?.internals.userNode;\r\n    return [\r\n        !node\r\n            ? nodesFromDragItems[0]\r\n            : {\r\n                ...node,\r\n                position: dragItems.get(nodeId)?.position || node.position,\r\n                dragging,\r\n            },\r\n        nodesFromDragItems,\r\n    ];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction XYDrag({ onNodeMouseDown, getStoreItems, onDragStart, onDrag, onDragStop, }) {\r\n    let lastPos = { x: null, y: null };\r\n    let autoPanId = 0;\r\n    let dragItems = new Map();\r\n    let autoPanStarted = false;\r\n    let mousePosition = { x: 0, y: 0 };\r\n    let containerBounds = null;\r\n    let dragStarted = false;\r\n    let d3Selection = null;\r\n    let abortDrag = false; // prevents unintentional dragging on multitouch\r\n    // public functions\r\n    function update({ noDragClassName, handleSelector, domNode, isSelectable, nodeId, nodeClickDistance = 0, }) {\r\n        d3Selection = select(domNode);\r\n        function updateNodes({ x, y }, dragEvent) {\r\n            const { nodeLookup, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onNodeDrag, onSelectionDrag, onError, updateNodePositions, } = getStoreItems();\r\n            lastPos = { x, y };\r\n            let hasChange = false;\r\n            let nodesBox = { x: 0, y: 0, x2: 0, y2: 0 };\r\n            if (dragItems.size > 1 && nodeExtent) {\r\n                const rect = getInternalNodesBounds(dragItems);\r\n                nodesBox = rectToBox(rect);\r\n            }\r\n            for (const [id, dragItem] of dragItems) {\r\n                if (!nodeLookup.has(id)) {\r\n                    /*\r\n                     * if the node is not in the nodeLookup anymore, it was probably deleted while dragging\r\n                     * and we don't need to update it anymore\r\n                     */\r\n                    continue;\r\n                }\r\n                let nextPosition = { x: x - dragItem.distance.x, y: y - dragItem.distance.y };\r\n                if (snapToGrid) {\r\n                    nextPosition = snapPosition(nextPosition, snapGrid);\r\n                }\r\n                /*\r\n                 * if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\r\n                 * based on its position so that the node stays at it's position relative to the selection.\r\n                 */\r\n                let adjustedNodeExtent = [\r\n                    [nodeExtent[0][0], nodeExtent[0][1]],\r\n                    [nodeExtent[1][0], nodeExtent[1][1]],\r\n                ];\r\n                if (dragItems.size > 1 && nodeExtent && !dragItem.extent) {\r\n                    const { positionAbsolute } = dragItem.internals;\r\n                    const x1 = positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\r\n                    const x2 = positionAbsolute.x + dragItem.measured.width - nodesBox.x2 + nodeExtent[1][0];\r\n                    const y1 = positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\r\n                    const y2 = positionAbsolute.y + dragItem.measured.height - nodesBox.y2 + nodeExtent[1][1];\r\n                    adjustedNodeExtent = [\r\n                        [x1, y1],\r\n                        [x2, y2],\r\n                    ];\r\n                }\r\n                const { position, positionAbsolute } = calculateNodePosition({\r\n                    nodeId: id,\r\n                    nextPosition,\r\n                    nodeLookup,\r\n                    nodeExtent: adjustedNodeExtent,\r\n                    nodeOrigin,\r\n                    onError,\r\n                });\r\n                // we want to make sure that we only fire a change event when there is a change\r\n                hasChange = hasChange || dragItem.position.x !== position.x || dragItem.position.y !== position.y;\r\n                dragItem.position = position;\r\n                dragItem.internals.positionAbsolute = positionAbsolute;\r\n            }\r\n            if (!hasChange) {\r\n                return;\r\n            }\r\n            updateNodePositions(dragItems, true);\r\n            if (dragEvent && (onDrag || onNodeDrag || (!nodeId && onSelectionDrag))) {\r\n                const [currentNode, currentNodes] = getEventHandlerParams({\r\n                    nodeId,\r\n                    dragItems,\r\n                    nodeLookup,\r\n                });\r\n                onDrag?.(dragEvent, dragItems, currentNode, currentNodes);\r\n                onNodeDrag?.(dragEvent, currentNode, currentNodes);\r\n                if (!nodeId) {\r\n                    onSelectionDrag?.(dragEvent, currentNodes);\r\n                }\r\n            }\r\n        }\r\n        async function autoPan() {\r\n            if (!containerBounds) {\r\n                return;\r\n            }\r\n            const { transform, panBy, autoPanSpeed, autoPanOnNodeDrag } = getStoreItems();\r\n            if (!autoPanOnNodeDrag) {\r\n                autoPanStarted = false;\r\n                cancelAnimationFrame(autoPanId);\r\n                return;\r\n            }\r\n            const [xMovement, yMovement] = calcAutoPan(mousePosition, containerBounds, autoPanSpeed);\r\n            if (xMovement !== 0 || yMovement !== 0) {\r\n                lastPos.x = (lastPos.x ?? 0) - xMovement / transform[2];\r\n                lastPos.y = (lastPos.y ?? 0) - yMovement / transform[2];\r\n                if (await panBy({ x: xMovement, y: yMovement })) {\r\n                    updateNodes(lastPos, null);\r\n                }\r\n            }\r\n            autoPanId = requestAnimationFrame(autoPan);\r\n        }\r\n        function startDrag(event) {\r\n            const { nodeLookup, multiSelectionActive, nodesDraggable, transform, snapGrid, snapToGrid, selectNodesOnDrag, onNodeDragStart, onSelectionDragStart, unselectNodesAndEdges, } = getStoreItems();\r\n            dragStarted = true;\r\n            if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\r\n                if (!nodeLookup.get(nodeId)?.selected) {\r\n                    // we need to reset selected nodes when selectNodesOnDrag=false\r\n                    unselectNodesAndEdges();\r\n                }\r\n            }\r\n            if (isSelectable && selectNodesOnDrag && nodeId) {\r\n                onNodeMouseDown?.(nodeId);\r\n            }\r\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid, containerBounds });\r\n            lastPos = pointerPos;\r\n            dragItems = getDragItems(nodeLookup, nodesDraggable, pointerPos, nodeId);\r\n            if (dragItems.size > 0 && (onDragStart || onNodeDragStart || (!nodeId && onSelectionDragStart))) {\r\n                const [currentNode, currentNodes] = getEventHandlerParams({\r\n                    nodeId,\r\n                    dragItems,\r\n                    nodeLookup,\r\n                });\r\n                onDragStart?.(event.sourceEvent, dragItems, currentNode, currentNodes);\r\n                onNodeDragStart?.(event.sourceEvent, currentNode, currentNodes);\r\n                if (!nodeId) {\r\n                    onSelectionDragStart?.(event.sourceEvent, currentNodes);\r\n                }\r\n            }\r\n        }\r\n        const d3DragInstance = drag()\r\n            .clickDistance(nodeClickDistance)\r\n            .on('start', (event) => {\r\n            const { domNode, nodeDragThreshold, transform, snapGrid, snapToGrid } = getStoreItems();\r\n            containerBounds = domNode?.getBoundingClientRect() || null;\r\n            abortDrag = false;\r\n            if (nodeDragThreshold === 0) {\r\n                startDrag(event);\r\n            }\r\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid, containerBounds });\r\n            lastPos = pointerPos;\r\n            mousePosition = getEventPosition(event.sourceEvent, containerBounds);\r\n        })\r\n            .on('drag', (event) => {\r\n            const { autoPanOnNodeDrag, transform, snapGrid, snapToGrid, nodeDragThreshold, nodeLookup } = getStoreItems();\r\n            const pointerPos = getPointerPosition(event.sourceEvent, { transform, snapGrid, snapToGrid, containerBounds });\r\n            if ((event.sourceEvent.type === 'touchmove' && event.sourceEvent.touches.length > 1) ||\r\n                // if user deletes a node while dragging, we need to abort the drag to prevent errors\r\n                (nodeId && !nodeLookup.has(nodeId))) {\r\n                abortDrag = true;\r\n            }\r\n            if (abortDrag) {\r\n                return;\r\n            }\r\n            if (!autoPanStarted && autoPanOnNodeDrag && dragStarted) {\r\n                autoPanStarted = true;\r\n                autoPan();\r\n            }\r\n            if (!dragStarted) {\r\n                const x = pointerPos.xSnapped - (lastPos.x ?? 0);\r\n                const y = pointerPos.ySnapped - (lastPos.y ?? 0);\r\n                const distance = Math.sqrt(x * x + y * y);\r\n                if (distance > nodeDragThreshold) {\r\n                    startDrag(event);\r\n                }\r\n            }\r\n            // skip events without movement\r\n            if ((lastPos.x !== pointerPos.xSnapped || lastPos.y !== pointerPos.ySnapped) && dragItems && dragStarted) {\r\n                // dragEvent = event.sourceEvent as MouseEvent;\r\n                mousePosition = getEventPosition(event.sourceEvent, containerBounds);\r\n                updateNodes(pointerPos, event.sourceEvent);\r\n            }\r\n        })\r\n            .on('end', (event) => {\r\n            if (!dragStarted || abortDrag) {\r\n                return;\r\n            }\r\n            autoPanStarted = false;\r\n            dragStarted = false;\r\n            cancelAnimationFrame(autoPanId);\r\n            if (dragItems.size > 0) {\r\n                const { nodeLookup, updateNodePositions, onNodeDragStop, onSelectionDragStop } = getStoreItems();\r\n                updateNodePositions(dragItems, false);\r\n                if (onDragStop || onNodeDragStop || (!nodeId && onSelectionDragStop)) {\r\n                    const [currentNode, currentNodes] = getEventHandlerParams({\r\n                        nodeId,\r\n                        dragItems,\r\n                        nodeLookup,\r\n                        dragging: false,\r\n                    });\r\n                    onDragStop?.(event.sourceEvent, dragItems, currentNode, currentNodes);\r\n                    onNodeDragStop?.(event.sourceEvent, currentNode, currentNodes);\r\n                    if (!nodeId) {\r\n                        onSelectionDragStop?.(event.sourceEvent, currentNodes);\r\n                    }\r\n                }\r\n            }\r\n        })\r\n            .filter((event) => {\r\n            const target = event.target;\r\n            const isDraggable = !event.button &&\r\n                (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, domNode)) &&\r\n                (!handleSelector || hasSelector(target, handleSelector, domNode));\r\n            return isDraggable;\r\n        });\r\n        d3Selection.call(d3DragInstance);\r\n    }\r\n    function destroy() {\r\n        d3Selection?.on('.drag', null);\r\n    }\r\n    return {\r\n        update,\r\n        destroy,\r\n    };\r\n}\r\n\r\nfunction getNodesWithinDistance(position, nodeLookup, distance) {\r\n    const nodes = [];\r\n    const rect = {\r\n        x: position.x - distance,\r\n        y: position.y - distance,\r\n        width: distance * 2,\r\n        height: distance * 2,\r\n    };\r\n    for (const node of nodeLookup.values()) {\r\n        if (getOverlappingArea(rect, nodeToRect(node)) > 0) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n/*\r\n * this distance is used for the area around the user pointer\r\n * while doing a connection for finding the closest nodes\r\n */\r\nconst ADDITIONAL_DISTANCE = 250;\r\nfunction getClosestHandle(position, connectionRadius, nodeLookup, fromHandle) {\r\n    let closestHandles = [];\r\n    let minDistance = Infinity;\r\n    const closeNodes = getNodesWithinDistance(position, nodeLookup, connectionRadius + ADDITIONAL_DISTANCE);\r\n    for (const node of closeNodes) {\r\n        const allHandles = [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\r\n        for (const handle of allHandles) {\r\n            // if the handle is the same as the fromHandle we skip it\r\n            if (fromHandle.nodeId === handle.nodeId && fromHandle.type === handle.type && fromHandle.id === handle.id) {\r\n                continue;\r\n            }\r\n            // determine absolute position of the handle\r\n            const { x, y } = getHandlePosition(node, handle, handle.position, true);\r\n            const distance = Math.sqrt(Math.pow(x - position.x, 2) + Math.pow(y - position.y, 2));\r\n            if (distance > connectionRadius) {\r\n                continue;\r\n            }\r\n            if (distance < minDistance) {\r\n                closestHandles = [{ ...handle, x, y }];\r\n                minDistance = distance;\r\n            }\r\n            else if (distance === minDistance) {\r\n                // when multiple handles are on the same distance we collect all of them\r\n                closestHandles.push({ ...handle, x, y });\r\n            }\r\n        }\r\n    }\r\n    if (!closestHandles.length) {\r\n        return null;\r\n    }\r\n    // when multiple handles overlay each other we prefer the opposite handle\r\n    if (closestHandles.length > 1) {\r\n        const oppositeHandleType = fromHandle.type === 'source' ? 'target' : 'source';\r\n        return closestHandles.find((handle) => handle.type === oppositeHandleType) ?? closestHandles[0];\r\n    }\r\n    return closestHandles[0];\r\n}\r\nfunction getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode, withAbsolutePosition = false) {\r\n    const node = nodeLookup.get(nodeId);\r\n    if (!node) {\r\n        return null;\r\n    }\r\n    const handles = connectionMode === 'strict'\r\n        ? node.internals.handleBounds?.[handleType]\r\n        : [...(node.internals.handleBounds?.source ?? []), ...(node.internals.handleBounds?.target ?? [])];\r\n    const handle = (handleId ? handles?.find((h) => h.id === handleId) : handles?.[0]) ?? null;\r\n    return handle && withAbsolutePosition\r\n        ? { ...handle, ...getHandlePosition(node, handle, handle.position, true) }\r\n        : handle;\r\n}\r\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\r\n    if (edgeUpdaterType) {\r\n        return edgeUpdaterType;\r\n    }\r\n    else if (handleDomNode?.classList.contains('target')) {\r\n        return 'target';\r\n    }\r\n    else if (handleDomNode?.classList.contains('source')) {\r\n        return 'source';\r\n    }\r\n    return null;\r\n}\r\nfunction isConnectionValid(isInsideConnectionRadius, isHandleValid) {\r\n    let isValid = null;\r\n    if (isHandleValid) {\r\n        isValid = true;\r\n    }\r\n    else if (isInsideConnectionRadius && !isHandleValid) {\r\n        isValid = false;\r\n    }\r\n    return isValid;\r\n}\r\n\r\nconst alwaysValid = () => true;\r\nfunction onPointerDown(event, { connectionMode, connectionRadius, handleId, nodeId, edgeUpdaterType, isTarget, domNode, nodeLookup, lib, autoPanOnConnect, flowId, panBy, cancelConnection, onConnectStart, onConnect, onConnectEnd, isValidConnection = alwaysValid, onReconnectEnd, updateConnection, getTransform, getFromHandle, autoPanSpeed, }) {\r\n    // when xyflow is used inside a shadow root we can't use document\r\n    const doc = getHostForElement(event.target);\r\n    let autoPanId = 0;\r\n    let closestHandle;\r\n    const { x, y } = getEventPosition(event);\r\n    const clickedHandle = doc?.elementFromPoint(x, y);\r\n    const handleType = getHandleType(edgeUpdaterType, clickedHandle);\r\n    const containerBounds = domNode?.getBoundingClientRect();\r\n    if (!containerBounds || !handleType) {\r\n        return;\r\n    }\r\n    const fromHandleInternal = getHandle(nodeId, handleType, handleId, nodeLookup, connectionMode);\r\n    if (!fromHandleInternal) {\r\n        return;\r\n    }\r\n    let position = getEventPosition(event, containerBounds);\r\n    let autoPanStarted = false;\r\n    let connection = null;\r\n    let isValid = false;\r\n    let handleDomNode = null;\r\n    // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\r\n    function autoPan() {\r\n        if (!autoPanOnConnect || !containerBounds) {\r\n            return;\r\n        }\r\n        const [x, y] = calcAutoPan(position, containerBounds, autoPanSpeed);\r\n        panBy({ x, y });\r\n        autoPanId = requestAnimationFrame(autoPan);\r\n    }\r\n    // Stays the same for all consecutive pointermove events\r\n    const fromHandle = {\r\n        ...fromHandleInternal,\r\n        nodeId,\r\n        type: handleType,\r\n        position: fromHandleInternal.position,\r\n    };\r\n    const fromNodeInternal = nodeLookup.get(nodeId);\r\n    const from = getHandlePosition(fromNodeInternal, fromHandle, Position.Left, true);\r\n    const newConnection = {\r\n        inProgress: true,\r\n        isValid: null,\r\n        from,\r\n        fromHandle,\r\n        fromPosition: fromHandle.position,\r\n        fromNode: fromNodeInternal,\r\n        to: position,\r\n        toHandle: null,\r\n        toPosition: oppositePosition[fromHandle.position],\r\n        toNode: null,\r\n    };\r\n    updateConnection(newConnection);\r\n    let previousConnection = newConnection;\r\n    onConnectStart?.(event, { nodeId, handleId, handleType });\r\n    function onPointerMove(event) {\r\n        if (!getFromHandle() || !fromHandle) {\r\n            onPointerUp(event);\r\n            return;\r\n        }\r\n        const transform = getTransform();\r\n        position = getEventPosition(event, containerBounds);\r\n        closestHandle = getClosestHandle(pointToRendererPoint(position, transform, false, [1, 1]), connectionRadius, nodeLookup, fromHandle);\r\n        if (!autoPanStarted) {\r\n            autoPan();\r\n            autoPanStarted = true;\r\n        }\r\n        const result = isValidHandle(event, {\r\n            handle: closestHandle,\r\n            connectionMode,\r\n            fromNodeId: nodeId,\r\n            fromHandleId: handleId,\r\n            fromType: isTarget ? 'target' : 'source',\r\n            isValidConnection,\r\n            doc,\r\n            lib,\r\n            flowId,\r\n            nodeLookup,\r\n        });\r\n        handleDomNode = result.handleDomNode;\r\n        connection = result.connection;\r\n        isValid = isConnectionValid(!!closestHandle, result.isValid);\r\n        const newConnection = {\r\n            // from stays the same\r\n            ...previousConnection,\r\n            isValid,\r\n            to: closestHandle && isValid\r\n                ? rendererPointToPoint({ x: closestHandle.x, y: closestHandle.y }, transform)\r\n                : position,\r\n            toHandle: result.toHandle,\r\n            toPosition: isValid && result.toHandle ? result.toHandle.position : oppositePosition[fromHandle.position],\r\n            toNode: result.toHandle ? nodeLookup.get(result.toHandle.nodeId) : null,\r\n        };\r\n        /*\r\n         * we don't want to trigger an update when the connection\r\n         * is snapped to the same handle as before\r\n         */\r\n        if (isValid &&\r\n            closestHandle &&\r\n            previousConnection.toHandle &&\r\n            newConnection.toHandle &&\r\n            previousConnection.toHandle.type === newConnection.toHandle.type &&\r\n            previousConnection.toHandle.nodeId === newConnection.toHandle.nodeId &&\r\n            previousConnection.toHandle.id === newConnection.toHandle.id &&\r\n            previousConnection.to.x === newConnection.to.x &&\r\n            previousConnection.to.y === newConnection.to.y) {\r\n            return;\r\n        }\r\n        updateConnection(newConnection);\r\n        previousConnection = newConnection;\r\n    }\r\n    function onPointerUp(event) {\r\n        if ((closestHandle || handleDomNode) && connection && isValid) {\r\n            onConnect?.(connection);\r\n        }\r\n        /*\r\n         * it's important to get a fresh reference from the store here\r\n         * in order to get the latest state of onConnectEnd\r\n         */\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { inProgress, ...connectionState } = previousConnection;\r\n        const finalConnectionState = {\r\n            ...connectionState,\r\n            toPosition: previousConnection.toHandle ? previousConnection.toPosition : null,\r\n        };\r\n        onConnectEnd?.(event, finalConnectionState);\r\n        if (edgeUpdaterType) {\r\n            onReconnectEnd?.(event, finalConnectionState);\r\n        }\r\n        cancelConnection();\r\n        cancelAnimationFrame(autoPanId);\r\n        autoPanStarted = false;\r\n        isValid = false;\r\n        connection = null;\r\n        handleDomNode = null;\r\n        doc.removeEventListener('mousemove', onPointerMove);\r\n        doc.removeEventListener('mouseup', onPointerUp);\r\n        doc.removeEventListener('touchmove', onPointerMove);\r\n        doc.removeEventListener('touchend', onPointerUp);\r\n    }\r\n    doc.addEventListener('mousemove', onPointerMove);\r\n    doc.addEventListener('mouseup', onPointerUp);\r\n    doc.addEventListener('touchmove', onPointerMove);\r\n    doc.addEventListener('touchend', onPointerUp);\r\n}\r\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\r\nfunction isValidHandle(event, { handle, connectionMode, fromNodeId, fromHandleId, fromType, doc, lib, flowId, isValidConnection = alwaysValid, nodeLookup, }) {\r\n    const isTarget = fromType === 'target';\r\n    const handleDomNode = handle\r\n        ? doc.querySelector(`.${lib}-flow__handle[data-id=\"${flowId}-${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`)\r\n        : null;\r\n    const { x, y } = getEventPosition(event);\r\n    const handleBelow = doc.elementFromPoint(x, y);\r\n    /*\r\n     * we always want to prioritize the handle below the mouse cursor over the closest distance handle,\r\n     * because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\r\n     */\r\n    const handleToCheck = handleBelow?.classList.contains(`${lib}-flow__handle`) ? handleBelow : handleDomNode;\r\n    const result = {\r\n        handleDomNode: handleToCheck,\r\n        isValid: false,\r\n        connection: null,\r\n        toHandle: null,\r\n    };\r\n    if (handleToCheck) {\r\n        const handleType = getHandleType(undefined, handleToCheck);\r\n        const handleNodeId = handleToCheck.getAttribute('data-nodeid');\r\n        const handleId = handleToCheck.getAttribute('data-handleid');\r\n        const connectable = handleToCheck.classList.contains('connectable');\r\n        const connectableEnd = handleToCheck.classList.contains('connectableend');\r\n        if (!handleNodeId || !handleType) {\r\n            return result;\r\n        }\r\n        const connection = {\r\n            source: isTarget ? handleNodeId : fromNodeId,\r\n            sourceHandle: isTarget ? handleId : fromHandleId,\r\n            target: isTarget ? fromNodeId : handleNodeId,\r\n            targetHandle: isTarget ? fromHandleId : handleId,\r\n        };\r\n        result.connection = connection;\r\n        const isConnectable = connectable && connectableEnd;\r\n        // in strict mode we don't allow target to target or source to source connections\r\n        const isValid = isConnectable &&\r\n            (connectionMode === ConnectionMode.Strict\r\n                ? (isTarget && handleType === 'source') || (!isTarget && handleType === 'target')\r\n                : handleNodeId !== fromNodeId || handleId !== fromHandleId);\r\n        result.isValid = isValid && isValidConnection(connection);\r\n        result.toHandle = getHandle(handleNodeId, handleType, handleId, nodeLookup, connectionMode, false);\r\n    }\r\n    return result;\r\n}\r\nconst XYHandle = {\r\n    onPointerDown,\r\n    isValid: isValidHandle,\r\n};\r\n\r\nfunction XYMinimap({ domNode, panZoom, getTransform, getViewScale }) {\r\n    const selection = select(domNode);\r\n    function update({ translateExtent, width, height, zoomStep = 10, pannable = true, zoomable = true, inversePan = false, }) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const zoomHandler = (event) => {\r\n            const transform = getTransform();\r\n            if (event.sourceEvent.type !== 'wheel' || !panZoom) {\r\n                return;\r\n            }\r\n            const pinchDelta = -event.sourceEvent.deltaY *\r\n                (event.sourceEvent.deltaMode === 1 ? 0.05 : event.sourceEvent.deltaMode ? 1 : 0.002) *\r\n                zoomStep;\r\n            const nextZoom = transform[2] * Math.pow(2, pinchDelta);\r\n            panZoom.scaleTo(nextZoom);\r\n        };\r\n        let panStart = [0, 0];\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const panStartHandler = (event) => {\r\n            if (event.sourceEvent.type === 'mousedown' || event.sourceEvent.type === 'touchstart') {\r\n                panStart = [\r\n                    event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\r\n                    event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\r\n                ];\r\n            }\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const panHandler = (event) => {\r\n            const transform = getTransform();\r\n            if ((event.sourceEvent.type !== 'mousemove' && event.sourceEvent.type !== 'touchmove') || !panZoom) {\r\n                return;\r\n            }\r\n            const panCurrent = [\r\n                event.sourceEvent.clientX ?? event.sourceEvent.touches[0].clientX,\r\n                event.sourceEvent.clientY ?? event.sourceEvent.touches[0].clientY,\r\n            ];\r\n            const panDelta = [panCurrent[0] - panStart[0], panCurrent[1] - panStart[1]];\r\n            panStart = panCurrent;\r\n            const moveScale = getViewScale() * Math.max(transform[2], Math.log(transform[2])) * (inversePan ? -1 : 1);\r\n            const position = {\r\n                x: transform[0] - panDelta[0] * moveScale,\r\n                y: transform[1] - panDelta[1] * moveScale,\r\n            };\r\n            const extent = [\r\n                [0, 0],\r\n                [width, height],\r\n            ];\r\n            panZoom.setViewportConstrained({\r\n                x: position.x,\r\n                y: position.y,\r\n                zoom: transform[2],\r\n            }, extent, translateExtent);\r\n        };\r\n        const zoomAndPanHandler = zoom()\r\n            .on('start', panStartHandler)\r\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n            // @ts-ignore\r\n            .on('zoom', pannable ? panHandler : null)\r\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n            // @ts-ignore\r\n            .on('zoom.wheel', zoomable ? zoomHandler : null);\r\n        selection.call(zoomAndPanHandler, {});\r\n    }\r\n    function destroy() {\r\n        selection.on('zoom', null);\r\n    }\r\n    return {\r\n        update,\r\n        destroy,\r\n        pointer,\r\n    };\r\n}\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst viewChanged = (prevViewport, eventViewport) => prevViewport.x !== eventViewport.x || prevViewport.y !== eventViewport.y || prevViewport.zoom !== eventViewport.k;\r\nconst transformToViewport = (transform) => ({\r\n    x: transform.x,\r\n    y: transform.y,\r\n    zoom: transform.k,\r\n});\r\nconst viewportToTransform = ({ x, y, zoom }) => zoomIdentity.translate(x, y).scale(zoom);\r\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\r\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\r\nconst getD3Transition = (selection, duration = 0, onEnd = () => { }) => {\r\n    const hasDuration = typeof duration === 'number' && duration > 0;\r\n    if (!hasDuration) {\r\n        onEnd();\r\n    }\r\n    return hasDuration ? selection.transition().duration(duration).on('end', onEnd) : selection;\r\n};\r\nconst wheelDelta = (event) => {\r\n    const factor = event.ctrlKey && isMacOs() ? 10 : 1;\r\n    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\r\n};\r\n\r\nfunction createPanOnScrollHandler({ zoomPanValues, noWheelClassName, d3Selection, d3Zoom, panOnScrollMode, panOnScrollSpeed, zoomOnPinch, onPanZoomStart, onPanZoom, onPanZoomEnd, }) {\r\n    return (event) => {\r\n        if (isWrappedWithClass(event, noWheelClassName)) {\r\n            return false;\r\n        }\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n        const currentZoom = d3Selection.property('__zoom').k || 1;\r\n        // macos sets ctrlKey=true for pinch gesture on a trackpad\r\n        if (event.ctrlKey && zoomOnPinch) {\r\n            const point = pointer(event);\r\n            const pinchDelta = wheelDelta(event);\r\n            const zoom = currentZoom * Math.pow(2, pinchDelta);\r\n            // @ts-ignore\r\n            d3Zoom.scaleTo(d3Selection, zoom, point, event);\r\n            return;\r\n        }\r\n        /*\r\n         * increase scroll speed in firefox\r\n         * firefox: deltaMode === 1; chrome: deltaMode === 0\r\n         */\r\n        const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\r\n        let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\r\n        let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\r\n        // this enables vertical scrolling with shift + scroll on windows\r\n        if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\r\n            deltaX = event.deltaY * deltaNormalize;\r\n            deltaY = 0;\r\n        }\r\n        d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed, \r\n        // @ts-ignore\r\n        { internal: true });\r\n        const nextViewport = transformToViewport(d3Selection.property('__zoom'));\r\n        clearTimeout(zoomPanValues.panScrollTimeout);\r\n        /*\r\n         * for pan on scroll we need to handle the event calls on our own\r\n         * we can't use the start, zoom and end events from d3-zoom\r\n         * because start and move gets called on every scroll event and not once at the beginning\r\n         */\r\n        if (!zoomPanValues.isPanScrolling) {\r\n            zoomPanValues.isPanScrolling = true;\r\n            onPanZoomStart?.(event, nextViewport);\r\n        }\r\n        if (zoomPanValues.isPanScrolling) {\r\n            onPanZoom?.(event, nextViewport);\r\n            zoomPanValues.panScrollTimeout = setTimeout(() => {\r\n                onPanZoomEnd?.(event, nextViewport);\r\n                zoomPanValues.isPanScrolling = false;\r\n            }, 150);\r\n        }\r\n    };\r\n}\r\nfunction createZoomOnScrollHandler({ noWheelClassName, preventScrolling, d3ZoomHandler }) {\r\n    return function (event, d) {\r\n        // we still want to enable pinch zooming even if preventScrolling is set to false\r\n        const preventZoom = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\r\n        if (preventZoom || isWrappedWithClass(event, noWheelClassName)) {\r\n            return null;\r\n        }\r\n        event.preventDefault();\r\n        d3ZoomHandler.call(this, event, d);\r\n    };\r\n}\r\nfunction createPanZoomStartHandler({ zoomPanValues, onDraggingChange, onPanZoomStart }) {\r\n    return (event) => {\r\n        if (event.sourceEvent?.internal) {\r\n            return;\r\n        }\r\n        const viewport = transformToViewport(event.transform);\r\n        // we need to remember it here, because it's always 0 in the \"zoom\" event\r\n        zoomPanValues.mouseButton = event.sourceEvent?.button || 0;\r\n        zoomPanValues.isZoomingOrPanning = true;\r\n        zoomPanValues.prevViewport = viewport;\r\n        if (event.sourceEvent?.type === 'mousedown') {\r\n            onDraggingChange(true);\r\n        }\r\n        if (onPanZoomStart) {\r\n            onPanZoomStart?.(event.sourceEvent, viewport);\r\n        }\r\n    };\r\n}\r\nfunction createPanZoomHandler({ zoomPanValues, panOnDrag, onPaneContextMenu, onTransformChange, onPanZoom, }) {\r\n    return (event) => {\r\n        zoomPanValues.usedRightMouseButton = !!(onPaneContextMenu && isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0));\r\n        if (!event.sourceEvent?.sync) {\r\n            onTransformChange([event.transform.x, event.transform.y, event.transform.k]);\r\n        }\r\n        if (onPanZoom && !event.sourceEvent?.internal) {\r\n            onPanZoom?.(event.sourceEvent, transformToViewport(event.transform));\r\n        }\r\n    };\r\n}\r\nfunction createPanZoomEndHandler({ zoomPanValues, panOnDrag, panOnScroll, onDraggingChange, onPanZoomEnd, onPaneContextMenu, }) {\r\n    return (event) => {\r\n        if (event.sourceEvent?.internal) {\r\n            return;\r\n        }\r\n        zoomPanValues.isZoomingOrPanning = false;\r\n        if (onPaneContextMenu &&\r\n            isRightClickPan(panOnDrag, zoomPanValues.mouseButton ?? 0) &&\r\n            !zoomPanValues.usedRightMouseButton &&\r\n            event.sourceEvent) {\r\n            onPaneContextMenu(event.sourceEvent);\r\n        }\r\n        zoomPanValues.usedRightMouseButton = false;\r\n        onDraggingChange(false);\r\n        if (onPanZoomEnd && viewChanged(zoomPanValues.prevViewport, event.transform)) {\r\n            const viewport = transformToViewport(event.transform);\r\n            zoomPanValues.prevViewport = viewport;\r\n            clearTimeout(zoomPanValues.timerId);\r\n            zoomPanValues.timerId = setTimeout(() => {\r\n                onPanZoomEnd?.(event.sourceEvent, viewport);\r\n            }, \r\n            // we need a setTimeout for panOnScroll to supress multiple end events fired during scroll\r\n            panOnScroll ? 150 : 0);\r\n        }\r\n    };\r\n}\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nfunction createFilter({ zoomActivationKeyPressed, zoomOnScroll, zoomOnPinch, panOnDrag, panOnScroll, zoomOnDoubleClick, userSelectionActive, noWheelClassName, noPanClassName, lib, }) {\r\n    return (event) => {\r\n        const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\r\n        const pinchZoom = zoomOnPinch && event.ctrlKey;\r\n        if (event.button === 1 &&\r\n            event.type === 'mousedown' &&\r\n            (isWrappedWithClass(event, `${lib}-flow__node`) || isWrappedWithClass(event, `${lib}-flow__edge`))) {\r\n            return true;\r\n        }\r\n        // if all interactions are disabled, we prevent all zoom events\r\n        if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\r\n            return false;\r\n        }\r\n        // during a selection we prevent all other interactions\r\n        if (userSelectionActive) {\r\n            return false;\r\n        }\r\n        // if the target element is inside an element with the nowheel class, we prevent zooming\r\n        if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\r\n            return false;\r\n        }\r\n        // if the target element is inside an element with the nopan class, we prevent panning\r\n        if (isWrappedWithClass(event, noPanClassName) &&\r\n            (event.type !== 'wheel' || (panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed))) {\r\n            return false;\r\n        }\r\n        if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\r\n            return false;\r\n        }\r\n        if (!zoomOnPinch && event.type === 'touchstart' && event.touches?.length > 1) {\r\n            event.preventDefault(); // if you manage to start with 2 touches, we prevent native zoom\r\n            return false;\r\n        }\r\n        // when there is no scroll handling enabled, we prevent all wheel events\r\n        if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\r\n            return false;\r\n        }\r\n        // if the pane is not movable, we prevent dragging it with mousestart or touchstart\r\n        if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\r\n            return false;\r\n        }\r\n        // if the pane is only movable using allowed clicks\r\n        if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\r\n            return false;\r\n        }\r\n        // We only allow right clicks if pan on drag is set to right click\r\n        const buttonAllowed = (Array.isArray(panOnDrag) && panOnDrag.includes(event.button)) || !event.button || event.button <= 1;\r\n        // default filter for d3-zoom\r\n        return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\r\n    };\r\n}\r\n\r\nfunction XYPanZoom({ domNode, minZoom, maxZoom, paneClickDistance, translateExtent, viewport, onPanZoom, onPanZoomStart, onPanZoomEnd, onDraggingChange, }) {\r\n    const zoomPanValues = {\r\n        isZoomingOrPanning: false,\r\n        usedRightMouseButton: false,\r\n        prevViewport: { x: 0, y: 0, zoom: 0 },\r\n        mouseButton: 0,\r\n        timerId: undefined,\r\n        panScrollTimeout: undefined,\r\n        isPanScrolling: false,\r\n    };\r\n    const bbox = domNode.getBoundingClientRect();\r\n    const d3ZoomInstance = zoom()\r\n        .clickDistance(!isNumeric(paneClickDistance) || paneClickDistance < 0 ? 0 : paneClickDistance)\r\n        .scaleExtent([minZoom, maxZoom])\r\n        .translateExtent(translateExtent);\r\n    const d3Selection = select(domNode).call(d3ZoomInstance);\r\n    setViewportConstrained({\r\n        x: viewport.x,\r\n        y: viewport.y,\r\n        zoom: clamp(viewport.zoom, minZoom, maxZoom),\r\n    }, [\r\n        [0, 0],\r\n        [bbox.width, bbox.height],\r\n    ], translateExtent);\r\n    const d3ZoomHandler = d3Selection.on('wheel.zoom');\r\n    const d3DblClickZoomHandler = d3Selection.on('dblclick.zoom');\r\n    d3ZoomInstance.wheelDelta(wheelDelta);\r\n    function setTransform(transform, options) {\r\n        if (d3Selection) {\r\n            return new Promise((resolve) => {\r\n                d3ZoomInstance?.transform(getD3Transition(d3Selection, options?.duration, () => resolve(true)), transform);\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    // public functions\r\n    function update({ noWheelClassName, noPanClassName, onPaneContextMenu, userSelectionActive, panOnScroll, panOnDrag, panOnScrollMode, panOnScrollSpeed, preventScrolling, zoomOnPinch, zoomOnScroll, zoomOnDoubleClick, zoomActivationKeyPressed, lib, onTransformChange, }) {\r\n        if (userSelectionActive && !zoomPanValues.isZoomingOrPanning) {\r\n            destroy();\r\n        }\r\n        const isPanOnScroll = panOnScroll && !zoomActivationKeyPressed && !userSelectionActive;\r\n        const wheelHandler = isPanOnScroll\r\n            ? createPanOnScrollHandler({\r\n                zoomPanValues,\r\n                noWheelClassName,\r\n                d3Selection,\r\n                d3Zoom: d3ZoomInstance,\r\n                panOnScrollMode,\r\n                panOnScrollSpeed,\r\n                zoomOnPinch,\r\n                onPanZoomStart,\r\n                onPanZoom,\r\n                onPanZoomEnd,\r\n            })\r\n            : createZoomOnScrollHandler({\r\n                noWheelClassName,\r\n                preventScrolling,\r\n                d3ZoomHandler,\r\n            });\r\n        d3Selection.on('wheel.zoom', wheelHandler, { passive: false });\r\n        if (!userSelectionActive) {\r\n            // pan zoom start\r\n            const startHandler = createPanZoomStartHandler({\r\n                zoomPanValues,\r\n                onDraggingChange,\r\n                onPanZoomStart,\r\n            });\r\n            d3ZoomInstance.on('start', startHandler);\r\n            // pan zoom\r\n            const panZoomHandler = createPanZoomHandler({\r\n                zoomPanValues,\r\n                panOnDrag,\r\n                onPaneContextMenu: !!onPaneContextMenu,\r\n                onPanZoom,\r\n                onTransformChange,\r\n            });\r\n            d3ZoomInstance.on('zoom', panZoomHandler);\r\n            // pan zoom end\r\n            const panZoomEndHandler = createPanZoomEndHandler({\r\n                zoomPanValues,\r\n                panOnDrag,\r\n                panOnScroll,\r\n                onPaneContextMenu,\r\n                onPanZoomEnd,\r\n                onDraggingChange,\r\n            });\r\n            d3ZoomInstance.on('end', panZoomEndHandler);\r\n        }\r\n        const filter = createFilter({\r\n            zoomActivationKeyPressed,\r\n            panOnDrag,\r\n            zoomOnScroll,\r\n            panOnScroll,\r\n            zoomOnDoubleClick,\r\n            zoomOnPinch,\r\n            userSelectionActive,\r\n            noPanClassName,\r\n            noWheelClassName,\r\n            lib,\r\n        });\r\n        d3ZoomInstance.filter(filter);\r\n        /*\r\n         * We cannot add zoomOnDoubleClick to the filter above because\r\n         * double tapping on touch screens circumvents the filter and\r\n         * dblclick.zoom is fired on the selection directly\r\n         */\r\n        if (zoomOnDoubleClick) {\r\n            d3Selection.on('dblclick.zoom', d3DblClickZoomHandler);\r\n        }\r\n        else {\r\n            d3Selection.on('dblclick.zoom', null);\r\n        }\r\n    }\r\n    function destroy() {\r\n        d3ZoomInstance.on('zoom', null);\r\n    }\r\n    async function setViewportConstrained(viewport, extent, translateExtent) {\r\n        const nextTransform = viewportToTransform(viewport);\r\n        const contrainedTransform = d3ZoomInstance?.constrain()(nextTransform, extent, translateExtent);\r\n        if (contrainedTransform) {\r\n            await setTransform(contrainedTransform);\r\n        }\r\n        return new Promise((resolve) => resolve(contrainedTransform));\r\n    }\r\n    async function setViewport(viewport, options) {\r\n        const nextTransform = viewportToTransform(viewport);\r\n        await setTransform(nextTransform, options);\r\n        return new Promise((resolve) => resolve(nextTransform));\r\n    }\r\n    function syncViewport(viewport) {\r\n        if (d3Selection) {\r\n            const nextTransform = viewportToTransform(viewport);\r\n            const currentTransform = d3Selection.property('__zoom');\r\n            if (currentTransform.k !== viewport.zoom ||\r\n                currentTransform.x !== viewport.x ||\r\n                currentTransform.y !== viewport.y) {\r\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n                // @ts-ignore\r\n                d3ZoomInstance?.transform(d3Selection, nextTransform, null, { sync: true });\r\n            }\r\n        }\r\n    }\r\n    function getViewport() {\r\n        const transform = d3Selection ? zoomTransform(d3Selection.node()) : { x: 0, y: 0, k: 1 };\r\n        return { x: transform.x, y: transform.y, zoom: transform.k };\r\n    }\r\n    function scaleTo(zoom, options) {\r\n        if (d3Selection) {\r\n            return new Promise((resolve) => {\r\n                d3ZoomInstance?.scaleTo(getD3Transition(d3Selection, options?.duration, () => resolve(true)), zoom);\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    function scaleBy(factor, options) {\r\n        if (d3Selection) {\r\n            return new Promise((resolve) => {\r\n                d3ZoomInstance?.scaleBy(getD3Transition(d3Selection, options?.duration, () => resolve(true)), factor);\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    function setScaleExtent(scaleExtent) {\r\n        d3ZoomInstance?.scaleExtent(scaleExtent);\r\n    }\r\n    function setTranslateExtent(translateExtent) {\r\n        d3ZoomInstance?.translateExtent(translateExtent);\r\n    }\r\n    function setClickDistance(distance) {\r\n        const validDistance = !isNumeric(distance) || distance < 0 ? 0 : distance;\r\n        d3ZoomInstance?.clickDistance(validDistance);\r\n    }\r\n    return {\r\n        update,\r\n        destroy,\r\n        setViewport,\r\n        setViewportConstrained,\r\n        getViewport,\r\n        scaleTo,\r\n        scaleBy,\r\n        setScaleExtent,\r\n        setTranslateExtent,\r\n        syncViewport,\r\n        setClickDistance,\r\n    };\r\n}\r\n\r\n/**\r\n * Used to determine the variant of the resize control\r\n *\r\n * @public\r\n */\r\nvar ResizeControlVariant;\r\n(function (ResizeControlVariant) {\r\n    ResizeControlVariant[\"Line\"] = \"line\";\r\n    ResizeControlVariant[\"Handle\"] = \"handle\";\r\n})(ResizeControlVariant || (ResizeControlVariant = {}));\r\nconst XY_RESIZER_HANDLE_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\r\nconst XY_RESIZER_LINE_POSITIONS = ['top', 'right', 'bottom', 'left'];\r\n\r\n/**\r\n * Get all connecting edges for a given set of nodes\r\n * @param width - new width of the node\r\n * @param prevWidth - previous width of the node\r\n * @param height - new height of the node\r\n * @param prevHeight - previous height of the node\r\n * @param affectsX - whether to invert the resize direction for the x axis\r\n * @param affectsY - whether to invert the resize direction for the y axis\r\n * @returns array of two numbers representing the direction of the resize for each axis, 0 = no change, 1 = increase, -1 = decrease\r\n */\r\nfunction getResizeDirection({ width, prevWidth, height, prevHeight, affectsX, affectsY, }) {\r\n    const deltaWidth = width - prevWidth;\r\n    const deltaHeight = height - prevHeight;\r\n    const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\r\n    if (deltaWidth && affectsX) {\r\n        direction[0] = direction[0] * -1;\r\n    }\r\n    if (deltaHeight && affectsY) {\r\n        direction[1] = direction[1] * -1;\r\n    }\r\n    return direction;\r\n}\r\n/**\r\n * Parses the control position that is being dragged to dimensions that are being resized\r\n * @param controlPosition - position of the control that is being dragged\r\n * @returns isHorizontal, isVertical, affectsX, affectsY,\r\n */\r\nfunction getControlDirection(controlPosition) {\r\n    const isHorizontal = controlPosition.includes('right') || controlPosition.includes('left');\r\n    const isVertical = controlPosition.includes('bottom') || controlPosition.includes('top');\r\n    const affectsX = controlPosition.includes('left');\r\n    const affectsY = controlPosition.includes('top');\r\n    return {\r\n        isHorizontal,\r\n        isVertical,\r\n        affectsX,\r\n        affectsY,\r\n    };\r\n}\r\nfunction getLowerExtentClamp(lowerExtent, lowerBound) {\r\n    return Math.max(0, lowerBound - lowerExtent);\r\n}\r\nfunction getUpperExtentClamp(upperExtent, upperBound) {\r\n    return Math.max(0, upperExtent - upperBound);\r\n}\r\nfunction getSizeClamp(size, minSize, maxSize) {\r\n    return Math.max(0, minSize - size, size - maxSize);\r\n}\r\nfunction xor(a, b) {\r\n    return a ? !b : b;\r\n}\r\n/**\r\n * Calculates new width & height and x & y of node after resize based on pointer position\r\n * @description - Buckle up, this is a chunky one... If you want to determine the new dimensions of a node after a resize,\r\n * you have to account for all possible restrictions: min/max width/height of the node, the maximum extent the node is allowed\r\n * to move in (in this case: resize into) determined by the parent node, the minimal extent determined by child nodes\r\n * with expandParent or extent: 'parent' set and oh yeah, these things also have to work with keepAspectRatio!\r\n * The way this is done is by determining how much each of these restricting actually restricts the resize and then applying the\r\n * strongest restriction. Because the resize affects x, y and width, height and width, height of a opposing side with keepAspectRatio,\r\n * the resize amount is always kept in distX & distY amount (the distance in mouse movement)\r\n * Instead of clamping each value, we first calculate the biggest 'clamp' (for the lack of a better name) and then apply it to all values.\r\n * To complicate things nodeOrigin has to be taken into account as well. This is done by offsetting the nodes as if their origin is [0, 0],\r\n * then calculating the restrictions as usual\r\n * @param startValues - starting values of resize\r\n * @param controlDirection - dimensions affected by the resize\r\n * @param pointerPosition - the current pointer position corrected for snapping\r\n * @param boundaries - minimum and maximum dimensions of the node\r\n * @param keepAspectRatio - prevent changes of asprect ratio\r\n * @returns x, y, width and height of the node after resize\r\n */\r\nfunction getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, extent, childExtent) {\r\n    let { affectsX, affectsY } = controlDirection;\r\n    const { isHorizontal, isVertical } = controlDirection;\r\n    const isDiagonal = isHorizontal && isVertical;\r\n    const { xSnapped, ySnapped } = pointerPosition;\r\n    const { minWidth, maxWidth, minHeight, maxHeight } = boundaries;\r\n    const { x: startX, y: startY, width: startWidth, height: startHeight, aspectRatio } = startValues;\r\n    let distX = Math.floor(isHorizontal ? xSnapped - startValues.pointerX : 0);\r\n    let distY = Math.floor(isVertical ? ySnapped - startValues.pointerY : 0);\r\n    const newWidth = startWidth + (affectsX ? -distX : distX);\r\n    const newHeight = startHeight + (affectsY ? -distY : distY);\r\n    const originOffsetX = -nodeOrigin[0] * startWidth;\r\n    const originOffsetY = -nodeOrigin[1] * startHeight;\r\n    // Check if maxWidth, minWWidth, maxHeight, minHeight are restricting the resize\r\n    let clampX = getSizeClamp(newWidth, minWidth, maxWidth);\r\n    let clampY = getSizeClamp(newHeight, minHeight, maxHeight);\r\n    // Check if extent is restricting the resize\r\n    if (extent) {\r\n        let xExtentClamp = 0;\r\n        let yExtentClamp = 0;\r\n        if (affectsX && distX < 0) {\r\n            xExtentClamp = getLowerExtentClamp(startX + distX + originOffsetX, extent[0][0]);\r\n        }\r\n        else if (!affectsX && distX > 0) {\r\n            xExtentClamp = getUpperExtentClamp(startX + newWidth + originOffsetX, extent[1][0]);\r\n        }\r\n        if (affectsY && distY < 0) {\r\n            yExtentClamp = getLowerExtentClamp(startY + distY + originOffsetY, extent[0][1]);\r\n        }\r\n        else if (!affectsY && distY > 0) {\r\n            yExtentClamp = getUpperExtentClamp(startY + newHeight + originOffsetY, extent[1][1]);\r\n        }\r\n        clampX = Math.max(clampX, xExtentClamp);\r\n        clampY = Math.max(clampY, yExtentClamp);\r\n    }\r\n    // Check if the child extent is restricting the resize\r\n    if (childExtent) {\r\n        let xExtentClamp = 0;\r\n        let yExtentClamp = 0;\r\n        if (affectsX && distX > 0) {\r\n            xExtentClamp = getUpperExtentClamp(startX + distX, childExtent[0][0]);\r\n        }\r\n        else if (!affectsX && distX < 0) {\r\n            xExtentClamp = getLowerExtentClamp(startX + newWidth, childExtent[1][0]);\r\n        }\r\n        if (affectsY && distY > 0) {\r\n            yExtentClamp = getUpperExtentClamp(startY + distY, childExtent[0][1]);\r\n        }\r\n        else if (!affectsY && distY < 0) {\r\n            yExtentClamp = getLowerExtentClamp(startY + newHeight, childExtent[1][1]);\r\n        }\r\n        clampX = Math.max(clampX, xExtentClamp);\r\n        clampY = Math.max(clampY, yExtentClamp);\r\n    }\r\n    // Check if the aspect ratio resizing of the other side is restricting the resize\r\n    if (keepAspectRatio) {\r\n        if (isHorizontal) {\r\n            // Check if the max dimensions might be restricting the resize\r\n            const aspectHeightClamp = getSizeClamp(newWidth / aspectRatio, minHeight, maxHeight) * aspectRatio;\r\n            clampX = Math.max(clampX, aspectHeightClamp);\r\n            // Check if the extent is restricting the resize\r\n            if (extent) {\r\n                let aspectExtentClamp = 0;\r\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\r\n                    aspectExtentClamp =\r\n                        getUpperExtentClamp(startY + originOffsetY + newWidth / aspectRatio, extent[1][1]) * aspectRatio;\r\n                }\r\n                else {\r\n                    aspectExtentClamp =\r\n                        getLowerExtentClamp(startY + originOffsetY + (affectsX ? distX : -distX) / aspectRatio, extent[0][1]) *\r\n                            aspectRatio;\r\n                }\r\n                clampX = Math.max(clampX, aspectExtentClamp);\r\n            }\r\n            // Check if the child extent is restricting the resize\r\n            if (childExtent) {\r\n                let aspectExtentClamp = 0;\r\n                if ((!affectsX && !affectsY) || (affectsX && !affectsY && isDiagonal)) {\r\n                    aspectExtentClamp = getLowerExtentClamp(startY + newWidth / aspectRatio, childExtent[1][1]) * aspectRatio;\r\n                }\r\n                else {\r\n                    aspectExtentClamp =\r\n                        getUpperExtentClamp(startY + (affectsX ? distX : -distX) / aspectRatio, childExtent[0][1]) * aspectRatio;\r\n                }\r\n                clampX = Math.max(clampX, aspectExtentClamp);\r\n            }\r\n        }\r\n        // Do the same thing for vertical resizing\r\n        if (isVertical) {\r\n            const aspectWidthClamp = getSizeClamp(newHeight * aspectRatio, minWidth, maxWidth) / aspectRatio;\r\n            clampY = Math.max(clampY, aspectWidthClamp);\r\n            if (extent) {\r\n                let aspectExtentClamp = 0;\r\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\r\n                    aspectExtentClamp =\r\n                        getUpperExtentClamp(startX + newHeight * aspectRatio + originOffsetX, extent[1][0]) / aspectRatio;\r\n                }\r\n                else {\r\n                    aspectExtentClamp =\r\n                        getLowerExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio + originOffsetX, extent[0][0]) /\r\n                            aspectRatio;\r\n                }\r\n                clampY = Math.max(clampY, aspectExtentClamp);\r\n            }\r\n            if (childExtent) {\r\n                let aspectExtentClamp = 0;\r\n                if ((!affectsX && !affectsY) || (affectsY && !affectsX && isDiagonal)) {\r\n                    aspectExtentClamp = getLowerExtentClamp(startX + newHeight * aspectRatio, childExtent[1][0]) / aspectRatio;\r\n                }\r\n                else {\r\n                    aspectExtentClamp =\r\n                        getUpperExtentClamp(startX + (affectsY ? distY : -distY) * aspectRatio, childExtent[0][0]) / aspectRatio;\r\n                }\r\n                clampY = Math.max(clampY, aspectExtentClamp);\r\n            }\r\n        }\r\n    }\r\n    distY = distY + (distY < 0 ? clampY : -clampY);\r\n    distX = distX + (distX < 0 ? clampX : -clampX);\r\n    if (keepAspectRatio) {\r\n        if (isDiagonal) {\r\n            if (newWidth > newHeight * aspectRatio) {\r\n                distY = (xor(affectsX, affectsY) ? -distX : distX) / aspectRatio;\r\n            }\r\n            else {\r\n                distX = (xor(affectsX, affectsY) ? -distY : distY) * aspectRatio;\r\n            }\r\n        }\r\n        else {\r\n            if (isHorizontal) {\r\n                distY = distX / aspectRatio;\r\n                affectsY = affectsX;\r\n            }\r\n            else {\r\n                distX = distY * aspectRatio;\r\n                affectsX = affectsY;\r\n            }\r\n        }\r\n    }\r\n    const x = affectsX ? startX + distX : startX;\r\n    const y = affectsY ? startY + distY : startY;\r\n    return {\r\n        width: startWidth + (affectsX ? -distX : distX),\r\n        height: startHeight + (affectsY ? -distY : distY),\r\n        x: nodeOrigin[0] * distX * (!affectsX ? 1 : -1) + x,\r\n        y: nodeOrigin[1] * distY * (!affectsY ? 1 : -1) + y,\r\n    };\r\n}\r\n\r\nconst initPrevValues = { width: 0, height: 0, x: 0, y: 0 };\r\nconst initStartValues = {\r\n    ...initPrevValues,\r\n    pointerX: 0,\r\n    pointerY: 0,\r\n    aspectRatio: 1,\r\n};\r\nfunction nodeToParentExtent(node) {\r\n    return [\r\n        [0, 0],\r\n        [node.measured.width, node.measured.height],\r\n    ];\r\n}\r\nfunction nodeToChildExtent(child, parent, nodeOrigin) {\r\n    const x = parent.position.x + child.position.x;\r\n    const y = parent.position.y + child.position.y;\r\n    const width = child.measured.width ?? 0;\r\n    const height = child.measured.height ?? 0;\r\n    const originOffsetX = nodeOrigin[0] * width;\r\n    const originOffsetY = nodeOrigin[1] * height;\r\n    return [\r\n        [x - originOffsetX, y - originOffsetY],\r\n        [x + width - originOffsetX, y + height - originOffsetY],\r\n    ];\r\n}\r\nfunction XYResizer({ domNode, nodeId, getStoreItems, onChange, onEnd }) {\r\n    const selection = select(domNode);\r\n    function update({ controlPosition, boundaries, keepAspectRatio, onResizeStart, onResize, onResizeEnd, shouldResize, }) {\r\n        let prevValues = { ...initPrevValues };\r\n        let startValues = { ...initStartValues };\r\n        const controlDirection = getControlDirection(controlPosition);\r\n        let node = undefined;\r\n        let containerBounds = null;\r\n        let childNodes = [];\r\n        let parentNode = undefined; // Needed to fix expandParent\r\n        let parentExtent = undefined;\r\n        let childExtent = undefined;\r\n        const dragHandler = drag()\r\n            .on('start', (event) => {\r\n            const { nodeLookup, transform, snapGrid, snapToGrid, nodeOrigin, paneDomNode } = getStoreItems();\r\n            node = nodeLookup.get(nodeId);\r\n            if (!node) {\r\n                return;\r\n            }\r\n            containerBounds = paneDomNode?.getBoundingClientRect() ?? null;\r\n            const { xSnapped, ySnapped } = getPointerPosition(event.sourceEvent, {\r\n                transform,\r\n                snapGrid,\r\n                snapToGrid,\r\n                containerBounds,\r\n            });\r\n            prevValues = {\r\n                width: node.measured.width ?? 0,\r\n                height: node.measured.height ?? 0,\r\n                x: node.position.x ?? 0,\r\n                y: node.position.y ?? 0,\r\n            };\r\n            startValues = {\r\n                ...prevValues,\r\n                pointerX: xSnapped,\r\n                pointerY: ySnapped,\r\n                aspectRatio: prevValues.width / prevValues.height,\r\n            };\r\n            parentNode = undefined;\r\n            if (node.parentId && (node.extent === 'parent' || node.expandParent)) {\r\n                parentNode = nodeLookup.get(node.parentId);\r\n                parentExtent = parentNode && node.extent === 'parent' ? nodeToParentExtent(parentNode) : undefined;\r\n            }\r\n            /*\r\n             * Collect all child nodes to correct their relative positions when top/left changes\r\n             * Determine largest minimal extent the parent node is allowed to resize to\r\n             */\r\n            childNodes = [];\r\n            childExtent = undefined;\r\n            for (const [childId, child] of nodeLookup) {\r\n                if (child.parentId === nodeId) {\r\n                    childNodes.push({\r\n                        id: childId,\r\n                        position: { ...child.position },\r\n                        extent: child.extent,\r\n                    });\r\n                    if (child.extent === 'parent' || child.expandParent) {\r\n                        const extent = nodeToChildExtent(child, node, child.origin ?? nodeOrigin);\r\n                        if (childExtent) {\r\n                            childExtent = [\r\n                                [Math.min(extent[0][0], childExtent[0][0]), Math.min(extent[0][1], childExtent[0][1])],\r\n                                [Math.max(extent[1][0], childExtent[1][0]), Math.max(extent[1][1], childExtent[1][1])],\r\n                            ];\r\n                        }\r\n                        else {\r\n                            childExtent = extent;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            onResizeStart?.(event, { ...prevValues });\r\n        })\r\n            .on('drag', (event) => {\r\n            const { transform, snapGrid, snapToGrid, nodeOrigin: storeNodeOrigin } = getStoreItems();\r\n            const pointerPosition = getPointerPosition(event.sourceEvent, {\r\n                transform,\r\n                snapGrid,\r\n                snapToGrid,\r\n                containerBounds,\r\n            });\r\n            const childChanges = [];\r\n            if (!node) {\r\n                return;\r\n            }\r\n            const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues;\r\n            const change = {};\r\n            const nodeOrigin = node.origin ?? storeNodeOrigin;\r\n            const { width, height, x, y } = getDimensionsAfterResize(startValues, controlDirection, pointerPosition, boundaries, keepAspectRatio, nodeOrigin, parentExtent, childExtent);\r\n            const isWidthChange = width !== prevWidth;\r\n            const isHeightChange = height !== prevHeight;\r\n            const isXPosChange = x !== prevX && isWidthChange;\r\n            const isYPosChange = y !== prevY && isHeightChange;\r\n            if (!isXPosChange && !isYPosChange && !isWidthChange && !isHeightChange) {\r\n                return;\r\n            }\r\n            if (isXPosChange || isYPosChange || nodeOrigin[0] === 1 || nodeOrigin[1] === 1) {\r\n                change.x = isXPosChange ? x : prevValues.x;\r\n                change.y = isYPosChange ? y : prevValues.y;\r\n                prevValues.x = change.x;\r\n                prevValues.y = change.y;\r\n                /*\r\n                 * when top/left changes, correct the relative positions of child nodes\r\n                 * so that they stay in the same position\r\n                 */\r\n                if (childNodes.length > 0) {\r\n                    const xChange = x - prevX;\r\n                    const yChange = y - prevY;\r\n                    for (const childNode of childNodes) {\r\n                        childNode.position = {\r\n                            x: childNode.position.x - xChange + nodeOrigin[0] * (width - prevWidth),\r\n                            y: childNode.position.y - yChange + nodeOrigin[1] * (height - prevHeight),\r\n                        };\r\n                        childChanges.push(childNode);\r\n                    }\r\n                }\r\n            }\r\n            if (isWidthChange || isHeightChange) {\r\n                change.width = isWidthChange ? width : prevValues.width;\r\n                change.height = isHeightChange ? height : prevValues.height;\r\n                prevValues.width = change.width;\r\n                prevValues.height = change.height;\r\n            }\r\n            // Fix expandParent when resizing from top/left\r\n            if (parentNode && node.expandParent) {\r\n                const xLimit = nodeOrigin[0] * (change.width ?? 0);\r\n                if (change.x && change.x < xLimit) {\r\n                    prevValues.x = xLimit;\r\n                    startValues.x = startValues.x - (change.x - xLimit);\r\n                }\r\n                const yLimit = nodeOrigin[1] * (change.height ?? 0);\r\n                if (change.y && change.y < yLimit) {\r\n                    prevValues.y = yLimit;\r\n                    startValues.y = startValues.y - (change.y - yLimit);\r\n                }\r\n            }\r\n            const direction = getResizeDirection({\r\n                width: prevValues.width,\r\n                prevWidth,\r\n                height: prevValues.height,\r\n                prevHeight,\r\n                affectsX: controlDirection.affectsX,\r\n                affectsY: controlDirection.affectsY,\r\n            });\r\n            const nextValues = { ...prevValues, direction };\r\n            const callResize = shouldResize?.(event, nextValues);\r\n            if (callResize === false) {\r\n                return;\r\n            }\r\n            onResize?.(event, nextValues);\r\n            onChange(change, childChanges);\r\n        })\r\n            .on('end', (event) => {\r\n            onResizeEnd?.(event, { ...prevValues });\r\n            onEnd?.();\r\n        });\r\n        selection.call(dragHandler);\r\n    }\r\n    function destroy() {\r\n        selection.on('.drag', null);\r\n    }\r\n    return {\r\n        update,\r\n        destroy,\r\n    };\r\n}\r\n\r\nexport { ConnectionLineType, ConnectionMode, MarkerType, PanOnScrollMode, Position, ResizeControlVariant, SelectionMode, XYDrag, XYHandle, XYMinimap, XYPanZoom, XYResizer, XY_RESIZER_HANDLE_POSITIONS, XY_RESIZER_LINE_POSITIONS, addEdge, adoptUserNodes, areConnectionMapsEqual, areSetsEqual, boxToRect, calcAutoPan, calculateNodePosition, clamp, clampPosition, clampPositionToParent, createMarkerIds, devWarn, elementSelectionKeys, errorMessages, evaluateAbsolutePosition, fitView, getBezierEdgeCenter, getBezierPath, getBoundsOfBoxes, getBoundsOfRects, getConnectedEdges, getConnectionStatus, getDimensions, getEdgeCenter, getEdgePosition, getElementsToRemove, getElevatedEdgeZIndex, getEventPosition, getFitViewNodes, getHandleBounds, getHandlePosition, getHostForElement, getIncomers, getInternalNodesBounds, getMarkerId, getNodeDimensions, getNodePositionWithOrigin, getNodeToolbarTransform, getNodesBounds, getNodesInside, getOutgoers, getOverlappingArea, getPointerPosition, getSmoothStepPath, getStraightPath, getViewportForBounds, handleConnectionChange, handleExpandParent, infiniteExtent, initialConnection, isCoordinateExtent, isEdgeBase, isEdgeVisible, isInputDOMNode, isInternalNodeBase, isMacOs, isMouseEvent, isNodeBase, isNumeric, isRectObject, nodeHasDimensions, nodeToBox, nodeToRect, oppositePosition, panBy, pointToRendererPoint, reconnectEdge, rectToBox, rendererPointToPoint, shallowNodeData, snapPosition, updateAbsolutePositions, updateConnectionLookup, updateNodeInternals };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}