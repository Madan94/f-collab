{"ast":null,"code":"// import React, { useState, useCallback } from \"react\";\n// import {\n//     ReactFlow,\n//   ReactFlowProvider,\n//   Controls,\n//   MiniMap,\n//   Background,\n//   addEdge,\n//   useNodesState,\n//   useEdgesState,\n// } from \"@xyflow/react\";\n// import \"@xyflow/react/dist/style.css\";\n// import { v4 as uuidv4 } from \"uuid\";\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// export const Editor = () => {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [selectedNode, setSelectedNode] = useState(null);\n\n//   const addShape = (shape) => {\n//     const newNode = {\n//       id: uuidv4(),\n//       type: \"default\",\n//       data: { label: \"Edit Text\" },\n//       position: { x: Math.random() * 400, y: Math.random() * 400 },\n//       style: shapeStyles[shape],\n//     };\n//     setNodes((nds) => [...nds, newNode]);\n//   };\n\n//   const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n\n//   const handleTextChange = (event) => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, label: event.target.value } }\n//           : node\n//       )\n//     );\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\", width: \"100%\" }}>\n//       <div style={{ position: \"absolute\", zIndex: 10, top: 10, left: 10 }}>\n//         {[\"Rectangle\", \"Circle\", \"Triangle\", \"Diamond\", \"Hexagon\", \"Star\", \"Pentagon\", \"Parallelogram\", \"Trapezoid\", \"Ellipse\"].map((shape) => (\n//           <button key={shape} style={{ marginRight: 5 }} onClick={() => addShape(shape)}>\n//             {shape}\n//           </button>\n//         ))}\n//         <button style={{ marginRight: 5 }} onClick={() => console.log(\"Download Logic\")}>Download</button>\n//       </div>\n//       {selectedNode && (\n//         <input\n//           style={{ position: \"absolute\", top: 50, left: 10, zIndex: 10 }}\n//           value={nodes.find((node) => node.id === selectedNode)?.data?.label || \"\"}\n//           onChange={handleTextChange}\n//         />\n//       )}\n//       <ReactFlowProvider>\n//         <div style={{ height: \"100%\", width: \"100%\" }}>\n//           <ReactFlow\n//             nodes={nodes}\n//             edges={edges}\n//             onNodesChange={onNodesChange}\n//             onEdgesChange={onEdgesChange}\n//             onConnect={onConnect}\n//             onNodeClick={(_, node) => setSelectedNode(node.id)}\n//             fitView\n//           >\n//             <MiniMap />\n//             <Controls />\n//             <Background color=\"#aaa\" gap={16} />\n//           </ReactFlow>\n//         </div>\n//       </ReactFlowProvider>\n//     </div>\n//   );\n// };\n\n// const shapeStyles = {\n//   Rectangle: { width: 100, height: 60, background: \"#F4A261\" },\n//   Circle: { width: 60, height: 60, borderRadius: \"50%\", background: \"#2A9D8F\" },\n//   Triangle: { width: 0, height: 0, borderLeft: \"40px solid transparent\", borderRight: \"40px solid transparent\", borderBottom: \"70px solid #E76F51\" },\n//   Diamond: { width: 70, height: 70, transform: \"rotate(45deg)\", background: \"#264653\" },\n//   Hexagon: { width: 80, height: 46, background: \"#E9C46A\", clipPath: \"polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)\" },\n//   Star: { width: 0, height: 0, borderLeft: \"40px solid transparent\", borderRight: \"40px solid transparent\", borderBottom: \"70px solid #8A2BE2\" },\n//   Pentagon: { width: 70, height: 70, background: \"#D7263D\", clipPath: \"polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%)\" },\n//   Parallelogram: { width: 100, height: 60, background: \"#4CAF50\", transform: \"skew(20deg)\" },\n//   Trapezoid: { width: 100, height: 60, background: \"#FF9800\", clipPath: \"polygon(25% 0%, 75% 0%, 100% 100%, 0% 100%)\" },\n//   Ellipse: { width: 100, height: 60, background: \"#2196F3\", borderRadius: \"50%\" },\n// };","map":{"version":3,"names":[],"sources":["E:/f-collab/src/Pages/Editor.jsx"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\r\n// import {\r\n//     ReactFlow,\r\n//   ReactFlowProvider,\r\n//   Controls,\r\n//   MiniMap,\r\n//   Background,\r\n//   addEdge,\r\n//   useNodesState,\r\n//   useEdgesState,\r\n// } from \"@xyflow/react\";\r\n// import \"@xyflow/react/dist/style.css\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\n\r\n// const initialNodes = [];\r\n// const initialEdges = [];\r\n\r\n// export const Editor = () => {\r\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n//   const [selectedNode, setSelectedNode] = useState(null);\r\n  \r\n//   const addShape = (shape) => {\r\n//     const newNode = {\r\n//       id: uuidv4(),\r\n//       type: \"default\",\r\n//       data: { label: \"Edit Text\" },\r\n//       position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n//       style: shapeStyles[shape],\r\n//     };\r\n//     setNodes((nds) => [...nds, newNode]);\r\n//   };\r\n  \r\n//   const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\r\n  \r\n//   const handleTextChange = (event) => {\r\n//     setNodes((nds) =>\r\n//       nds.map((node) =>\r\n//         node.id === selectedNode\r\n//           ? { ...node, data: { ...node.data, label: event.target.value } }\r\n//           : node\r\n//       )\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ height: \"100vh\", width: \"100%\" }}>\r\n//       <div style={{ position: \"absolute\", zIndex: 10, top: 10, left: 10 }}>\r\n//         {[\"Rectangle\", \"Circle\", \"Triangle\", \"Diamond\", \"Hexagon\", \"Star\", \"Pentagon\", \"Parallelogram\", \"Trapezoid\", \"Ellipse\"].map((shape) => (\r\n//           <button key={shape} style={{ marginRight: 5 }} onClick={() => addShape(shape)}>\r\n//             {shape}\r\n//           </button>\r\n//         ))}\r\n//         <button style={{ marginRight: 5 }} onClick={() => console.log(\"Download Logic\")}>Download</button>\r\n//       </div>\r\n//       {selectedNode && (\r\n//         <input\r\n//           style={{ position: \"absolute\", top: 50, left: 10, zIndex: 10 }}\r\n//           value={nodes.find((node) => node.id === selectedNode)?.data?.label || \"\"}\r\n//           onChange={handleTextChange}\r\n//         />\r\n//       )}\r\n//       <ReactFlowProvider>\r\n//         <div style={{ height: \"100%\", width: \"100%\" }}>\r\n//           <ReactFlow\r\n//             nodes={nodes}\r\n//             edges={edges}\r\n//             onNodesChange={onNodesChange}\r\n//             onEdgesChange={onEdgesChange}\r\n//             onConnect={onConnect}\r\n//             onNodeClick={(_, node) => setSelectedNode(node.id)}\r\n//             fitView\r\n//           >\r\n//             <MiniMap />\r\n//             <Controls />\r\n//             <Background color=\"#aaa\" gap={16} />\r\n//           </ReactFlow>\r\n//         </div>\r\n//       </ReactFlowProvider>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const shapeStyles = {\r\n//   Rectangle: { width: 100, height: 60, background: \"#F4A261\" },\r\n//   Circle: { width: 60, height: 60, borderRadius: \"50%\", background: \"#2A9D8F\" },\r\n//   Triangle: { width: 0, height: 0, borderLeft: \"40px solid transparent\", borderRight: \"40px solid transparent\", borderBottom: \"70px solid #E76F51\" },\r\n//   Diamond: { width: 70, height: 70, transform: \"rotate(45deg)\", background: \"#264653\" },\r\n//   Hexagon: { width: 80, height: 46, background: \"#E9C46A\", clipPath: \"polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)\" },\r\n//   Star: { width: 0, height: 0, borderLeft: \"40px solid transparent\", borderRight: \"40px solid transparent\", borderBottom: \"70px solid #8A2BE2\" },\r\n//   Pentagon: { width: 70, height: 70, background: \"#D7263D\", clipPath: \"polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%)\" },\r\n//   Parallelogram: { width: 100, height: 60, background: \"#4CAF50\", transform: \"skew(20deg)\" },\r\n//   Trapezoid: { width: 100, height: 60, background: \"#FF9800\", clipPath: \"polygon(25% 0%, 75% 0%, 100% 100%, 0% 100%)\" },\r\n//   Ellipse: { width: 100, height: 60, background: \"#2196F3\", borderRadius: \"50%\" },\r\n// };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}